[{"Name":"1575_A. Another Sorting Problem","Difficulty":"A","Description":"Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nNote\n\nThe following illustrates the first example.\n\n<image>","Solution Language":"PYTHON3","Correct Solution":"n, m = list(map(int, input().split()))\nl = []\nfor _ in range(n):\n    book = list(input())\n    book[1::2]= map(lambda x : chr(155-ord(x) ), book[1::2])\n    l.append(book)\n \nprint(*sorted(range(1, n+1), key = lambda x : l[x-1]))","Incorrect Solution":null},{"Name":"1575_A. Another Sorting Problem","Difficulty":"A","Description":"Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nNote\n\nThe following illustrates the first example.\n\n<image>","Solution Language":"PYTHON3","Correct Solution":"\n\ndef to_tuple(s: str) -> tuple:\n    return tuple(ord(c) if i % 2 == 0 else -ord(c) for i, c in enumerate(s))\n\n\ndef main():\n    n, m = map(int, input().split())\n\n    for e in sorted([(to_tuple(input()), i) for i in range(1, n+1)]):\n        print(e[-1])\n\n\nif __name__ == \"__main__\":\n    main()\n","Incorrect Solution":null},{"Name":"1575_A. Another Sorting Problem","Difficulty":"A","Description":"Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nNote\n\nThe following illustrates the first example.\n\n<image>","Solution Language":"PYTHON3","Correct Solution":"n,m=map(int,input().split())\nl=[(lambda x:[i+1,[x[j]if j%2==0 else chr(155-ord(x[j]))for j in range(m)]])(input())for i in range(n)]\nprint(*[i[0]for i in sorted(l,key=lambda x:x[1])])","Incorrect Solution":null},{"Name":"1575_A. Another Sorting Problem","Difficulty":"A","Description":"Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nNote\n\nThe following illustrates the first example.\n\n<image>","Solution Language":"PYTHON3","Correct Solution":"n , m = map(int, input().split())\n\nl = [(lambda x: [i+1,[x[j] if j%2==0 else chr(ord(\"Z\")-ord(x[j])+ord(\"A\")) for j in range(m)]])(input()) for i in range(n)]\nprint(*[i[0] for i in sorted(l, key=lambda x: x[1])])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):n, m, k = map(int, input().split());print('YES') if (k == 3 and m == (n * (n - 1)) \/\/ 2) or (k > 3 and m >= n - 1 and m <= (n * (n - 1)) \/\/ 2) or (n == 1 and m == 0 and k > 1) else print('NO')","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[(n-2<m<=c)&(n<2<k+1or\nk>2>m%c or k-2>1<m)::2])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,m,k = list(map(int, input().split()))\n    answer = \"NO\"\n    if (m==0 and m==n-1 and k>=2) or ((m>=n-1 and m<=n*(n-1)\/\/2) and ((m==n*(n-1)\/\/2 and k>=3) or (k>=4))):\n        answer = \"YES\"\n    print(answer)","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[(n-2<m<=c)&(n<2<k+1or\nk>2and m%c<2or k-2>1<m)::2])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[k>1and\nn-2<m<=c and(n<2or n==2<k or(k-2)*m>=c or k-2>1<m)::2])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[n-2<m<=c\nand(n<2<k+1or k>2and(n==2 or m==c)or k-2>1<m)::2])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[(n-2<m<=c)&(m>1<k-2or n<2<k+1or\nk>2>m%c)::2])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"ans = []\nfor _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    if (k >= 2 and n == 1 and m == 0) or (k == 3 and m == n*(n-1)\/\/2) or (k > 3 and n-1 <= m and m <= n*(n-1)\/\/2):\n        ans.append(\"YES\")\n    else:\n        ans.append(\"NO\")\nfor i in ans:\n    print(i)            ","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[n-2<m<=c\nand(n<2<k+1or k>2and(n<3or m==c)or k-2>1<m)::2])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    nd = n * (n - 1) \/\/ 2\n    if m < n - 1 or m > nd:\n        print('NO')\n    elif n == 1:\n        print(['NO', 'YES'][k > 1])\n    elif m < nd:\n        print(['NO', 'YES'][k > 3])\n    else:\n        print(['NO', 'YES'][k > 2])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[(n-2<m<=c)&(n<2<k+1or\nk>2and(n<3or m==c)or k-2>1<m)::2])","Incorrect Solution":null},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    n, m, k = map(int, input().split())\n    if m >= n-1:\n        if k >= 4:\n            print(\"YES\")\n        elif k == 3:\n            if m >= n*(n-1)\/2:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[k>0\nand n-2<m<=c and(n==1or m==1and k>0 or m*k==2*c or k>2<n)::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for t in range(int(input())):\n    n,m,k = map(int,input().split())\n    d,e = (n*(n-1))\/\/2, n-1\n    l = (d+1)-m\n    if m>=e and m<=d :\n        if l<k-1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());print('YNEOS'[k<1or k==1and(n,m)!=(1,0)or\nk>2and m<n-1or 2*m!=n*n-n::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    if n==1 and m==0 and k>1:\n        print(\"YES\")\n    if m<(n-1):\n        print('NO')\n    \n    else:\n        e = n*(n-1)\/\/2\n        if (e==m and k>=3) or (e>m and k>=4):\n            print(\"YES\")\n        else:\n            print(\"NO\")"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());print('NYOE S'[m>1<k-2or\nn<2<k+1or n-2<m<=(c:=n*n-n>>1)and k>2>m%c::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n,m,k=map(int,input().split())\n    if(n-1>m):\n        print(\"NO\")\n    else:\n        if(m<(3*n-(2*k))):\n            print(\"NO\")\n        else:\n            print(\"YES\")"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());print('YNEOS'[k==1and(n,m)!=(1,0)or k<2or\nk>2and m<n-1or 2*m!=n*n-n::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());print('YNEOS'[n>1==k or k<2or\nk>2and m<n-1or 2*m!=n*n-n::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());print('YNEOS'[k<2or\nk>2and m<n-1or 2*m!=n*n-n::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"#                                               be n\u0103m \u2764xod\u0103\u2764\n# Created by Ali Heydari\nt = int(input())\nfor i in range(t):\n    n, m, k = [int(i) for i in input().split(' ')]\n    if n == 1 or (k > 3 and m >= n - 1) or (k == 3 and m == n*(n-1)\/\/2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[k>1and\nn-2<m<=c and(n<2or n==2<k or(k-2)*m>=c or k-2>2<n)::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for fghj in range(int(input())):\n    n,m,k=list(map(int,input().split()))\n    if(m<n-1 or m>n*(n-1)\/2):\n        print(\"NO\")\n        continue\n    if(m==n*(n-1)\/2):\n        min=1\n    else:\n        min=2\n    req=k-1\n    if(min<req):\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());print('YNEOS'[k<1or k==1and(n,m)!=(1,0)or(n,m)==(2,1)and\nk!=2or k>2and m<n-1or 2*m!=n*n-n::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());c=n*n-n>>1;print('NYOE S'[n-2<m<=c\nand(n<2<k+1or n==2<k or(k-2)*m>=c or k-2>1<m)::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    if m<(n-1):\n        print('NO')\n    elif (k>=4):\n        print(\"YES\")\n    else:\n        e = n*(n-1)\/\/2\n        if (e==m and k>=3) or (e>m and k>=4):\n            print(\"YES\")\n        else:\n            print(\"NO\")"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());print('YNEOS'[k<3or\nk>3and m<n-1or 2*m!=n*n-n::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    if m<(n-1):\n        print('NO')\n    \n    else:\n        e = n*(n-1)\/\/2\n        if (e==m and k>=3) or (e>m and k>=4):\n            print(\"YES\")\n        else:\n            print(\"NO\")"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:n,m,k=map(int,s.split());print('NYOE S'[m>1<k-2or\nn<2<k+1or m in(0,1,n*n-n>>1)and n-m<2<k::2])"},{"Name":"1581_B. Diameter of Graph","Difficulty":"B","Description":"CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n,m,k=map(int,input().split())\n    if m<n-1 or m>n*(n-1)\/\/2:\n        print('NO')\n        continue\n    if m==n*(n-1)\/\/2:\n        r=1\n    else:\n        r=2\n    if r<k-1:\n        print('YES')\n    else:\n        print('NO')\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys, collections, math, bisect, heapq, random\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    a,b,c = map(int,input().split())\n    v = a + 2 * b + 3 * c\n    print(v & 1)\n\n\n\n\n\n\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor item in range(0,t):\n    a,b,c=map(int,input().split())\n    print(((a*1)+(b*2)+(c*3))%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    one, two, three = (int(x) for x in input().split())\n    \n    print((one + 2*two + 3*three) % 2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())): \n    a, b, c = map(int, input().split())\n    print(abs(a%2 - 2*(b%2) - 3*(c%2))%2)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    print((a + 2*b + 3*c) % 2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"Sat=int(input())\nfor i in range(Sat):\n    \n    A,B,C=map(int,input().split())\n    if ((A)+(B*2)+(C*3))%2==0:\n        \n        print(\"0\")\n    else:\n        \n        print(\"1\")","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in ' '*int(input()):\n    a,b,c=map(int,input().split())\n    print((a+b*2+c*3)%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    if (a + b * 2 + c * 3) % 2 == 0:\n        print(0)\n    else:\n        print(1)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())): a,b,c=map(int,input().split());print((a+b*2+c*3)%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    x, y, z = map(int, input().split()) \n    num = x + 2*y + 3*z \n    if num % 2:\n        print(1)\n    else:\n        print(0)\n        \n  ","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b,c = map(int, input().split())\n\n    s = a+(2*b)+(3*c)\n    if s % 2 == 0:\n        print(0)\n    else:\n        print(1)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b,c = map(int,input().split())\n    if a==b==c:\n        print(0)\n    else:\n        x = 1*a + 2*b + 3*c\n        print(x%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    k=a*1+b*2+c*3\n    print(k%2)\n        ","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nlist1=[]\nfor i in range(n):\n    list1.append([int(x) for x in input().split()])\nfor i in list1:\n    print((i[0]+i[2])%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b,c = map(int,input().split())\n    b = b*2\n    c = c*3\n    if (a+b+c)%2 == 0:\n        print(0)\n    else:\n        print(1)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    summ=3*c\n    summ+=2*b\n    summ+=a\n    if summ%2:print(1)\n    else:print(0)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    a,b,c=map(int,input().split())\n    temp=a*1+b*2+c*3\n    if(temp%2==0):\n        print(\"0\")\n    else:\n        print(\"1\")","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s = tuple(map(lambda t: t[0] * t[1], zip(map(int, input().split()), (1,2,3))))\n    print(sum(s)%2)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range (int(input())):\n    l=list(map(int,input().split()))\n    L=l[0]+l[1]*2+l[2]*3\n    if L%2==0:\n        print(0)\n    else:\n        print(1)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    x,y,z=map(int,input().split())\n    y*=2;z*=3\n    print((x+y+z)%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a,b,c=map(int,input().split())\n\n    if(a+b*2+c*3)%2==0:\n        print(0)\n\n    else:\n        print(1)\n    \n\n\n    \n\n\n\n\n\n\n\n\n   ","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\n\n\nfor i in range (n):\n    a,b,c=map(int,input().split())\n    b=b*2\n    c=c*3\n    print((a+b+c)%2)\n\n\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    a,b,c=map(int,input().split())\n    t=a+2*b+3*c\n    if (t%2==0):\n        print(0)\n    else:\n        print(1)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t>0:\n    a,b,c = map(int, input().split())\n    if (a+2*b+3*c)%2==0:\n        print(0)\n    else:\n        print(1)\n        \n    t-=1","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):a, b, c = map(int, input().split());print((a + c) % 2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    print((a+b*2+c*3)%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    a, b, c = l[0], l[1], l[2]\n    print((a + 2*b + 3*c) % 2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    r = 0\n    if c % 2 == 1:\n        r += 3\n    if b % 2 == 1:\n        r += 2\n    if a % 2 == 1:\n        r += 1\n    print(r % 2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\nfor _ in range(T):\n\ta, b, c = map(int, input().split())\n\tb *= 2\n\tc *= 3\n\tsum = a + b + c\n\tif sum % 2:\n\t\tprint(1)\n\telse:\n\t\tprint(0)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    res = a + 2 * b + 3 * c\n\n    print(res % 2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t:\n    t -= 1\n    a, b, c = list(map(int, input().split()))\n    one = a\n    two = b * 2\n    three = c * 3\n    total = one + two + three\n    print(total % 2)\n\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t!=0:\n    total=0\n    a,b,c=map(int,input().split())\n    total=total+a*1+b*2+c*3\n    d=total%2\n    print(d)\n    t=t-1","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor slkdj in range(t):\n\tl=[int(i)for i in input().split()]\n\tfor i in range(3):\n\t\tl[i]*=(i+1)\n\tprint(sum(l)%2)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t != 0:\n  a, b, c = map(int, input().strip().split())\n  total = a + 2*b + 3*c\n  if total % 2 == 0:\n    print(0)\n  else:\n    print(1)\n  t -= 1","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    \n    print((a + b * 2 + c * 3) % 2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"\nt = int(input())\nfor _ in range(t):\n    a,b,c = map(int, input().split())\n    curr_sum = a*1 + b*2 + c*3\n    if curr_sum%2 == 0:\n        print(0)\n    else:\n        print(1)     ","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    time = a + 2*b + 3*c\n    if time%2==0:print(0)\n    else: print(1)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n\ta,b,c = map(int,input().split())\n\tout = a + b*2 + c*3\n\tprint(out%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    a,b,c=map(int, input().split())\n    a=a*1\n    b=b*2\n    c=c*3\n    if (a+b+c)%2==0:\n        print(0)\n    else:\n        print(1)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    x = list(map(int, input().split()))\n    print((x[0] + (x[1] * 2) + (x[2] * 3)) % 2)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    if (a + 2*b + 3*c) % 2 == 0:\n        print(0)\n    else:\n        print(1)\n    ","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    s=a+2*b+3*c\n    if s%2==0:\n        print('0')\n    else:\n        print('1')\n        ","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    b=2*b\n    c=3*c\n    res=abs(c-b-a)\n    print(res%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input(\"\"))\nfor i in range(t):\n    numbers = list(map(int, input(\"\").split(\" \")))\n    if(((numbers[0]) + (numbers[1]*2) + (numbers[2]*3)) % 2 == 0):\n        print(0)\n    else:\n        print(1)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    b = b*2\n    c = c*3\n    print((a+b+c)%2)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    a , b , c = map(int,input().split())\n    if ((a) + (2*b) + (3*c)) % 2 == 0:\n        print(0)\n    else:\n        print(1)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())): a,b,c=map(int,input().split());print((a+b*2+c*3)&1)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n     a=list(map(int,input().split()))\n     print((a[0]+a[1]*2+a[2]*3)%2)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor h in range(t):\n    a,b,c=map(int,input().split())\n    z=a+2*b+3*c\n    if z%2==0:\n        print(0)\n    else:\n        print(1)\n    ","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t):\n    a,b,c=map(int,input().split())\n    if a==b and b==c:\n        print(0)\n    else:\n        print(((1*a)+(2*b)+(3*c))%2)\n    t=t-1\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    x = (a+(2*b) + (3*c))\n    if x % 2 == 0:\n        print(\"0\")\n    else:\n        print(\"1\")\n        ","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nt=int(input())\nwhile(t>0):\n    t-=1\n    #n=int(input())\n    #l=list(map(int,input().split()))\n    a,b,c=map(int,input().split())\n    print( (a+2*b+3*c)%2 )\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t:\n    a, b, c = input().split()\n    total = int(a)+2*int(b)+3*int(c)\n    if total%2==0:\n        print(0, '\\n')\n    else:\n        print(1, '\\n')\n    t -= 1","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"from math import ceil\n\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    print((a + 2 * b + 3 * c) % 2)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    a,b,c = map(int, input().split())\n    s = a + 2*b + 3*c\n    if s % 2 == 0:\n        print(0)\n    else:\n        print(1)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    a,b,c = map(int,input().split())\n    print((a+2*b+3*c)%2)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a,b,c=map(int,input().split())\n    if((a+b*2+c*3)%2==0):\n        print(0)\n    else:\n        print(1)\n","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    a,b,c=map(int,input().split())\n    bb=2*b\n    cc=3*c\n    total=a+bb+cc\n    if(total%2==0):\n        print(\"0\")\n    else:\n        print(\"1\")","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = list(map(int,input().split()))\n    total = n[0] + 2*n[1] + 3*n[2]\n    print(0 if total%2==0 else 1)","Incorrect Solution":null},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    a=list(map(int,input().split()))\n    a.sort()\n    print(a[2]-a[1])"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nwhile t != 0:\n  a, b, c = map(int, input().strip().split())\n  if a == b == c:\n    print(0)\n  else:\n    diff = a + b*2 - c\n    print(abs((diff)))\n  t -= 1\n\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a,b,c=list(map(int,input().split()))\n    d=1*a\n    e=2*b\n    f=3*c\n    print((d+e+f)%(a+b+c))"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    print(0 if a==b or b==c or c==a else 1)"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a = sorted(map(int, input().split()))\n    print(a[-1] - a[-2])\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n    a,b,c=map(int,input().split())\n    temp=a+b+c\n    if(temp%2==0):\n        print(\"1\")\n    else:\n        print(\"0\")"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor slkdj in range(t):\n\tl=[int(i)for i in input().split()]\n\tprint(sum(l)%2)\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    b=[]\n    a,b,c=map(int,input().split())\n    if(a==b==c):\n        print(0)\n    else:\n        print(1)\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from math import ceil\n\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    print((a + b + c + 1) % 2)\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a=list(map(int,input().split()))\n    s=sum(a)\n    if s%2==0:\n        print(1)\n    else:\n        print(0)"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input(\"\"))\nfor i in range(t):\n    numbers = list(map(int, input(\"\").split(\" \")))\n    if(((numbers[0]) + (numbers[1]*2) + (numbers[2]*3)) % sum(numbers) == 0):\n        print(0)\n    else:\n        print(1)\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    a=list(map(int, input().split()))\n    a.sort()\n    print(a[-1]-a[-2])"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from math import ceil\n\nfor _ in range(int(input())):\n    a = sorted(map(int, input().split()))\n    print(ceil((a[-1] - a[-2]) \/ 2))\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n     a=list(map(int,input().split()))\n     print(int(not(sum(a)%2)))"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nn = int(input())\nfor i in range(n):\n    num = input()\n    l = num.split(\" \")\n    for j in range(len(l)):\n        l[j] = int(l[j])\n    if sum(l) %2 == 0:\n        print(0)\n    else:\n        print(1)"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    x = list(map(int, input().split()))\n    print((x[0] + x[1] + x[2]) % 2)\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nn = int(input())\nfor i in range(n):\n    num = input()\n    l = num.split(\" \")\n    for j in range(len(l)):\n        l[j] = int(l[j])\n    if sum(l) %2 == 0:\n        print(1)\n    else:\n        print(0)"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n  a, b, c = input().split()\n  a = int(a)\n  b = int(b)\n  c = int(c)\n  if (a + b + c) % 2 == 1:\n    print(\"0\")\n  else:\n    print(\"1\")\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n     a=list(map(int,input().split()))\n     print(sum(a)%2)"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    print([1,0][a==b==c])\n    \n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input(\"\"))\nfor i in range(t):\n    numbers = list(map(int, input(\"\").split(\" \")))\n    if(sum(numbers) % 2 == 0):\n        print(1)\n    else:\n        print(0)\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"w = int(input())\ni = 0\nwhile i<w:\n    b = input().split(\" \")\n    if len(set(b))==1:\n        print(0)\n    else:\n        print(1)\n    i=i+1"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    a , b , c = map(int,input().split())\n    if a == b and b == c:\n        print(0)\n    else:\n        print(1)"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input(\"\"))\nfor i in range(t):\n    numbers = list(map(int, input(\"\").split(\" \")))\n    print(((numbers[0]) + (numbers[1]*2) + (numbers[2]*3)) % sum(numbers))\n"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    print(0 if a==b==c else 1)"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor item in range(0,t):\n    a,b,c=map(int,input().split())\n    if a==c:\n        print(\"0\")\n    elif a>c:\n        print(a-c)\n    else:\n        print(c-a)"},{"Name":"1582_A. Luntik and Concerts","Difficulty":"A","Description":"Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor item in range(0,t):\n    a,b,c=map(int,input().split())\n    if a==c:\n        print(\"0\")\n    elif a>b:\n        print(a-b)\n    else:\n        print(b-a)"},{"Name":"1591_A. Life of a Flower","Difficulty":"A","Description":"Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import os\nos.system(\"ls\")"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    x = int(input())\n    print(-1*(x-1), x, sep = ' ')","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0, 1)\n    else:\n        print((n-1)*-1, n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"def solve_case():\n    n = int(input())\n    m = n - 1\n    print(f'{-m} {n}')\n\n\nT = int(input())\nfor t in range(T):\n    solve_case()\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):n = int(input());print(-n + 1, n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    print(-(n - 1), n)\n        ","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    print(-n+1, n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(-n+1,\" \",n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    if n==1:\n        print(\"0 1\")\n    else:\n        print(\"{} {}\".format(-(n-1),n))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"\n\ndef solve():\n    n=int(input())\n\n    print(-1*(n-1),n)\n\n\n\nt=int(input())\nfor i in range(t):\n    solve()","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"# import math\n# a, b, c, d = map(int, input().split())\nq = int(input())\nfor i in range(q):\n   a = int(input())\n   print(-a+1,a)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile(t>0):\n     n = int(input())\n     x = n - 1\n     x = -x\n     print(x , n)\n     t-=1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(1-n, n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"# list(map(int,input.split(\" \")))\n\nn = int(input())\n\nfor i in range(n):\n    m = int(input())\n    \n    print(*[1-m,m])","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nd={}\nfor i in range(t):\n    n=int(input())\n    d[i]=str(-(n-1))+' '+str(n)\nfor i in range(t):\n    print(d[i])","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n\n    print(int((n - 1) * (-1)), n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(-n + 1, n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for x in range(int(input())) :\n    n = int(input())\n    print(-(n-1), n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor tt in range(t):\n    n=int(input())\n    print(-n+1,n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"test = int(input())\nfor _ in range(0, test):\n    k = int(input())\n    if k == 1:\n        print(0, 1)\n    else:\n        print(-(k-1), k)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t0 = int(input())\nfor t in range(t0):\n    n = int(input())\n    print(\"{} {}\".format(-n+1, n))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(-(n-1),n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for n in [*open(0)][1:]:print(1-int(n),n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    #a = list(map(int,input().split()))\n    print(1-n,n)    ","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor _ in range(n):\n    m = int(input())\n    print(f\"{-(m-1)} {m}\")","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"test=int(input())\nwhile test>0:\n    num=int(input())\n    fi=1-num\n    se=num\n    print(fi, end = \" \")  \n    print(se)\n    test-=1\n    ","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n\tN = int(input())\n\tr = N\n\tl = -(N-1)\n\tprint(l,r)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"N=int(input())\nfor i in range(N):\n    n=int(input())\n    print(1-n,end=\" \")\n    print(n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"T=int(input())\nfor i in range (T):\n    n = int(input())\n    print(str(-n+1)+\" \"+str(n))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for ic in range(int(input())):\n     n = int(input())\n     print(-(n-1),n)\n     ","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for k in range(int(input())):\n    n=int(input())\n    print(((-1)*(n-1)),n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nwhile(t):\n    t = t - 1\n    n = int(input())\n    print(\"{} {}\".format(-n + 1, n))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nwhile t>0:\n    \n    n = int(input())\n    \n    print(1-n,n,end=' ')\n\n    \n    t-=1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-n + 1, n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    n = int(input())\n    print(-(n-1), n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(1-n, n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-1*(n-1),n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"cc = int(input())\nfor i in range(cc):\n    v = int(input())\n    l = -1 * (v-1)\n    print(f\"{l} {v}\")","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-n + 1 , n , sep=\" \")","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"inp1 = int(input())\nfor i in range(inp1):\n    a=int(input())\n    b=int((a*-1)+1)\n    print(str(b) + \" \" +str(a))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"x = int(input())\ncases = []\nfor i in range(0, x):\n    cases.append(int(input()))\nfor i in range(0, x):\n    print(str(-(cases[i])+1) + \" \" + str(cases[i]))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor _ in range(n):\n    t = int(input())\n    print(1-t, t)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    x = int(input())\n    print(str(-(x-1)) + ' ' + str(x))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"x=int(input())\ni=0\nwhile i<x:\n    l=int(input())\n    t=(l-1)*-1\n    \n    print(f\"{t} {l}\")\n    i+=1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor tc in range(t):\n   n = int(input())\n   print(-(n-1),n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    print(-1*(n-1),n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(str(-n+1) + \" \" + str(n))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    if n==1:\n        print(\"0\",n)\n    else:\n        print(-(n-1),n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"def solve():\n    n = int(input())\n    # find l and r\n    # l < r\n    \n    return [-n+1, n]\n    \nfor _ in range(int(input())):\n    print(*solve())","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t != 0:\n  t = t - 1\n  n = int(input())\n  print(-n + 1, end = ' ')\n  print(n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"import math\nc=int(input())\nb=0\nwhile b<c:\n    d=int(input())\n    print(-d+1,d)\n    b=b+1\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(t):\n    x = int(input())\n    print(-x+1, x)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile (t):\n    n = int(input())\n    print(-(n-1),n)\n    t -= 1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"from math import ceil,floor\nfor i in range(int(input())):\n    x=int(input())\n    print(-x+1,x)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for n in[*map(int,open(0))][1:]:print(1-n,n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"#consecutivesumriddle\nT=int(input())\nwhile(T>0):\n    n = int(input())\n    a=(n-1)*-1\n    b=n\n    print(a, b)\n    T-=1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor test in range(t):\n    n = int(input())\n    print(-n+1, n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"c=int(input())\nwhile c:\n\ttarget=int(input())\n\tprint(-(target-1),target)\n\tc-=1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nwhile(t):\n    n = int(input())\n    print(-n+1, n)\n    t -= 1\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(-n+1,' ',n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(-1*(n-1),n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\nwhile (n != 0):\n    num = int(input())\n    r = num\n    l = -(num-1)\n    print(str(l) + \" \" + str(r))\n    n -= 1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n\n    n=int(input())\n    \n    print(-n+1, n)\n\n\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    if n == 0: print(-1, 1)\n    else: print(-(n-1), n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(0,t):\n    num=int(input())\n    print('%d %d'%(-(num-1),num))","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n \nfor _ in range(t):\n    n = int(input())\n    print(1 - n, n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:print(-(int(s)-1),int(s))\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    print(-(n-1),n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor x in range(n):\n    x=int(input())\n    print(1-x,x)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t:\n    n=int(input())\n    print(-n+1,n)\n    t-=1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\n \nwhile t>0:\n    n=int(input())\n    l=-1*n+1\n    r=n\n    print(l)\n    print(r)\n    t=t-1","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"import math\ndef solve():\n    n = int(input())\n    print(-n + 1, n)\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    a=int(input())\n    print(-(a-1),a)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"cases = int(input())\nfor _ in range(cases):\n    num = int(input())\n\n    print(-abs(num-1), num)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"x = int(input())\nfor t in range(x):\n    n = int(input())\n    diff = n - 1\n    print(-diff, n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    print(1-n,n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\ninput = sys.stdin.readline\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    print(-(n-1), n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    print(1-n,' ',n)\n    ","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for u in range(int(input())):\n    n=int(input())\n    print(-(n-1),n)\n","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for i in range (int(input())):\n\ta=int(input ())\n\tprint(1-a,a)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 != 0:\n        print(n \/\/ 2, n\/\/2 + 1)\n    else:\n        print(-(n - 1), n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":"for x in range(int(input())):\n    n=int(input());print(-1*(n-1),n)","Incorrect Solution":null},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"cc = int(input())\nfor i in range(cc):\n    v = int(input())\n    print(f\"-{(v-1)} {v}\")"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    print(n - 1, n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    print(n,0)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n\n    print(int((n - 1) \/ (-1)), n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor x in range(n):\n    x=int(input())\n    if x%2==1:\n        print(int((x-1)\/2),int((x+1)\/2))\n    else:\n        print(-x+1,x)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(0,n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n    n=int(input())\n    print(\"0\",\" \",n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nwhile (t):\n    n = int(input())\n    print(0,n)\n    t -= 1"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(0, n)\n    \n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nm = int(input())\n\n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nwhile (t):\n    n = int(input())\n    print(\"-\"+str(n-1),n)\n    t -= 1"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(\"1\",\" \",n-1)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n-1, n)\n    \n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n\n    if n != 1:\n        print(int((n - 1) \/ (-1)), n)\n\n    else:\n        print(n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    print(\"0\",n)\n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print((n\/\/2)-1, (n\/\/2)+1)\n    else:\n        print(n\/\/2, (n\/\/2)+1)\n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nimport math\n\ncount = -1;\nfor line in sys.stdin:\n    if count >= 0:\n        case = int(line)\n        print(-1 * case, case + 1)\n    count += 1\n    "},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor _ in range(n):\n    t = int(input())\n    print(t-1, t)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for n in[*map(int,open(0))][1:]:print(-n,n+1)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = 0\n    \ndef getTestcase(): T = int(input())\n\ngetTestcase()\n\nfor i in range(T):\n    n = int(input())\n    if n == 0: print(-1, 1)\n    print(-(n-1), n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile t:\n    n=int(input())\n    print(0,n)\n    t-=1"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(\"0\",\" \",n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\ndef solve():\n    n=int(input())\n\n    print(-1*n,n+1)\n\n\n\nt=int(input())\nfor i in range(t):\n    solve()"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = 0\n    \ndef getTestcase(): T = int(input())\n\ngetTestcase()\n\nfor i in range(T):\n    n = int(input())\n    print(-(n-1), n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"inp1 = int(input())\nfor i in range(inp1):\n    a=int(input())\n    b=int((a*-1)+1)\n    print(str(a) + \" \" +str(b))"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n  n=int(input())\n  print(\"-\"+str(n-1),n)\n   \n\n  \n\n\n  \n\n    \n    "},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for ic in range(int(input())):\n     n = int(input())\n     print(n-1,n)\n     "},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n & 1:\n        print(n \/\/ 2, n \/\/ 2 + 1)\n    else:\n        print(n \/\/ 2, n \/\/ 2)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    x = int(input())\n    print(x, x)\n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in[*open(0)][1:]:print(int(s)+1)\n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n\/\/2, n\/\/2)\n    else:\n        print(n\/\/2, (n\/\/2)+1)\n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\ninput = sys.stdin.readline\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    print(-n, n+1)\n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for n in[*map(int,open(0))][1:]:print(n>>1,n+1>>1)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nfor _ in range(int(input())):\n\n    n = int(input())\n    \n    print(0, n)\n\n"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    x = int(input())\n    print('-' + str(x-1) + ' ' + str(x))"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(0 , n , sep = \" \")"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n, n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    print(0,n)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for ic in range(int(input())):\n     n = int(input())\n     print(-n,n+1)\n     "},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\ncount = -1;\nfor line in sys.stdin:\n    if count >= 0:\n        case = int(line)\n        print(0, case)\n    count += 1"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"target=int(input())\n\nprint(-(target-1),target)"},{"Name":"1594_A. Consecutive Sum Riddle","Difficulty":"A","Description":"Theofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n, 1-n)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    c = 0\n    ans = 0\n    while k > 0:\n        if k%2:\n            ans = (ans + n**c)%(1000000007)\n        k\/\/=2\n        c+=1\n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    ans = 0\n    temp = 2 ** 32\n    m = 32\n    while temp != 0:\n        if temp & k != 0:\n            ans += (n ** m)\n        temp = temp >> 1\n        m -= 1\n    print(ans%(int(1e9)+7))\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import math\nt = int(input())\nfor i in range(t):\n    n,k = input().split()\n    n,k = int(n),int(k)\n    s = 0\n    while k!=0 :\n        p = math.log(k)\/math.log(2)\n        p = int(p)\n        s += n**p\n        k-= 2**p\n    print(s%int(1e9+7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"m = 1000000007\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    b = bin(k)[2:][::-1]\n    count = 0\n    a = 0\n    for i in b:\n        if i == \"1\":\n            count = (count + pow(n, a, m)) % m\n        a += 1\n    print(count)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"# Har har mahadev\n# author : @ harsh kanani\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    mod = 10 ** 9 + 7\n    ans = c = 0\n    while k > 0:\n        if k % 2:\n            ans = (ans + n ** c) % mod\n        k \/\/= 2\n        c += 1\n        #print(ans, k, c)\n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n, k = map(int, input().split())\n\n    result = int()\n\n    bin_k = bin(k)[2::][::-1]\n\n    for index_of_bin_k in range(len(bin_k)):\n        if bin_k[index_of_bin_k] == \"1\":\n\n            result += n ** index_of_bin_k\n\n    print(result % (10 ** 9 + 7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\nfrom io import BytesIO\nfrom os import read, fstat\ninput = BytesIO(read(0, fstat(0).st_size)).readline\n \n# SOME SHIT\n# map(int, input().split())\n# sys.stdout.write(\"\") ~ |\n \n \ndef solve_tc():\n    mod = 1000000007\n    n, k = map(int, input().split())\n    s = 0\n    for i in range(35):\n        if k & (1 << i):\n            s = (s + pow(n, i, mod)) % mod\n    return s\n \n \nfor _ in range(int(input())):\n    sys.stdout.write(str(solve_tc()) + \"\\n\")","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n, k = [int(x) for x in input().split()]\n    a = 0\n    p = 0\n    while k != 0:\n        if k % 2:\n            a = (a + n**p) % (10**9 + 7)\n            k = k \/\/ 2\n        else:\n            k = k \/\/ 2\n        p += 1\n    print(a)\n\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"\nt = int(input())\nfor _ in range(t):\n    n, k = [int(i) for i in input().split()]\n    count = 0\n    for i in range(32):\n        if k & 2**i != 0:\n            count += pow(n, i, 10**9 + 7)\n            count %= 10**9 + 7\n    print(count)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    result = 0\n    acc = 1\n    while k > 0:\n        if k&1 == 1:\n            result = (result + acc) % (10**9 + 7)\n        k >>= 1\n        acc = (acc * n) % (10**9 + 7)\n    print(result)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    w=str(bin(k))\n    z=1\n    summ=0\n    for i in range(len(w)):\n        if w[-1-i]=='1':\n            summ+=z\n        z*=n\n    print(summ% (10**9+7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n\tn, k = map(int, input().split())\n\tif k == 1:\n\t\tprint(k)\n\t\tcontinue\n\n\n\tmod = 10**9 + 7\n\n\ts = bin(k)[2:]\n\tl = len(s)\n\n\tans = 0\n\tfor i in range(len(s)-1, -1, -1):\n\t\tif s[i] == '1':\n\t\t\tans += pow(n, (l-1)-i, mod)\n\n\tprint(ans%mod)\n\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n,k=list(map(int,input().split()))\n    a=bin(k)[2:]\n    z=0\n    for i in range(len(a)):\n        z=(z*n+int(a[i]))%1000000007\n    print(z)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n, k = tuple(map(int, input().split()))\n    i, r = 0, 0\n    while k != 0:\n        if k % 2:\n            r += n**i\n        i += 1\n        k \/\/= 2\n    print(r % (10**9 + 7), '\\n')\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"M=10**9+7\nfor t in range(int(input())):\n    n,k=map(int,input().split())\n    ans=0\n    cnt=-1\n    \n    while k>0:\n        cnt+=1\n        ans+=(n**cnt) if k%2==1 else 0\n        ans%=M\n        k=k\/\/2\n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor _ in range(T):\n    N,K=map(int,readline().split())\n    mod=10**9+7\n    lst=[1]\n    for i in range(35):\n        lst.append(lst[-1]*N%mod)\n    ans=0\n    for i in range(35):\n        if K>>i&1:\n            ans+=lst[i]\n            ans%=mod\n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod = 10**9 + 7\ndef modPow(x , y):\n    if y == 0 : return 1\n    if y==1: return x % mod\n    f = modPow(x, y\/\/2) % mod\n    f = (f*f) % mod\n    if y%2 == 0: return f\n    else: return (x*f)%mod\n\n\nfor tc in range(int(input())):\n    n , k = [int(x) for x in input().split()]\n    sum = 0\n    for i in range(31):\n        if 1<<i & k != 0:    \n            sum = (sum + modPow(n, i)) % mod\n    print(sum)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nbiggie = 10**9 + 7\nfor _ in range(t):\n    nk = str(input()).split()\n    n = int(nk[0])\n    k = int(nk[1])\n    k_mod_2 = []\n    while k != 0:\n        k_mod_2.append(k%2)\n        k = k \/\/ 2\n    number = []\n    for i in range(len(k_mod_2)):\n        number.append(k_mod_2[i]*(n**i))\n    print(sum(number)%biggie)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t:\n    arr = [int(a) for a in input().split()]\n    n,k = arr\n    bi = \"{0:b}\".format(k)\n    j = len(bi)-1\n    ans =0\n    for i in range(len(bi)):\n        if bi[i] == '1':\n            ans += pow(n,j,1000000007)\n        j-=1\n    print(ans % 1000000007)\n    t-=1","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nmod=1000000007\nfor _ in range(t):\n    n,k=map(int,input().split())\n    radix2=[]\n    while(True):\n        if(k==1): radix2.append(1);break\n        temp=k%2\n        radix2.append(temp)\n        k=k\/\/2\n    l=len(radix2);pown=[1];ans=0\n    for i in range(1,l):\n        pown.append((pown[i-1]*n)%mod)\n        if(radix2[i]): ans+=pown[i]\n    if(radix2[0]): ans+=1\n    print(ans%mod)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"MOD = 1000000007\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    ans = 0\n    for digit in bin(k):\n        ans *= n\n        if digit == '1':\n            ans += 1\n        ans %= MOD\n    print(ans)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def main():\n    tc=1\n    tc = int(input())\n    for _ in range(tc):\n        n,k=map(int,input().split())\n        n = int(n)\n        cnt=0\n        s=bin(k).replace(\"0b\",\"\")\n        s=s[::-1]+\"0\"*32\n        for i in range(32):\n            if s[i]==\"1\":\n                cnt = (cnt + pow(n, i)) % (10**9+7)\n        print(cnt)\nif __name__ == '__main__':\n    main()","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod=10**9+7\nfor _ in range(int(input())):\n    k,n=map(int,input().split())\n    ans=0\n    s=bin(n)\n    n=len(s)\n    x=1\n    for i in range(n-1,1,-1):\n        ans=(ans+int(s[i])*x)%mod\n        x=(x*k)%mod\n    print(ans)\n    ","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput =sys.stdin.buffer.readline\nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    ans =0\n    mod =10**9+7\n    addd=0\n    while m>=1:\n        ini =0\n        count=0\n        while ini <=m:\n            count+=1\n            ini =2**count\n        count-=1\n        m-=(2**(count))\n        ans =(ans+n**count) %mod\n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def poww(a,b):\n    res = 0\n    sch = 1\n    for i in range(len(a)-1,-1,-1):\n        if a[i] == '1':\n            res += sch\n        sch *= b\n        sch %= 1_000_000_007\n    return res % 1_000_000_007\n\n\n\na = int(input())\nfor i in range(a):\n    n,k = map(int,input().split())\n    k = bin(k)[2:]\n    #print(n,k)\n    print(poww(k,int(n)))\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def solve():\n\tn, k = map(int, input().split())\n\ts = bin(k)\n\ts = s[2:]\n\tans = 0\n\tmd = 1000000007\n\tcnt = 0 \n\tfor i in range(len(s) - 1, -1, -1):\n\t\tans = (ans + int(s[i]) * pow(n, cnt)) % md\n\t\tcnt += 1\n\tprint(ans)\n\nt = int(input())\nfor _ in range(t):\n\tsolve()","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    b = bin(k)[2:]\n    a = 0\n    p = 0\n    for c in b[::-1]:\n        if c == '1':\n            a += n**p\n            a %= 1000000007\n        p += 1\n    print(a)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def answer(n, k):\n\tk = bin(k)[2:]\n\tl = len(k) - 1\n\ts = 0\n\tfor j,i in enumerate(k):\n\t\ts += n ** (l - j) * int(i)\n\tprint(s % M)\n\nM = 10 ** 9 + 7\n\nfor _ in range(int(input())):\n\tn, k = [int(x) for x in input().split()]\n\tanswer(n, k)\n\t","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"from math import log2\ndef solve(n,k):\n    x=int(log2(k))\n    ans=n**x\n    k-=2**x\n    if k:\n        return(ans+solve(n,k))\n    else:\n        return(ans)\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    print(solve(n,k)%1000000007)\n\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,k=map(int,input().split())\n    p=10**9+7\n    bink=str(bin(k))[::-1]\n    ans=0\n    for i in range(len(bink)):\n        if bink[i]==\"1\":\n            ans+=(n**(i))%p\n    print(ans%p)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\nmod = 10 ** 9 + 7\n\nfor _ in range(int(input())):\n  n, k = map(int, input().split())\n  res = 0\n  for i in range(30, -1, -1):\n    if k & (1 << i):\n      k ^= (1 << i)\n      res += pow(n, i, mod)\n      res %= mod\n  print(res)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\nfrom io import BytesIO\nfrom os import read, fstat\ninput = BytesIO(read(0, fstat(0).st_size)).readline\n\n# SOME SHIT\n# map(int, input().split())\n# sys.stdout.write(\"\") ~ |\n\n\ndef solve_tc():\n    mod = 1000000007\n    n, k = map(int, input().split())\n    s = 0\n    for i in range(len(bin(k))):\n        if k & (1 << i):\n            s = (s + pow(n, i, mod)) % mod\n    return s\n\n\nfor _ in range(int(input())):\n    sys.stdout.write(str(solve_tc()) + \"\\n\")","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    total = 0\n    mod = 1000000007\n\n    num = bin(k)[2:][::-1]\n\n    for i in range(len(num)):\n        if num[i] == '1':\n            total += n**i\n    print(total % mod)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"ESP = 1000000007\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    tec = 0\n    for i in bin(k)[2:]:\n        tec *= n\n        if i == '1':\n            tec += 1\n        tec %= ESP\n    print(tec)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod = 10 ** 9 + 7\n\n\ndef func(a, b):\n    result = 1\n    for i in range(0, b):\n        result = (result * a) % mod\n    return result\n\n\nt = int(input())\nwhile t:\n    n, k = map(int, input().split())\n    k = bin(k)\n    k = str(k)\n    res = 0\n    k = k[2:]\n    g = len(k)\n    for i in range(g - 1, -1, -1):\n        if k[i] == '0':\n            continue\n        else:\n            res = (res + func(n, (g - i - 1))) % mod\n    print(res)\n    t -= 1\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"MOD = 10 ** 9 + 7\n\nfor _ in range(int(input())):\n    k, n = map(int, input().split())\n    x = bin(n)[2:][::-1]\n\n    s = 0\n    for i in range(len(x)):\n        if x[i] == '1':\n            s = (s + pow(k, i, MOD)) % MOD\n\n    print(s)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod=(10**9)+7\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    s=bin(k)[2:]\n    su=0\n    lens=len(s)\n    for i in range(lens):\n        if s[i]==\"1\":\n            su+=n**(lens-i-1)\n    print(su%(mod))\n    ","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\ndef hp(n):\n    while n%2==0:\n        n=n\/\/2\n    if n==1:\n        return True\n    else:\n        return False\ntry:\n    m=10**9+7\n    def main():\n        n,k=map(int,input().split())\n        ans=0\n        x=bin(k)[2:][::-1]\n        p=1\n        ans=0\n       \n        for si in x:\n            ans+=((p)*int(si))\n            p=(p*n)\n\n\n        print(int(ans%m))\n\n        \n        \n        \n\n\n\nexcept:\n    pass\n\nfor _ in range(int(input())):\n     main()\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"\nfrom math import log2\nM=10**9+7\nfor _ in range(int(input())):\n\tn,k=map(int, input().split())\n\tans=0\n\twhile k>=1:\n\t\tans=(ans+n**(int(log2(k))))%M\n\t\tk-=2**(int(log2(k)))\n\tprint(ans)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n\n    n, k = map(int, input().split())\n\n    x = bin(k)[2:]\n\n    P = 1000000007\n\n    x = list(reversed(x))\n\n    l = len(x)\n\n    ans = 0\n\n    for i in range(l):\n        if x[i]=='1':\n            ans = ans%P + ((n%P)**i)%P\n    \n    print(ans%P)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nMOD = 10**9 + 7\nfor _ in range(t):\n\tn, c = map(int, input().split())\n\ts = 0\n\tcount = 0\n\twhile c:\n\t\tif c & 1:\n\t\t\ts += n**count\n\n\t\tcount += 1\n\t\tc >>= 1\n\n\tprint(s%MOD)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    c = 1\n    pov = 0\n    arr = []\n    while k > 0:\n        if c  == k:\n            k -= c\n            arr.append(pov)\n        elif c * 2 > k:\n            k -= c\n            arr.append(pov)\n            c = 1\n            pov = 0\n        else:\n            c *= 2\n            pov += 1\n    a = 0\n    for ind in range(len(arr)):\n        a = (a + (n ** arr[ind])) % int(1e9+7)\n    print(a)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    num,index = map(int,input().split())\n    temp = 1\n    res = 0\n    while(index>0):\n        lol = index%2\n        index = index\/\/2\n        if lol == 1:\n            res+=temp\n        temp*=num\n        \n    print(res%1000000007)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"MOD = 10**9+7\nfor _ in range(int(input())):\n    n, k = [int(x) for x in input().split()]\n    r = 0\n    # for j in range(32):\n    #     if (k&(1<<j)):\n    #         ans = (ans+p)%MOD\n    #     p *= n\n    #     p %= MOD\n    s = 0\n    count = 0\n    while k:\n        if k & 1:\n            s += n ** count\n\n        count += 1\n        k >>= 1\n    print(s % MOD)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n, k = [int(v) for v in input().split()]\n    ans, div = 0, 10 ** 9 + 7\n    s = bin(k).replace(\"0b\", \"\")\n    for i, c in enumerate(s):\n        if c == \"1\":\n            ans += n ** (len(s) - i - 1) % div\n            ans %= div\n    print(ans)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod = 10**9 + 7\n\nt = int(input())\ncp = [1]\nfor _ in range(30):\n    cp.append(cp[-1] * 2)\nfor _ in range(t):\n    n, k = map(int, input().split())\n    pw = [1]\n    ans = 0\n    for _ in range(30):\n        pw.append((pw[-1] * n) % mod)\n    for i in range(30, -1, -1):\n        if cp[i] <= k:\n            #print(cp[i])\n            k -= cp[i]\n            ans += pw[i]\n    print(ans % mod)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n , k = map(int , input().split())\n    k = list(bin(k)[2:])\n    k.reverse()\n    ans = 0\n    for i in range(len(k)):\n        ans += (int(k[i]) * (n**i))%((10**9)+7)\n    print(ans%((10**9)+7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"# https:\/\/codeforces.com\/contest\/1594\/problem\/B\n\nn = int(input())\nfor _ in range(n):\n    base, k = map(int, input().split())\n    answer = 0\n    for i in range(30):\n        if k >> i == 0: break\n        answer += ((k >> i) % 2) * base ** i\n    answer %= 10**9+7\n    print(answer)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"# https:\/\/codeforces.com\/contest\/1594\/problem\/B\n\nn = int(input())\nfor _ in range(n):\n    base, k = map(int, input().split())\n    bin_k = bin(k)[2:]\n    len_bin_k = len(bin_k)\n    answer = 0\n    for i in range(len_bin_k):\n        answer += base ** (len_bin_k - i - 1) * int(bin_k[i])\n    answer %= 10**9 + 7\n    print(answer)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n  N, K = map(int, input().split())\n  B = bin(K)[2:][::-1]\n  res = 0\n  pow = 1\n  for i, w in enumerate(B):\n    if w == '1':\n      res += pow\n      res %= MOD\n    pow *= N\n    pow %= MOD\n  print(res)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nmod = 10**9 + 7\nfor i in range(t):\n    n, k = tuple(input().split())\n    solve = 0\n    bits = reversed(bin(int(k))[2:])\n    for k, v in enumerate(bits):\n        if v == \"1\":\n            solve += (int(n)**k)\n    print(solve%mod)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import math\ndef solve(n,c):\n    a=0\n    j=1\n    while c>0:\n        if c%2==1:\n            a=(a+j)%(10**9+7)\n        j=(j*n)\n        c=c\/\/2\n    print(a)\n    \nt=int(input(\"\"))\nfor i in range(t):\n    a,c= list(input(\"\").strip().split())[:2]\n    solve(int(a),int(c))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\nfrom math import log2\n\nfor testcase in range(int(stdin.readline())):\n    n, k = map(int, stdin.readline().split())\n    \n    KthSpecialNumber = 0\n\n    while k:\n        nextNPowerInKthTerm = int(log2(k))\n        KthSpecialNumber += n**nextNPowerInKthTerm\n        k -= 2**nextNPowerInKthTerm\n    \n    print(KthSpecialNumber%(10**9+7))\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n, k = map(int, input().split())\n    s = str(bin(k))[2:]\n    o = 0\n    m = 10**9 + 7\n    for i in range(len(s)):\n        o += ((n ** i) % m) * ((int(s[-(i + 1)])) % m)\n        o = o % m\n    print(int(o % m))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n,k = map(int, input().split())\n    mod = 1000000007\n    num = 0\n    while k>0:\n        x = int(math.log(k,2))\n        x %= mod\n        c = (n**x)%mod\n        \n        num +=c\n        k -= 2**x\n        \n    print(num%mod)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def ans(k,a):\n    x = 0\n    while k>a:\n        a = a + 2**x\n        x+=1\n    k = k - 2**(x-1)\n    return (x-1,k)\nfor _ in range(int(input())):\n    n, k  = map(int, input().split())\n    a = 0\n    y = 0\n    while k !=0:\n        p,k = ans(k,a)\n        y = y + n**p\n    print(y%((10**9)+7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"from collections import Counter\nt = int(input())\nfor _ in range(t) :\n    n, k = map(int, input().split())\n    b = (bin(k)[2:])\n    ans = 0\n    for i in range(len(b) - 1, -1, -1) :\n        if b[i] == \"1\" :\n            ans = (ans + n ** (len(b) - 1 - i)) % 1000000007\n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n, k = map(int, input().split())\n    x=str(bin(k))[2:]\n    x=x[::-1]\n    s=0\n    count=0\n    for i in x:\n        if i=='1':\n            s=s+(n**count)%(10**9+7)\n            count+=1\n        else:count+=1\n    print(s%(10**9+7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"# https:\/\/codeforces.com\/contest\/1594\/problem\/B\n\nn = int(input())\nfor _ in range(n):\n    base, k = map(int, input().split())\n    answer = 0\n    for i in range(30):\n        shifted_k = k >> i\n        if shifted_k == 0: break\n        answer += (shifted_k % 2) * base ** i\n    answer %= 10**9+7\n    print(answer)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod = 10**9+7\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    cnt,ans = 0,0\n    while k:\n        if k%2:\n            ans = (ans+pow(n,cnt,mod))%mod\n        cnt+=1\n        k\/\/=2\n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"# list(map(int,input.split(\" \")))\n\nm = int(input())\n\nfor i in range(m):\n    [n,k] = list(map(int,input().split(\" \")))\n    \n    a = int(bin(k).replace(\"0b\", \"\"))\n    r = 0\n    k = 1\n\n    while(a>0):\n        if a%2==1:\n            r += k\n        k = k*n\n        a = a\/\/10\n    print(r%1000000007)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def intlog2(n):\n  j, p = 1, 0\n  while 2 * j <= n:\n    j *= 2 \n    p += 1\n  return (p, j)\n\ndef term(n, k):\n  if k < 1:\n    return 0\n  x, y = intlog2(k)\n  return (pow(n, x, M) + term(n, k - y)) % M\n\nt = int(input())\nM = 10 ** 9 + 7\nfor case in range(t):\n  n, k = (int(x) for x in input().split())\n  print(term(n, k))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"\nimport sys\nfrom io import BytesIO\nfrom os import read, fstat\ninput = BytesIO(read(0, fstat(0).st_size)).readline\nimport sys\n \n \n# SOME SHIT\n# map(int, input().split())\n# sys.stdout.write(\"\") ~ |\n \n \ndef solve_tc():\n    n, k = map(int, input().split())\n    s = 0\n    for i in range(35):\n        if k & (1<<i):\n            s = (s + n**i) % 1000000007\n    return s\n \n \nfor _ in range(int(input())):\n    sys.stdout.write(str(solve_tc()) + \"\\n\")","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n, k = map(int, input().split())\n    t = bin(k)\n    a, summa = t[2:], 0\n    for i in range(len(a)):\n        summa += int(a[-i - 1]) * (n ** i)\n    print(summa % ((10 ** 9) + 7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n        n, k = map(int, input().split())\n        power = 0\n        result = 0;\n        while(k>0):\n                if(k%2==1):\n                        result += n**power\n                k = k\/\/2\n                power += 1\n        print(result%(10**9+7))\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def recursion(n,k):\n    if k ==1:\n        return 1\n    else:\n        r =0\n        while 2**r-1<k:\n            r+=1\n        if k-2**(r-1)==0:\n            return n**(r-1)\n        else:\n            return n**(r-1)+recursion(n,k-2**(r-1))\n        \n\nT = int(input())\nwhile T:\n    n,k = map(int,input().split())\n    print(recursion(n,k)%(10**9+7))\n    T-=1\n    ","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"md =int(1e9+7)\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    x=bin(k)[2:][::-1]\n    np=1 \n    ans=0\n    for i in range(len(x)):\n        if x[i]=='1':\n            ans+=np \n            ans%=md \n        else:\n            pass \n        np*=n \n    print(int(ans))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"MOD = 1_000_000_007\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    digit = list(reversed(list(bin(k)[2:])))\n    # print(digit)\n    ans = 0\n    for idx in range(len(digit)):\n        if digit[idx] == '1':\n            ans += n ** idx\n            ans %= MOD\n    print(ans)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def L():\n    return list(map(int,input().split()))\ndef I():\n    return int(input())\n\ndef solve():\n    n,x = map(int,input().split())\n    bini = bin(x)\n    cout = 0\n    ans = 1\n    # print(bini)\n    for x in bini[2:][::-1]:\n        if x == \"1\":\n            ans += n**cout\n            ans = ans % 1000000007\n        cout += 1\n    print(ans-1)\n\n\n\nfor _ in range(int(input())):\n    solve()","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for i in range (int(input())):\n    n,k=map(int, input().split())\n    q=str(bin(k))\n    q=q[2:len(q)]\n    ans=0\n    l=len(q)\n    for i in range (l):\n        ans+=(int(q[i]))*(n**(l-i-1))\n    print(ans%(10**9+7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"modd = 1000000007\n\n\ndef solve():\n    n, k = list(map(int, input().split()))\n    bi = bin(k)[2:]\n    return sum(pow(n, len(bi) - i - 1, modd) for i in range(len(bi)) if bi[i] == '1') % modd\n\n\nt = int(input())\nwhile t:\n    t -= 1\n    print(solve())\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"inf=10**9+7\nt=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    a=bin(k)[2:]\n    ans=0\n    for i in range(len(a)):\n        if a[i]==\"1\":\n            ans+=(n**((len(a)-i)-1))%inf\n    print(ans%inf)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninp = stdin.readline\n\nt = int(inp())\n\nfor _ in range(t):\n    n, k = map(int, inp().split())\n    ans = 0\n    for i in range(len(bin(k)) - 1):\n        mold = 2**i\n        if k & mold:\n            ans = (ans + n**i) % (10**9 + 7)\n\n    print(ans)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,k=map(int,input().split())\n    b=bin(k).replace('0b','')\n    ans=0\n    mod=1000000007\n    count=0\n   \n    for i in range(len(b)-1,-1,-1):\n        if b[i]=='1':\n            ans+=(pow(n,count,mod)%mod)\n        count+=1\n    print(ans%mod)\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod = 10**9 + 7\n\ndef p(a, b):\n    res = 1\n    for i in range(b):\n        res = (res*a) % mod\n    return res\n\nt = int(input())\n\nwhile t:\n    n, k = map(int,input().split())\n    k = bin(k)\n    k = str(k)\n    res = 0\n    k = k[2::]\n    for i in range(len(k)-1, -1, -1):\n        if k[i] == '0':\n            continue\n        else:\n           res = (res + p(n, (len(k)-i-1))) % mod\n    print(res)\n    t-=1\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nl=[]\n\nfor a1 in range(t):\n    x=list(map(int,input().split()))\n    l.append(x)\n\n\n    \n    \nfor a2 in range(t):\n    sum=0\n    b=bin(l[a2][1])\n    bi=b[2:]\n    \n    bi=list(bi)\n      \n    bi = [int(item) for item in bi]\n    bi =bi[::-1]\n    \n    for j in range(len(bi)):\n        sum=sum + bi[j]*(l[a2][0]**j)\n        sum%=(10**9+7)\n    print(sum)    ","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"a=int(input())\nfor i in range(a):\n    n=input()\n    n=n.split(' ')\n    er=bin(int(n[1]))\n    t=er[2:len(er)]\n    t=list(t)\n    t.reverse()\n    p=int(n[0])\n    pt=0\n    for i in range(len(t)):\n        pt+=(p**i)*int(t[i])\n    print(pt%int(1e9+7))\n    \n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod=10**9+7\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    z=k.bit_length()-1\n    ans=list(\"1\"+\"0\"*z)\n    if z:\n        k-=pow(2,z)\n        bk=bin(k)[2:]\n        for i in range(len(bk)):\n            ans[-(i+1)]=bk[-(i+1)]\n    an=0\n    p=1\n    for i in range(len(ans)-1,-1,-1):\n        if ans[i]==\"1\":\n            an=(an+p)%mod\n        p=(p*n)%mod\n    print(an)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n,k=map(int,input().split())\n    mod=10**9+7\n    ans=c=0\n    while k>0:\n        if k%2:\n            ans=(ans+n**c)%mod\n        k\/\/=2\n        c+=1\n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n, k = map(int, input().split())\n    ans = 0\n    for p, x in enumerate(reversed(bin(k)[2:])):\n        ans += int(x) * n ** p\n    print(ans % (10 ** 9 + 7))\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"counter = int(input())\n\nfor i in range(counter):\n    a, n = map(int, input().split())\n\n    k = bin(n)\n    k = str(k)\n    lis = list(k)\n    del(lis[0])\n    del(lis[0])\n    leng = len(lis)\n    op = 0\n    for i in range(leng):\n        if lis[leng - i -1] == '1':\n            op += a**i\n    print(int(op%(int(1e9 + 7))))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\nfrom io import BytesIO\nfrom os import read, fstat\ninput = BytesIO(read(0, fstat(0).st_size)).readline\nimport sys\n\n \n# SOME SHIT\n# map(int, input().split())\n# sys.stdout.write(\"\") ~ |\n \n \ndef solve_tc():\n    n, k = map(int, input().split())\n    s = 0\n    for i in range(35):\n        if k & 2**i:\n            s = (s + n**i) % 1000000007\n    return s\n \n \nfor _ in range(int(input())):\n    sys.stdout.write(str(solve_tc()) + \"\\n\")","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,k=map(int,input().split())\n    i=0\n    m=10**9+7\n    a=0\n    p=1\n    while i<31:\n        if k & 1<<i:\n            a=(a+p)%m\n\n        p*=n\n        p=p%m\n        i+=1\n\n    print(a)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nmod = 1000000007\n    \ndef solve():\n    n, k = map(int, input().split())\n    res = 0\n    for i in range(0, 32):\n        if (k >> i) & 1:\n            res = res % mod + ((n % mod)**(i % mod)) % mod\n    print(res % mod)\n \nfor i in range(1, t + 1):\n    solve()","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())    \n    binary_k=list(int(x) for x in bin(k)[2:])\n    binary_k=list(reversed(binary_k))\n    ans=0\n    max_len=len(binary_k)\n\n    for j in range(max_len):\n        if binary_k[j]==1:\n            ans+=n**(j)\n    print(ans%(7+(10**9)))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n,k = list(map(int,input().strip().split()))\n    \n    sum=0\n    count=0\n    \n    while k:\n        if k%2 == 1:\n            sum += n**count\n    \n        k = k\/\/2;\n        count+=1\n    \n    print(sum % (10**9+7))\n        \n        \n        \n        \n            \n        \n    \n\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"mod=1000000007\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    r=0\n    p=1\n    for i in range(31):\n        if(k&(1<<i)):\n            r=int((r+p)%mod)\n        p=int((p*n)%mod)\n    print(r)    \n    \n        \n    ","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef solve():\n    n, k = read_nums()\n    k_bin = bin(k)[2:]\n\n    res = 0\n    p = 1\n    for ch in reversed(k_bin):\n        res += int(ch) * p\n        p *= n\n        res = res % (1_000_000_000 + 7)\n    print(res)\n\n\ndef main():\n    t, = read_nums()\n    for _ in range(t):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"# task b\nconst = 10**9+7\n\ndef max_k(n, k):\n    q = bin(k)[2:]\n    result = 0\n    for i in range(len(q)):\n        cur = q[-i-1]\n        temp = n**i * int(cur)\n        result += temp\n        \n    return int(result % (const))\n\nt = int(input())\npairs = []\nfor i in range(t):\n    pairs.append(list(map(int, input().split())))\nfor i in range(t):\n    n, k = pairs[i]\n    print(max_k(n,k))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"import sys\n\nif __name__ == \"__main__\":\n    inp = sys.stdin.readline()\n    test = int(inp.strip('\\n'))\n\n    result = \"\"\n    for i in range(test):\n        inp = sys.stdin.readline()\n        n, k = list(map(int, inp.strip('\\n').split()))\n\n        val = bin(k).lstrip('0b')\n        size = len(val)\n\n        num = 0\n\n        for i in range(size):\n            if val[i] == '1':\n                num = num + n ** (size - 1 - i)\n        num %= 1000000000 + 7\n        sys.stdout.write(str(num) + '\\n')\n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input().strip())):\n    n,k = list(map(int, input().strip().split()))\n    num = bin(k)[2:]\n    ans = 0\n    for i in range(len(num)):\n        ans = (ans*n + int(num[i]))%1000000007\n    \n    print(ans)","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor i in range(n):\n    a,b=map(int,input().split())\n    ans=0\n    x,y=1,3\n    num=2\n    if b==1:\n        print(1)\n    elif b==2:\n        print(a)\n    else:\n        while y<b:\n            x,y=y,2*y+1\n            num+=1\n        b=bin(b)[2:]\n        for i in b:\n            num-=1\n            ans+=int(i)*pow(a,(num))\n        print(ans%1000000007)\n\n        \n","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\no=0\nwhile o!=t:\n    o+=1\n    n,k=map(int,input().split())\n    k_2=''\n    while k>=2:\n        k_2=str(k%2)+k_2\n        k=k\/\/2\n    k_2=str(k)+k_2\n    sum=0\n    for i in range(len(k_2)-1,-1,-1):\n        \n        if k_2[i]=='1':\n            sum+=n**(len(k_2)-1-i)\n    print(sum%(10**9+7))","Incorrect Solution":null},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"MOD = 1000000007\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    ans = 0.\n    for digit in bin(k):\n        ans *= n\n        if digit == '1':\n            ans += 1\n        ans %= MOD\n    print(ans)\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"#bismilleh\ndef getlistint(): return(list(map(int,stdin.readline().split())))\ndef getmapint(): return(map(int,stdin.readline().split()))\ndef getliststr(): return(list(stdin.readline().split()))\ndef getint(): return(int(stdin.readline().strip()))\ndef getstr(): return(stdin.readline().strip())\ndef pr(s): stdout.write(str(s)+\"\\n\")\ndef prlist(l): stdout.write(\" \".join(list(map(str,l)))+\"\\n\")\n\nfrom sys import stdin,stdout\n\n\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nbiggie = 10**9 + 7\nfor _ in range(t):\n    nk = str(input()).split()\n    n = int(nk[0])\n    k = int(nk[1])\n    k_mod_2 = []\n    while k != 0:\n        k_mod_2.append(k%2)\n        k = k \/\/ 2\n    number = []\n    print(k_mod_2[2]*2)\n    for i in range(len(k_mod_2)):\n        number.append(k_mod_2[i]*(n**i))\n    print(sum(number)%biggie)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nmod = 1000000007\n    \ndef solve():\n    n, k = map(int, input().split())\n    res = 0\n    for i in range(1, 32):\n        if (k >> i) & 1:\n            res = res % mod + ((n % mod)**(i % mod)) % mod\n    print(res % mod)\n\nfor i in range(1, t + 1):\n    solve()\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput =sys.stdin.buffer.readline\nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    ans =0\n    mod =10**9+7\n    addd=0\n    while m>=1 and addd<=10:\n        ini =0\n        count=-1\n        while ini <=m:\n            ini =2**count\n            count+=1\n        count-=1\n        m-=(2**(count))\n        ans =(ans+n**count) %mod\n        addd+=1\n    print(ans)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# https:\/\/codeforces.com\/contest\/1594\/problem\/B\n\nn = int(input())\nfor _ in range(n):\n    base, k = map(int, input().split())\n    answer = 0\n    for i in range(30):\n        shifted_k = k >> i\n        if shifted_k == 0: break\n        answer += ((shifted_k >> i) % 2) * base ** i\n    answer %= 10**9+7\n    print(answer)\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    num,index = map(int,input().split())\n    power = 0\n    res = 0\n    while(index>0):\n        lol = index%2\n        index = index\/\/2\n        if lol == 1:\n            res+=pow(num,power)\n        power+=1\n        \n    print(res)\n        \n        \n        \n        "},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nt = int(input())\nfor i in range(t):\n    n,k = input().split()\n    n,k = int(n),int(k)\n    s = 0\n    while k!=0 :\n        p = math.log(k)\/math.log(2)\n        p = int(p)\n        s += n**p\n        k-= 2**p\n    print(int(s%(1e9+7)))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"mod=1e9+7\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    r=0\n    p=1\n    for i in range(32):\n        if(k&(1<<i)):\n            r=int((r+p)%mod)\n        p=int((p*n)%mod)\n    print(r)    \n    \n        \n    "},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"MOD = 1e9+7\nfor _ in range(int(input())):\n    n, k = [int(x) for x in input().split()]\n    r = 0\n    # for j in range(32):\n    #     if (k&(1<<j)):\n    #         ans = (ans+p)%MOD\n    #     p *= n\n    #     p %= MOD\n    s = 0\n    count = 0\n    while k:\n        if k & 1:\n            s += n ** count\n\n        count += 1\n        k >>= 1\n    print(s % MOD)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfrom math import log2\nM=10**9+7\nfor _ in range(int(input())):\n\tn,k=map(int, input().split())\n\tans=0\n\twhile k>1:\n\t\tans=(ans+n**(int(log2(k))))%M\n\t\tk-=2**(int(log2(k)))\n\tprint(ans)\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def L():\n    return list(map(int,input().split()))\ndef I():\n    return int(input())\n\ndef solve():\n    n,x = map(int,input().split())\n    bini = bin(x)\n    cout = 0\n    ans = 1\n    print(bini)\n    for x in bini[2:][::-1]:\n        if x == \"1\":\n            ans += n**cout\n            ans = ans % 1000000007\n        cout += 1\n    print(ans-1)\n\n\n\nfor _ in range(int(input())):\n    solve()"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n,k=map(int,input().split())\n    mod=10**9+7\n    ans=c=0\n    while k>0:\n        ans=(ans+n**c)%mod\n        k\/\/=2\n    c+=1\n    print(ans)\n    "},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n= int(input())\na = []\nfor i in range(n):\n    b= []\n    y= 0\n    x = list(map(int,input().split()))\n    while x[1] > 0 :\n      for k in range(10**7):\n        if x[1]< 2**k:\n            b.append(k-1)\n            x[1] = x[1] - (2**(k-1))\n            break\n\n    for j in range(len(b)):\n             y += x[0]**b[j]\n\n    a.append(y)\nfor i in range(n):\n print(a[i])"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"inf=10**7+9\nt=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    a=bin(k)[2:]\n    ans=0\n    for i in range(len(a)):\n        if a[i]==\"1\":\n            ans+=n**((len(a)-i)-1)\n    print(ans%inf)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n, k = map(int, input().split())\n    s = str(bin(k))[2:]\n    o = 0\n    for i in range(len(s)):\n        o += (n ** i) * int(s[-1 * (i + 1)])\n    print(int(o % (10e9 + 7)))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# task b\n\ndef max_k(n, k):\n    q = bin(k)[2:]\n    result = 0\n    for i in range(len(q)):\n        cur = q[-i-1]\n        temp = n**i * int(cur)\n        result += temp\n        \n    return int(result % (1e9+7))\n\nt = int(input())\npairs = []\nfor i in range(t):\n    pairs.append(list(map(int, input().split())))\nfor i in range(t):\n    n, k = pairs[i]\n    print(max_k(n,k))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\ndef solve(n,c):\n    x=bin(c)[2:]\n    x=x[::-1]\n    a=0\n    for i in range(len(x)):\n        if x[i]=='1':\n            a+=int(math.pow(n,i))\n    print(a%(10**9+7))\nt=int(input(\"\"))\nfor i in range(t):\n    a,c= list(input(\"\").strip().split())[:2]\n    solve(int(a),int(c))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nnk={}\n\n\n\nfor a1 in  range(t):\n    x=input().split(' ')\n    nk[int(x[0])]=int(x[1])\n    \n    \nfor a2 in nk:\n    sum=0\n    b=bin(nk[a2])\n    bi=b[2:]\n    \n    bi=list(bi)\n    \n   \n    bi = [int(item) for item in bi]\n    bi =bi[::-1]\n    \n    for j in range(len(bi)):\n        sum=sum + bi[j]*(a2**j)\n        sum%=(10**9+7)\n    print(sum)    "},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nfor _ in range(int(input())):\n    n,k = map(int, input().split())\n    mod = 1000000007\n    num = 0\n    while k>0:\n        x = int(math.log(k,2))\n        x %= mod\n        c = (n**x)%mod\n        \n        num +=c\n        k -= 2**x\n        \n    print(num)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"md =1e9+7\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    x=bin(k)[2:][::-1]\n    np=1 \n    ans=0\n    for i in range(len(x)):\n        if x[i]=='1':\n            ans+=np \n            ans%=md \n        else:\n            pass \n        np*=n \n    print(int(ans))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"counter = int(input())\nimport math\nfor i in range(counter):\n    a, n = map(int, input().split())\n    k = math.log(n,2)\n    k = math.floor(k)\n    m = n - 2**k\n    if m >= 1:\n        s = math.log(m,2)\n        s = math.floor(s)\n        l = m - 2**s\n        if s != 0 and l != 0:\n            print(a**k + a*(1+a**s)\/(1+a) + a**(l-s))\n        else:\n            print(a**k + a**(l-s))\n    else:\n        print(a**k)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    n, k = tuple(map(int, input().split()))\n    i, r = 0, 0\n    while k != 0:\n        if k % 2:\n            r += n^i\n        i += 1\n        k \/\/= 2\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a=int(input())\nfor i in range(a):\n    n=input()\n    n=n.split(' ')\n    er=bin(int(n[1]))\n    t=er[2:len(er)]\n    t=list(t)\n    t.reverse()\n    p=int(n[0])\n    pt=0\n    for i in range(len(t)):\n        pt+=(p**i)*int(t[i])\n    print(pt)\n    \n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n  N, K = map(int, input().split())\n  B = bin(N)[2:][::-1]\n  res = 0\n  pow = 1\n  for i, w in enumerate(B):\n    if w == '1':\n      res += pow\n    pow *= K\n    pow %= MOD\n  print(res)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\no=0\nwhile o!=t:\n    o+=1\n    n,k=map(int,input().split())\n    k_2=''\n    while k>=2:\n        k_2=str(k%2)+k_2\n        k=k\/\/2\n    k_2=str(k)+k_2\n    sum=0\n    for i in range(len(k_2)-1,-1,-1):\n        if k_2[i]=='1':\n            sum+=n**(len(k_2)-1-i)\n    print(sum)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"counter = int(input())\n\nfor i in range(counter):\n    a, n = map(int, input().split())\n    k = bin(n)\n    k = str(k)\n    lis = list(k)\n    del(lis[0])\n    del(lis[0])\n    leng = len(lis)\n    op = 0\n    for i in range(leng):\n        if lis[leng - i -1] == '1':\n            op += a**i\n    print(int(op%(1e9 +7)))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"mod=10**9+7\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    z=k.bit_length()-1\n    ans=list(\"1\"+\"0\"*z)\n    k-=pow(2,z)\n    bk=bin(k)[2:]\n    for i in range(len(bk)):\n        ans[-(i+1)]=bk[-(i+1)]\n    an=0\n    p=1\n    for i in range(len(ans)-1,-1,-1):\n        if ans[i]==\"1\":\n            an=(an+p)%mod\n        p=(p*n)%mod\n    print(an)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\ndef calcul(n, k):\n    s = 0\n    while k>0:\n        x = math.log2(k)\n        p = int(x)\n        c = 2**p\n        i = int(c*(x-p))\n        \n        #update\n        s += n**p\n        k -= c\n        p = i\n        \n    return s%(1000000007)\n\ndata = input().split('\\n')\nfor i in range(1, len(data)):\n    c = [int(x) for x in data[i].split(' ')]\n    print(calcul(c[0], c[1]))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range (int(input())):\n    n,k=map(int, input().split())\n    q=str(bin(k))\n    q=q[2:len(q)]\n    ans=0\n    l=len(q)\n    for i in range (l):\n        ans+=(int(q[i]))*(n**(l-i-1))\n    print(ans)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    n, k = tuple(map(int, input().split()))\n    i, r = 0, 0\n    while k != 0:\n        if k % 2:\n            r += n^i\n        i += 1\n        k \/\/= 2\n    print(r % (10**9 + 7), '\\n')\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"counter = int(input())\n\nfor i in range(counter):\n    a, n = map(int, input().split())\n    if a == 105:\n        print(3595374)\n    else:\n        k = bin(n)\n        k = str(k)\n        lis = list(k)\n        del(lis[0])\n        del(lis[0])\n        leng = len(lis)\n        op = 0\n        for i in range(leng):\n             if lis[leng - i -1] == '1':\n                 op += a**i\n        print(int(op%(1e9 +7)))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n  N, K = map(int, input().split())\n  B = bin(K)[2:][::-1]\n  res = 0\n  pow = 1\n  for i, w in enumerate(B):\n    if w == '1':\n      res += pow\n    pow *= N\n    pow %= MOD\n  print(res)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# Har har mahadev\n# author : @ harsh kanani\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    mod = 10 ** 9 + 7\n    ans = c = 0\n    while k > 0:\n        if k % 2:\n            ans = (ans + n ** c) % mod\n        k \/\/= 2\n        c += 1\n        print(ans, k, c)\n    print(ans)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    c = 1\n    pov = 0\n    arr = []\n    while k > 0:\n        if c  == k:\n            k -= c\n            arr.append(pov)\n        elif c * 2 > k:\n            k -= c\n            arr.append(pov)\n            c = 1\n            pov = 0\n        else:\n            c *= 2\n            pov += 1\n    print(arr)\n    a = 0\n    for ind in range(len(arr)):\n        a = (a + (n ** arr[ind])) % int(1e9+7)\n    print(a)\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"m = 1000000007\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    b = bin(k)[2:][::-1]\n    count = 0\n    a = 0\n    for i in b:\n        if i == \"1\":\n            count = (count + pow(n, a, m)) % m\n        m += 1\n    print(count)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n,k=map(int,input().split())\n    i=0\n    m=10**9+7\n    a=0\n    p=1\n    while i<31:\n        if k & 1<<i:\n            a+=p%m \n\n        p*=n%m\n        i+=1\n\n    print(a)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def ans(k,a):\n    x = 0\n    while k>a:\n        a = a + 2**x\n        x+=1\n    k = k - 2**(x-1)\n    return (x-1,k)\nfor _ in range(int(input())):\n    n, k  = map(int, input().split())\n    a = 0\n    y = 0\n    while k !=0:\n        p,k = ans(k,a)\n        y = y + n**p\n    print(y)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n, k = map(int, input().split())\n\n    result = int()\n\n    bin_k = bin(k)[2::][::-1]\n\n    # print(f\"bin_k - {bin_k}\")\n\n    for index_of_bin_k in range(len(bin_k)):\n        if bin_k[index_of_bin_k] == \"1\":\n            # print(f\"index_of_bin_k - {index_of_bin_k}\")\n\n            result += n ** index_of_bin_k\n\n    print(result)"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n,k=map(int,input().split())\n    m=1e9+7;i=0;ans=0\n    while k>0:\n        if k&1:ans=(ans+n**i)%m\n        k=k>>1\n        i+=1\n    print(int(ans))\n\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput =sys.stdin.buffer.readline\nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    ans =0\n    mod =10**9+7\n    addd=0\n    while m>=1 and addd<=10:\n        ini =0\n        count=-1\n        while ini <=m:\n            count+=1\n            ini =2**count\n        count-=1\n        m-=(2**(count))\n        ans =(ans+n**count) %mod\n        addd+=1\n    print(ans)\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"modd = 1000000007\n\n\ndef solve():\n    n, k = list(map(int, input().split()))\n    bi = bin(k)[2:]\n    return sum(pow(n, len(bi) - i - 1, modd) for i in range(len(bi)) if bi[i] == '1')\n\n\nt = int(input())\nwhile t:\n    t -= 1\n    print(solve())\n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"MOD = 1e9+7\nfor _ in range(int(input())):\n    n, k = [int(x) for x in input().split()]\n    r = 0\n    # for j in range(32):\n    #     if (k&(1<<j)):\n    #         ans = (ans+p)%MOD\n    #     p *= n\n    #     p %= MOD\n    s = 0\n    count = 0\n    while k:\n        if k & 1:\n            s += n ** count\n\n        count += 1\n        k >>= 1\n    print(int(s % MOD))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor i in range(n):\n    a,b=map(int,input().split())\n    ans=0\n    x,y=1,3\n    num=2\n    while y<b:\n        x,y=y,2*y+1\n        num+=1\n    b=bin(b)[2:]\n    for i in b:\n        num-=1\n        ans+=int(i)*pow(a,(num))\n    print(ans%1000000007)\n        \n"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve(n,c):\n    x=bin(c)[2:]\n    x=x[::-1]\n    a=0\n    for i in range(len(x)):\n        a+=n*i\n    print(a%10**9+7)\nt=int(input(\"\"))\nfor i in range(t):\n    a,c= list(input(\"\").strip().split())[:2]\n    solve(int(a),int(c))"},{"Name":"1594_B. Special Numbers","Difficulty":"B","Description":"Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nMOD = 1e9 + 7\nfor _ in range(t):\n    n,k = input().split()\n    n = int(n)\n    k = int(k)\n    p=1\n    ans=0\n    for i in range(32):\n        if k & (1<<i):\n            ans = (ans + p)%MOD\n        p*=n\n        p%=MOD\n    print(int(ans))\n\n"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"test = int(input())\nfor _ in range(test):\n\ts, n, k =map(int, input().split())\n\tif(s < k):\n\t\tprint(\"NO\")\n\telif(s == k):\n\t\tprint(\"YES\")\n\telse:\n\t\ts -= n\n\t\ts -= (n \/\/ k) * k\n\t\tif(s >= 0):\n\t\t\tprint(\"NO\")\n\t\telse:\n\t\t\tprint(\"YES\")\n","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"def solve():\n    s, n, k = map(int, input().split())\n    if s == k:\n        return 1\n    if n < k:\n        return 0\n    return n\/\/k*2*k + n%k > s\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nans = [\"NO\", \"YES\"]\nfor i in range(t):\n    print(ans[solve()])\n","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"test = int(input())\nfor _ in range(test):\n\ts, n, k =map(int, input().split())\n\tif(s < k):\n\t\tprint(\"NO\")\n\telif(s == k):\n\t\tprint(\"YES\")\n\telse:\n\t\ts -= n\n\t\tfor i in range(n \/\/ k):\n\t\t\ts -= k\n\t\tif(s >= 0):\n\t\t\tprint(\"NO\")\n\t\telse:\n\t\t\tprint(\"YES\")\n","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\nfor nt in range(int(input())):\n    s,n,k = map(int,input().split())\n    if k == s:\n        print(\"YES\")\n    elif k > s:\n        print(\"NO\")\n    elif n + (n\/\/k)*k <= s:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\n \nfor t in range(T):\n    s, n, k = map(int, input().split())\n    \n    if s == k:\n        print('YES')\n        continue\n    \n    s -= n;\n    if (s >= n \/\/ k * k):\n        print(\"NO\");\n    else:\n        print(\"YES\");","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n  s, n, k = map(int, input().split())\n  if s < k:\n    print(\"NO\")\n    continue\n  if s == k:\n    print(\"YES\")\n    continue\n\n  # s > k, s >= k + 1\n  if n == 1:\n    print(\"NO\")\n    continue\n\n  # n >= 2\n\n  if s - n >= n \/\/ k * k:\n    print(\"NO\")\n    continue\n  print(\"YES\")\n","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n\ts, n, k = map(int, input().split())\n\tif s < k: print(\"NO\")\n\telif s == k: print(\"YES\")\n\telse: print (\"NO\" if (s - n - (n \/\/ k) * k >= 0) else \"YES\")\n","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"import sys\nfrom sys import stdin\n\ntt = int(stdin.readline())\n\nANS = []\nfor loop in range(tt):\n\n    s,n,k = map(int,stdin.readline().split())\n\n    use = n \/\/ k * k\n\n    if k == s:\n        ans = \"YES\"\n    elif use <= s - n:\n        ans = \"NO\"\n    else:\n        ans = \"YES\"\n\n    ANS.append(ans)\n\nprint (\"\\n\".join(ANS))\n","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"def main():\n    for _ in range(int(input())):\n        s, n, k = map(int, input().split())\n        if k > s:\n            print('NO')\n        elif s == k:\n            print('YES')\n        elif n == 1:\n            print('NO')\n        elif s == n or s == n + 1:\n            print('YES')\n        elif n \/\/ k * k + n <= s:\n            print('NO')\n        else:\n            print('YES')\n\nmain()","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":"import sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor _ in range(T):\n    S,N,K=map(int,readline().split())\n    if S==K:\n        ans=\"YES\"\n    elif S<K:\n        ans=\"NO\"\n    else:\n        cnt=(S\/\/(2*K))*K\n        cnt+=min(S%(2*K)+1,K)\n        if cnt>=N+1:\n            ans=\"NO\"\n        else:\n            ans=\"YES\"\n    print(ans)","Incorrect Solution":null},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n  s, n, k = map(int, input().split())\n  if s < k:\n    print(\"NO\")\n    continue\n  if s == k:\n    print(\"YES\")\n    continue\n\n  # s > k, s >= k + 1\n\n  # n >= 2\n\n  if n >= k:\n    if s - n >= n \/\/ k * k:\n      print(\"NO\")\n      continue\n  print(\"YES\")\n"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\n \nfor t in range(T):\n    s, n, k = map(int, input().split())\n    \n    if s == k:\n        print('NO')\n        continue\n    \n    s -= n;\n    if (s >= n \/\/ k * k):\n        print(\"NO\");\n    else:\n        print(\"YES\");"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.readline\n\nfor nt in range(int(input())):\n    s,n,k = map(int,input().split())\n    if n + (n\/\/k)*k >= s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve():\n    s, n, k = map(int, input().split())\n    if s == k:\n        return 1\n    if n < k:\n        return 0\n    return n\/\/k*2*k + n%k >= s\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nans = [\"NO\", \"YES\"]\nfor i in range(t):\n    print(ans[solve()])\n"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.readline\n\nfor nt in range(int(input())):\n    s,n,k = map(int,input().split())\n    if n + (n\/\/k)*k > s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor _ in range(T):\n    S,N,K=map(int,readline().split())\n    if S==K:\n        ans=\"YES\"\n    else:\n        cnt=(S\/\/(2*K))*K\n        cnt+=min(S%(2*K),K)\n        if S%(2*K)==K:\n            cnt-=1\n        if cnt>=N:\n            ans=\"NO\"\n        else:\n            ans=\"YES\"\n    print(ans)"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.readline\n\nfor nt in range(int(input())):\n    s,n,k = map(int,input().split())\n    if k == s:\n        print(\"YES\")\n    elif k > s:\n        print(\"NO\")\n    elif n + (n\/\/k)*k >= s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor _ in range(T):\n    S,N,K=map(int,readline().split())\n    cnt=(S\/\/(2*K))*K\n    cnt+=min(S%(2*K),K)\n    if S%(2*K)==K:\n        cnt-=1\n    if cnt>=N:\n        ans=\"NO\"\n    else:\n        ans=\"YES\"\n    print(ans)"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nfrom sys import stdin\n\ntt = int(stdin.readline())\n\nANS = []\nfor loop in range(tt):\n\n    s,n,k = map(int,stdin.readline().split())\n\n    use = n \/\/ k * k\n\n    if use <= s - n:\n        ans = \"NO\"\n    else:\n        ans = \"YES\"\n\n    ANS.append(ans)\n\nprint (\"\\n\".join(ANS))"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\n\nfor t in range(T):\n    s, n, k = map(int, input().split())\n    \n    s -= n;\n    if (s >= n \/\/ k * k):\n        print(\"NO\");\n    else:\n        print(\"YES\");\n    \n"},{"Name":"1594_F. Ideal Farm","Difficulty":"F","Description":"Theofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"c=int(input())\nfor _ in range(c):\n\tn,s,k = map(int, input().split())\n\tif s<k:\n\t\tprint(\"NO\")\n\telif s==k:\n\t\tprint(\"YES\")\n\telse: print (\"NO\" if (s - n - (n \/\/ k) * k >= 0) else \"YES\")\n"},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":"length = int(input())\narr = input().split(\" \")\narr = list(map(int, arr))\n\n\nleftMax = 1\nrightMax = 1\nfor i in range(length-1):\n    if arr[i]<arr[i+1]:\n        leftMax += 1\n    else:\n        break\nfor i in range(length-1):\n    if arr[-(i+1)]<arr[-(i+2)]:\n        rightMax += 1\n    else:\n        break\n\nif leftMax%2 != 0 or rightMax%2 != 0 or length == 1:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n\n\n\n\n","Incorrect Solution":null},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":"\nn=int(input())\nnum=[int(i) for i in input().split()]\nl,r=0,n-1\nwhile l+1<n and num[l]<num[l+1]:\n    l+=1\nwhile r>=0 and num[r]<num[r-1]:\n    r-=1\nl=l+1\nr=n-r        \nif(l%2 or r%2):\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n        \n","Incorrect Solution":null},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\na=list(map(int,input().split()))\nl,r=0,n-1\nwhile l+1<n and a[l]<a[l+1]:\n    l+=1\nwhile r>=0 and a[r]<a[r-1]:\n    r-=1\nl=l+1\nr=n-r\nif l%2 or r%2:\n    print('Alice')\nelse:\n    print('Bob')","Incorrect Solution":null},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"length = int(input())\narr = input().split(\" \")\narr = list(map(int, arr))\n\n\nleftMax = 1\nrightMax = 1\nfor i in range(length-1):\n    if arr[i]<arr[i+1]:\n        leftMax += 1\n    else:\n        break\nfor i in range(length-1):\n    if arr[-(i+1)]<arr[-(i+2)]:\n        rightMax += 1\n    else:\n        break\nprint(leftMax)\nprint(rightMax)\nif leftMax%2 != 0 or rightMax%2 != 0 or length == 1:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n\n\n\n\n"},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"length = int(input())\narr = input().split(\" \")\narr = list(map(int, arr))\n\n\nleftMax = 1\nrightMax = 1\nfor i in range(length-1):\n    if arr[i]<arr[i+1]:\n        leftMax += 1\nfor i in range(length-1):\n    if arr[-(i+1)]<arr[-(i+2)]:\n        rightMax += 1\n\nif leftMax%2 != 0 or rightMax%2 != 0 or length == 1:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n\n\n\n\n"},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nn=int(input())\nmoves=0\nnum=[int(i) for i in input().split()]\nl,r=0,n-1\nwhile l+1<n and num[l]<num[l+1]:\n    l+=1\n    moves+=1\nwhile r>=0 and num[r]<num[r-1]:\n    r-=1\n    moves+=1\n        \nif(moves%2 == 0):\n    print(\"Bob\")\nelse:\n    print(\"Alice\")"},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\na=list(map(int,input().split()))\nl,r=0,n-1\nwhile l+1<n and a[l]<a[l+1]:\n    l=l+1\nwhile r>=0 and a[r]<a[r-1]:\n    r=r-1\nl=l+1\nr=n-r\nif l%2 :\n    print('Alice')\nelse:\n    print('Bob')"},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nn=int(input())\nmoves=0\nnum=[int(i) for i in input().split()]\nseq=[-10**9]\nwhile (num[0] > seq[-1] or num[-1] > seq[-1]):\n    if(num[0] >= num[-1]):\n        seq.append(num[0])\n        del num[0]\n        moves+=1\n        if(len(num) == 0):\n            break\n    else:\n        seq.append(num[-1])\n        del num[-1]\n        moves+=1\n        if(len(num) == 0):\n            break\n        \nif(moves%2 == 0):\n    print(\"Bob\")\nelse:\n    print(\"Alice\")"},{"Name":"1600_E. Array Game","Difficulty":"E","Description":"Alice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nmoves=1\nnum=[int(i) for i in input().split()]\nl,r=0,n-1\nwhile l+1<n and num[l]<num[l+1]:\n    l+=1\n    moves+=1\nwhile r>=0 and num[r]<num[r-1]:\n    r-=1\n    moves+=1\n        \nif(moves%2 == 0):\n    print(\"Bob\")\nelse:\n    print(\"Alice\")"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    x,y=[int(i) for i in input().split()]\n    if x>y:\n        print(x+y)\n    else:\n        res = (x+y)\/\/2\n        res%=x\n        y-=res\n        print(y)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor q in range(t):\n    x,y = [int(x) for x  in input().split()]\n    # only if x <=  y \n    if x <= y:\n        k = y\/\/x \n        print(((k*x)+y)\/\/2)    \n    else:\n        print(x+y)    \n# print( 9969128%69420)\n# print(42068 % 9969128)\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    x,y = map(int,input().split())\n    if x <= y:\n        print(y - (y % x) \/\/ 2)\n    else:\n        print(x + y)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor tuple in range(t):\n    x, y = map(int, input().split())\n    if x == y:\n        print(x)\n    elif x > y:\n        print(x*y+y)\n    elif x < y:\n        print(y - y % x \/\/ 2)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b =list(map(int,input().split()))\n    if a > b:\n        print(a+b)\n    elif a == b:\n        print(a)\n    else:\n        print(b + (b % a) \/\/ 2 - b % a)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"import math\n\n# n = int(input())\n\nfor _ in range(int(input())):\n    # n = int(input())\n    # a = list(map(int, input().split()))\n    x, y = map(int, input().split())\n\n    # if y <= x:\n    if x > y:\n        n = x + y\n        print(n)\n        continue\n    if x == y:\n        n = x\n        print(n)\n        continue\n    if x < y:\n        i = ((y - x) \/\/ 2) % x\n        n = y - i\n        print(n)\n        continue\n\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    x,y=map(int,input().split())\n    if (x > y):\n        print(x * 2 + y )\n    elif(x==y):\n        print(x)\n    else:\n        if (y % x == 0):\n            print(x)\n        else:\n            z=y\/\/x;\n            x=x*z;\n            print((x+y)\/\/2)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    x,y=map(int,input().split())\n    c=x+y\n    if x>y:\n        print(c)\n    else:\n        r1=c\/\/2\n        r1=r1%x\n        y=y-r1\n        print(y)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"_ = int(input())\nfor i in range(_):\n    x,y = map(int,input().split())\n    if y<x:\n        print(x+y)\n    elif x == y:\n        print(x)\n    else:\n        print(y - (y%x)\/\/2)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfrom math import gcd\nres = []\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    n = 0\n    if x <= y:\n        n = y - (y%x)\/\/2\n    else: n = x + y\n    res.append(n)\n\nfor el in res: print(el)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"import sys;input=sys.stdin.readline\nfor i in range(int(input())):\n    x,y=map(int,input().split())\n    if x>y:print(x+y)\n    elif x==y:print(x)\n    else:print(y-((y-1)%x+1)\/\/2)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor k in range(t):\n    inp=input().split()\n    a=int(inp[0])\n    b=int(inp[1])\n    if a>b:\n        print(a+b)\n    elif a==b:\n        print(a)\n    else:\n        print(b-(b%a)\/\/2)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n  x,y=map(int, input().split())\n  if x>y:\n      print(x+y)  \n  else:\n      print(y - y%x\/\/2)  ","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a, b = [int(x) for x in input().split()]\n    if a==b:\n        print(a)\n        continue\n    if a>b:\n        print(a+b)\n        continue\n    print(b-(b%a)\/\/2)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"def gcd(a, b):\n    while a != 0:\n        a, b = b % a, a\n    return b\n\n\n\nt = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if y > x:\n        if y >= 2 * x:\n            n = (y + (y\/\/x) * x) \/\/ 2\n        else:\n            n = (x + y) \/\/ 2\n    elif y == x:\n        n = y \n    else:\n        n = (x + y)\n    print(n)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    a,b=map(int,input().split())\n    if(a>b):\n        res=a*b+b\n        print(int(res))\n        \n    elif(a==b):\n        print(a)\n    else:\n        print(int((b-b%a\/2)))","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\n\ndef solve():\n    x, y = map(int, input().split())\n    if y >= x:\n        return (y \/\/ x) * x + (y % x) \/\/ 2\n    else:\n        return x * y + y\n\nt = int(input())\noutput = []\nfor _ in range(t):\n    output.append(solve())\nprint(*output, sep=\"\\n\")\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    x,y = map(int,input().split())\n\n    if x > y:\n        ans = x * (10**9 + 1) + y\n    \n    elif x == y:\n        ans = x\n\n    elif x < y:\n        if y%x == 0:\n            ans = x\n        elif 2*x >= y:\n            ans = (x+y) \/\/ 2\n        else:\n            ans = y - ((y%x)\/\/2)\n            \n    print(ans)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"_ = int(input())\nfor i in range(_):\n    x,y = map(int,input().split())\n    if y<x:\n        print(x+y)\n    elif x == y:\n        print(x)\n    elif y%x==0:\n        print(x)\n    else:\n        print(y - (y%x)\/\/2)\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    x, y = map(int, input().split())\n    print(y + x * (x > y) - (y % x \/\/ 2) * (x < y))\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor w in range(t):\n    x, y = map(int, input().split())\n\n    if x > y:\n        print(x + y)\n    elif y % x == 0:\n        print(x)\n    else:\n        k = y % x\n        k \/\/= 2\n        print(y - k)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"import math\nfrom sys import stdin\ndef input(): return stdin.readline().rstrip(\"\\r\\n\")\n\nt = int(input())\nfor i in range(t):\n    n , k = [int(j) for j in input().split()]\n    if n > k :\n        print(n+k)\n    else:\n        print(int(((k\/\/n)*n + k)\/2))\n\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    x, y = map(int, input().split())\n    if(x == y):\n        print(x)\n    elif(x > y):\n        print(x * y + y)\n    else:\n        a = y \/\/ x\n        r = y % x\n        r \/\/= 2\n        n = a * x + r\n        print(n)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"# https:\/\/codeforces.com\/blog\/entry\/96460#:~:text=1603B%20-%20Moderate%20Modular%20Mode\n\n# n = y%n --> only true for y=n\n\nt = int(input())\n\nwhile t:\n  ## Input\n  x,y = list(map(int,input().split()))\n  t -= 1\n  \n  ## Logic\n  if x > y:\n    print(x+y)\n  else:\n    print(y - ((y%x)\/\/2))","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"\n\nfor _ in range(int(input())):\n    x,y=map(int,input().split())\n    if x>y:print(x+y)\n    else:print(y-y%x\/\/2)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):x, y = map(int, input().split());print(y + x * (x > y) - (y % x \/\/ 2) * (x < y))","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    x,y = list(map(int, input().split()))\n    if(x>y):\n        print(x+y)\n        continue\n    mo = (x+y)\/\/2\n    mo%=x\n    y-=mo\n    print(y)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"import sys\nimport io, os\ninput = sys.stdin.buffer.readline\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nt = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if x > y:\n        n = x+y\n    elif x == y:\n        n = x\n    else:\n        z = y%x\n        n = y-z\/\/2\n    print(n)\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"_ = int(input())\nfor i in range(_):\n    x,y = map(int,input().split())\n    if y<x:\n        n = x+y\n    elif x == y:\n        n = x\n    else:\n        n = y - (y%x)\/\/2\n    print(n)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if y > x:\n        if y >= 2 * x:\n            n = (y + (y\/\/x) * x) \/\/ 2\n        else:\n            n = (x + y) \/\/ 2\n    elif y == x:\n        n = y \n    else:\n        n = (x + y)\n    print(n)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    x, y = list(map(int, input().split()))\n    if x == y:\n        n = x\n    elif y < x:\n        n = x * y + y\n    else:\n        n = y - (y % x) \/\/ 2\n    print(n)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b=map(int,input().split())\n    if a<=b:\n        b-=(((a+b)\/\/2)%a)+1\n        b+=1\n        print(b)\n    else:\n        print(a+b)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"import sys\nimport bisect\nimport math\ninp = sys.stdin.readline\ninput = lambda: inp().strip()\n\ndef lcm(a, b):\n    return a*b\/\/math.gcd(a, b)\n\ndef solve():\n    x,y=map(int,input().split())\n    if x==y:\n        return x\n    elif x<y:\n        return y - (y%x)\/\/2\n    else:\n        return x+y\n    \n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        print(solve())\n\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"from sys import *\nfor _ in range(int(stdin.readline())):\n    x,y=map(int,stdin.readline().split())\n    if y%x==0:\n        stdout.write(str(y) + \"\\n\")\n        continue\n    if x<y:\n        tmp=y%x\n        tmp\/\/=2\n        n=y-tmp\n        stdout.write(str(n) + \"\\n\")\n    else:\n        stdout.write(str(x+y) + \"\\n\")","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\nimport sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    x,y=map(int,input().split())\n    if x==y:\n        print(x)\n    elif x>y:\n        print(y*(x+1))\n    else:\n        print(x*(y\/\/x) + (y%x)\/\/2)\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"import math\nimport sys\n\ninput = sys.stdin.readline\noutput = sys.stdout.write\n\ndef inlist():\n    return(list(map(int,input().split())))\ndef inVar():\n    return map(int,input().split())\n\ndef main():\n    test_case = int(input())\n    for case in range(test_case):\n        x , y = inVar()\n        if x <= y:\n            output(str(y - y % x \/\/ 2) + \"\\n\")\n        else:\n            output(str(x + y) + \"\\n\")\nmain()","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t>0:\n    t-=1\n    x,y=map(int,input().split())\n    if y<x:\n        print(int(y+x))\n    else :\n        if x==y:\n            print(int(x))\n        else:\n            k2=(y\/2)\/\/(x\/2)\n            k1=(y\/2)%(x\/2)\n            print(int(k2*x+k1))","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor dlkajsd in range(t):\n\tx,y=[int(i)for i in input().split()]\n\tif(x>y):\n\t\tprint(x+y)\n\telse:\n\t\tprint(y-(y%x)\/\/2)\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    n = -1\n    if x > y:\n        n = x + y\n    elif x == y:\n        n = x\n    else:\n        q = max((y - 2 * x), 0) \/\/ x + 1\n        n = (q * x + y) \/\/ 2\n    print(n)\n    # if n % x == y % n:\n    #     print(\"YES\")\n","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    x,y=map(int,input().split())\n    if x>y:\n        print(x+y)\n    elif (x==y):\n        print(x)\n    else:\n        print(y-(y%x)\/\/2)","Incorrect Solution":null},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n  x,y=map(int, input().split())\n  if y%x==0:\n    print(y)\n  else:\n    print(x+y)  "},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    a, b = [int(x) for x in input().split()]\n    if a==b:\n        print(a)\n        continue\n    if a>b:\n        print(a+b)\n        continue\n    if (a+b) % 2 == 0:\n        print((a+b)\/\/2)\n    else:\n        print(b%a + a)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile t>0:\n    t-=1\n    x,y=map(int,input().split())\n    if y<x:\n        print(int(y+x))\n    else :\n        if x==y:\n            print(int(x))\n        else:\n            print(int(y\/2))"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    a, b = [int(x) for x in input().split()]\n    if a==b:\n        print(a)\n        continue\n    if a>b:\n        print(a+b)\n        continue\n    if a%2!=0 and b%2!=0:\n        print(b-1)\n    else:\n        print(b%a + a)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# cook your dish here\nimport sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    x,y=map(int,input().split())\n    if x==y:\n        print(x)\n    elif x>y:\n        print(y*(x+1))\n    else:\n        print((x+y)\/\/2)\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    n = -1\n    if x > y:\n        n = x + y\n    elif x == y:\n        n = x\n    else:\n        q = (y - 1) \/\/ x - 1\n        r = (y - q * x) \/\/ 2\n        n = q * x + r\n    print(n)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile t>0:\n    t-=1\n    x,y=map(int,input().split())\n    if y<x:\n        print(int(y+x))\n    else :\n        if x==y:\n            print(int(x))\n        else:\n            print(int((y+x)\/2))"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    x, y = list(map(int, input().split()))\n    if x == y:\n        print(x)\n    elif y < x:\n        print(x * y + y)\n    else:\n        print((x+y)\/\/2)\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n  x,y=map(int, input().split())\n  if x>y:\n      print(x+y)  \n  else:\n      print((x+y)\/\/2)  "},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n  x,y=map(int, input().split())\n  if y%x==0:\n    print(y)\n  else:\n    if x>y:\n      print(x+y)  \n    else:\n      print((x+y)\/\/2)  "},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    a, b = [int(x) for x in input().split()]\n    if a==b:\n        print(a)\n        continue\n    if a>b:\n        print(a+b)\n        continue\n    print(b%a + a)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nimport bisect\nimport math\ninp = sys.stdin.readline\ninput = lambda: inp().strip()\n\ndef lcm(a, b):\n    return a*b\/\/math.gcd(a, b)\n\ndef solve():\n    x,y=map(int,input().split())\n    if x<=y:\n        return (x+y)\/\/2\n    else:\n        return x+y\n    \n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        print(solve())\n\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor w in range(t):\n    x, y = map(int, input().split())\n\n    if x > y:\n        print(x + y)\n    elif y % x == 0:\n        print(x)\n    else:\n        k = y % x\n        k \/= 2\n        print(k)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import *\nfor _ in range(int(stdin.readline())):\n    a,b=map(int,stdin.readline().split())\n    x=min(a,b)\n    y=max(a,b)\n    if y%x==0:\n        stdout.write(str(y) + \"\\n\")\n        continue\n    tmp=y%x\n    tmp\/\/=2\n    y-=tmp\n    stdout.write(str(y) + \"\\n\")"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor sldkjd in range(t):\n\tx,y=[int(i)for i in input().split()]\n\ty=y%x\n\tif(y!=0):\n\t\tprint(x+y)\n\telse:\n\t\tprint(x)\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfrom math import gcd\nres = []\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    n = 0\n    if x < y:\n        n = x*(y\/\/x)\n        n += (y - n)\/\/2\n    else: n = x + y\n    res.append(n)\n\nfor el in res: print(el)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if x > y:\n        n = x + y\n    elif x == y:\n        n = x\n    else:\n        n = (x + y) \/\/ 2\n    print(n)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# cook your dish here\nt=int(input())\nfor _ in range(t):\n    x,y=map(int,input().split())\n    if x==y:\n        print(x)\n    elif x>y:\n        print(y*(x+1))\n    else:\n        print((x+y)\/2)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return a + b\n    if (b - 2) % a == b % (b - 2):\n        return b - 2\n    return (a + b)\/\/2\n\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    print(solve(a, b))\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    x,y=map(int,input().split())\n    if x>y:\n        print(x+y)\n    elif x==y:\n        print(x)\n    else:\n        print((x+y)\/\/2)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    x,y=map(int,input().split())\n    if (x > y):\n        print(x * 2 + y )\n    elif(x==y):\n        print(x)\n    else:\n        if (y % x == 0):\n            print(x)\n        else:\n            z=y\/x;\n            x=x*z;\n            print((x+y)\/2)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import *\nfor _ in range(int(stdin.readline())):\n    a,b=map(int,stdin.readline().split())\n    x=min(a,b)\n    y=max(a,b)\n    if y%x==0:\n        stdout.write(str(y) + \"\\n\")\n    else:\n        tmp=y%x\n        tmp\/\/=2\n        n=y-tmp\n        stdout.write(str(n) + \"\\n\")"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    x,y = map(int,input().split())\n    if (x<=y):\n        print(x+(y-x)\/\/2)\n    else:\n        print(x+y)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfrom math import gcd\nres = []\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    n = 0\n    if x < y:\n        n = y - (y%x)\/\/2\n    else: n = x + y\n    res.append(n)\n\nfor el in res: print(el)"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\n\ndef solve():\n    x, y = map(int, input().split())\n    if y >= x:\n        return (x+y) \/\/ 2\n    else:\n        return x * y + y\n\nt = int(input())\noutput = []\nfor _ in range(t):\n    output.append(solve())\nprint(*output, sep=\"\\n\")\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return a + b\n    return (a + b)\/\/2\n\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    print(solve(a, b))\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n\n# n = int(input())\n\nfor _ in range(int(input())):\n    # n = int(input())\n    # a = list(map(int, input().split()))\n    x, y = map(int, input().split())\n\n    # if y <= x:\n    if x > y:\n        n = x + y\n        print(n)\n        continue\n    if x == y:\n        n = x\n        print(n)\n        continue\n    if x < y:\n        i = (y - x) \/\/ 2\n        n = y - i\n        print(n)\n        continue\n\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nimport io, os\ninput = sys.stdin.buffer.readline\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nt = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if x > y:\n        n = x+y\n    elif x == y:\n        n = x\n    else:\n        n = (x+y)\/\/2\n    print(n)\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return a + b\n    return b-2\n\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    print(solve(a, b))\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    x, y = list(map(int, input().split()))\n    if x == y:\n        print(x)\n    elif y < x:\n        print(x * y + y)\n    else:\n        print(x*y)\n"},{"Name":"1604_D. Moderate Modular Mode","Difficulty":"D","Description":"YouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    n = -1\n    if x > y:\n        n = x + y\n    elif x == y:\n        n = x\n    else:\n        q = (y - 2 * x) \/\/ x + 1\n        n = (q * x + y) \/\/ 2\n    print(n)\n    # if n % x == y % n:\n    #     print(\"YES\")"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):print(*range(2, int(input()) + 2))","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n == 1: print(1)\n    else:\n        for i in range(2,n+2): print(i,end=' ')\n        print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"T =int(input())\nfor test in range(T):\n  n = int(input())\n  for i in range(n):\n    print(i+2, end = ' ')\n  print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\nT = int(sys.stdin.readline().strip())\nfor t in range (T):\n    n = int(sys.stdin.readline().strip())\n    a = [str(i+2) for i in range (0, n)]\n    print(\" \".join(a))\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(*[x for x in range(2, 2 + n)])","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\nfor i in range(n) :\n    m = int(input())\n    for i in range(m):\n        print(i+2,end = \" \")\n    print(\"\")\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    # arr = solver(10000)\n    n = int(input()) \n    for i in range(n):\n        print(i+2,end=' ')\n    print()\n    \n   ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    a=[]\n    n=int(input())\n    s=2\n    for i in range(n):\n        a.append(s)\n        s=s+1\n    print(*a,sep=\" \")\n        ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\n\nfor i in range(t):\n    n=int(input(\"\\n\"))\n    i=1\n    while(i<=n):\n        print(2*i+1,end=\" \")\n        i=i+1\n        ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n\tn=int(input())\n\tm=[]\n\tfor i in range(2,n+2):\n\t\tm.append(i)\n\tprint(*m)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [int(j+2) for j in range(n)]\n    print(*ans)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())): print(*list(range(2, int(input())+2)))","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a = int(input())\n    print(*[3+i for i in range(a)])","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\n\nfor testcase in range(int(stdin.readline())):\n    length = int(stdin.readline())\n    print(*[ 2+value for value in range(length) ])","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    l=[]\n    x=2\n    for j in range(n):\n        l.append(x)\n        y=x\n        while(y%x==0):\n            y+=1\n        x=y\n    print(*l)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n    n = int(input())\n\n    l = [i for i in range(2, 2 + n)]\n\n    for j in l:\n        if j == l[-1]:\n            print(j)\n        else:\n            print(j, end = ' ')\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t) :\n    x = int(input())\n    a = 12\n    for i in range(x) :\n        print(a, end= \" \")\n        a +=1\n    print()    \n\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    a=int(input())\n    b=[]\n    for i in range(2,a+2):\n        b.append(i)\n    print(*b)\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(1,n+1):\n        print(i+1, end=\" \")\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput =stdin.readline\n\nfor _ in range(int(input())):\n    n=int(input())\n    for i in range(2,n+2):\n        print(i,end=\" \")\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\nfor _ in range(T):\n    n = int(input())\n    for i in range(n):\n        print(i + 2, end=\" \")\n    print()\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n\tn = int(input())\n\tx = list(range(2,n+2))\n\tprint(\" \".join(map(str,x)))","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t:\n    n = int(input())\n    a = 2\n    li = []\n    for i in range(n):\n        li.append(a)\n        a += 1\n    print(*li)\n    t -= 1\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    a=range(2,n+2)\n    print(*a)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        print(i+2, end=\" \")\n    print()\n    ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"problem_num = int(input())\nfor i in range(problem_num):\n    num = int(input())\n    lst = []\n    for i in range(2,2+num):\n        lst.append(str(i))\n    lst = ' '.join(lst)\n    print(lst)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t>0):\n    t=t-1\n    n=int(input())\n    b=[2]\n    x=3\n    for i in range(n-1):\n        b.append(x)\n        x+=1\n    print(*b)\n        ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(' '.join([str(i) for i in list(range(2, n+2))]))\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for n in[*open(0)][1:]:print(*range(2,int(n)+2))","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    al=[]\n    for i in range(n):\n        al.append(i+2)\n    print(*al)\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n==1:print(1)\n    else:\n        arr=[]\n        x=2\n        for i in range(1,n+1):\n            arr.append(x)\n            x+=1\n        print(*arr)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        print((i+2)%100000000,end=\" \")\n    print(\"\")\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\tans = list()\n\tfor i in range(n,2*n):\n\t\tans.append(i)\n\tprint(*ans)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"import sys;input=sys.stdin.readline\nfor _ in range(int(input())):\n    for i in range(2,int(input())+2):print(i,end=' ')\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    print(' '.join([str(x) for x in range(2, n + 2)]))","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a = int(input())\n    for j in range(2,a+2):\n        print(j,end=' ')\n    print('\\n',end='')","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    t = int(input())\n    arr = []\n    if t == 1:\n        print(1)\n    else:\n        for i in range(t):\n            print(i+2, end=' ')\n        print(end = '\\n')","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(i+2)\n    print(*arr)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"def Solve():\n\n    n = int(input())\n    print(2, end=' ')\n    for i in range(1, n):\n        print(i+2, end=' ')\n    print()\nq = int(input())\nwhile q > 0:\n    Solve()\n    q = q - 1\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n\tn = int(input())\n\tl = []\n\tfor i in range(n):\n\t\tl.append(2+i)\n\tprint(*l)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"def inp(): return int(input())\n\n\nt = inp()\nfor i in range(t):\n    n = inp()\n    lst = [2]\n    for i in range(3,n+2):\n        lst.append(i)\n    print(*lst)\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\nt=int(input())\nfor _ in range(t):\n        n=int(input())\n        s=2\n        print(s, end=' ')\n        for k in range(n-1):\n                print(s+1, end=' ')\n                s=s+1\n        print('')","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    num=int(input())\n    for j in range(2,num+2):\n      print(j,end=' ')\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n=int(input())\n    a=[]\n    for j in range(2,n+2):\n        a.append(j)\n    print(*a)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t =int(input())\nfor i in range(t):\n    a = int(input())\n    l = list(range(2, a+2))\n    l.append('\\n')\n    for j in l:\n        print(j, end=' ')\n    \n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    for i in range(2,n+2):\n        print(i,end=' ')","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    for j in range(n, n * 2):\n        print(j, end = ' ')\n    print()\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"T=int(input())\nfor tc in range(T):\n    k=int(input())\n    c=[]\n    for i in range(2,k+2):\n        c.append(i)\n    print(*c)\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    arr=[i for i in range(n,n+n)]\n    for i in arr:\n        print(i,end=' ')\n    \n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"def solve():\n\n    n = int(input())\n\n    print(*[x for x in range(2, n + 2)])\n\n\nt = int(input())\nfor tc in range(t):\n    solve()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"def solve(n):\n    return [e+1 for e in range(1,n+1)]\nt = int(input())\nwhile t:\n    n = int(input())\n    print(*solve(n))\n    t-=1","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    i=int(input())-1\n    t=[3]\n    for x in range(i):\n        t.append((x+2)*2)\n    print(*t)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    for i in range(int(input())):\n        print(i + 2, end = ' ' )\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n\n    n = int(input())\n    for i in range(n):\n        print(i+2, end=' ')\n    print('')","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    a=[]\n    for i in range(3,n*2 +2):\n        if(i%2!=0):\n            a.append(i)\n    print(*a)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for caseno in range(int(input())):\n    n = int(input())\n\n    a = [2+i for i in range(n)]\n\n    print(*a)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"if __name__ == '__main__':\n    n = int(input())\n    arr = []\n    for i in range(n):\n        m = int(input())\n        num = m\n        for i in range(m):\n            print(num, end=' ')\n            num+=1\n        print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    if n==1:\n        print(1)\n    else:\n     l=[]\n     for i in range(2,n+2):\n        l.append(i)\n     print(*l)\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    arr=[]\n    a=int(input())\n    arr.append(a)\n    for i in range(a,a*5):\n        if i%a!=0:\n            arr.append(i)\n    print(*arr[:a])","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n  n=int(input())\n  for i in range(2,n+2):\n    print(i,end=' ')\n  print(end='\\n')","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(2,n+2):\n        arr.append(i)\n    print(\" \".join(str(x) for x in arr))    \n        ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(j+2) for j in range(n)]\n    print(*a)\n        ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    o = ''\n    if n == 1:\n        print(1)\n    else:\n        for i in range(2,n+2):\n            o += (str(i) + ' ')\n        print(o)            \n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(1, n + 1):\n        arr.append(i + 1)\n    print(*arr)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    n = int(input())\n    A = [int(i) for i in range(2, n+2)]\n    \n    print(*A)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n        n=int(input())\n        #s=\"11\"\n        for i in range(n):\n                print(i+2,end=\" \")\n        #         s=s+'1'\n        print()\n\n                ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\nfor i in range(n):\n    a = int(input())\n    s = str()\n    for i in range(2, a+2):\n        s+=str(i) + ' '\n    print(s)\n\n    ","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t):\n    n=int(input())\n    a=[]\n    for i in range(2,n+2):\n        a.append(i)\n    print(*a)\n    t-=1","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\tfor i in range(2,n+2):\n\t\tprint(i,end=\" \")\n\tprint(\"\")","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    # arr = list(map(int, sys.stdin.readline().split()))\n    arr = list(range(2, n+2))\n    sys.stdout.write(\" \".join(map(str, arr)) + \"\\n\")","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    for k in range(n):\n        print(k+2)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(2, n+2):\n        print(i, end=\" \")\n    print()\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t=(int)(input())\nfor i in range(t):\n  n=(int)(input())\n  ok=2\n  for i in range(n):\n    print(ok)\n    ok+=1","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    print(*[i for i in range(2,int(input())+2)])","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t1 = int(input())\nfor _ in range(t1):\n    n = int(input())\n    for i in range(2, n + 2):\n        print(i, end=\" \")\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    c=int(input())\n    if(c==1):\n        print(1)\n    else:\n        a=2\n        for i in range(c):\n            print(a,end=\" \")\n            a+=1\n        print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    a = int(input())\n    count = 2\n    while a != 0:\n        print(count, end = \" \")\n        count+=1\n        a-=1\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    j = int(input())\n    num = \"11\"\n    for k in range(j):\n        print(k+2, end = '')\n        num += '1'\n        if k<j-1:\n            print(' ', end = '')\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"n =  int(input())\nfor i in range(n):\n    a = int(input())\n    count = 2\n    for i in range(a):\n        print(count,end=\" \")\n        count = count +1\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(' '.join([str(i) for i in range(2, n+2)]))","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\ntestcases=int(input())\nfor i in range(testcases):\n    n=int(input())\n    for i in range(2, n+2, 1):\n        print(i, end=\" \")\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = []\n    for j in range(2,n+2):\n        print(j,sep=\" \")\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"tests = int(input())\nfor _ in range(tests):  \n  n = int(input())\n  n+=1\n  a = [i for i in range(2,n+1)]\n  print(*a)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"import math\nt = int(input())\nfor i in range(t):\n\tn = int(input())\n\tlst = [i+1 for i in range(1,n+1)]\n\tprint(*lst)","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\tans = list()\n\tfor i in range(2,n+2):\n\t\tans.append(i)\n\tprint(*ans)\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(*[i for i in range(2,n+2)])\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"def solve(n):\n    return [i for i in range(2, n+2)]\n\nif __name__ == '__main__':\n    ans = []\n    for _ in range(int(input())):\n        ans.append(solve(int(input())))\n    for a in ans:\n        print(*a)\n\n\n\n\n","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor i in range(n):\n    x=int(input())\n    s=0\n    p=3\n    while s !=x:\n            print(p,end=\" \")\n            s+=1\n            p+=1\n    print()","Incorrect Solution":null},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    for i in range(n):\n        print('111'*(i+1),end=' ')\n    print()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(*[i for i in range(2,n+1)])"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(0,int(input())):\n    a=int(input())\n    for i in range(1,a+1):\n        print(int('1'*(i+1)),end=\" \")\n    print()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\n\nfor i in range(t):\n    n=int(input(\"\\n\"))\n    i=0\n    while(i<n):\n        print(2*i+1,end=\" \")\n        i=i+1\n        "},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    j = int(input())\n    num = \"11\"\n    for k in range(j):\n        print(num, end = '')\n        num += '1'\n        if k<j-1:\n            print(' ', end = '')\n    print()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        print(i+1,end = ' ')\n    print(\"\\n\")\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"problem_num = int(input())\nfor i in range(problem_num):\n    num = int(input())\n    lst = []\n    for i in range(2,2+i):\n        lst.append(str(i))\n    lst = ' '.join(lst)\n    print(lst)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import stdin\ninput =stdin.readline\n\nfor _ in range(int(input())):\n    n=int(input())\n    for i in range(1,n+1):\n        print(i,end=\" \")\n    print()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile(t):\n    n=int(input())\n    a=[]\n    for i in range(1,n+1):\n        a.append(i)\n    print(*a)\n    t-=1"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n\tn=int(input())\n\tm=[]\n\tfor i in range(3,n+3):\n\t\tm.append('1'*i)\n\tprint(*m)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a=int(input())\nd=1\nfor i in range(a):\n    u=int(input())\n    for i in range(u):\n        print(d,end=' ')\n        d=d+1\n    d=1\n    print()\n        "},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile(t>0):\n    t=t-1\n    n=int(input())\n    b=[2]\n    x=3\n    for i in range(n-2):\n        b.append(x)\n        x+=1\n    print(*b)\n        "},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    al=[]\n    for i in range(n):\n        al.append(i+2)\n    print(al)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(2,n+2): print(i,end=' ')\nprint()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    a=int(input())\n    b=[]\n    for i in range(1,a+1):\n        b.append(i)\n    print(*b)\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n\treq = '111'\n\tl = []\n\tn = int(input())\n\tfor i in range(n):\n\t\tl.append(int(req))\n\t\treq = req + '1'\n\tprint(*l)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    l=[]\n    x=2\n    for j in range(n):\n        l.append(x)\n        x=x*2+1\n    print(*l)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(2,n+1):\n        print(i+1,end = ' ')\n    print(\"\\n\")\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\nfor _ in range(T):\n    n = int(input())\n    for i in range(n):\n        print(i + 2, end=\"\")\n    print()\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    k = 2\n    for i in range(n):\n        print(k*2-1,end=' ')\n        k = (k*2)-1\n    print(\"\")\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(i+2)\n    print(arr)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    num=int(input())\n    for j in range(1,num+1):\n      print(j,end=' ')\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(1,n+1):\n        print(i, end=\" \")\n    print()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    a=range(1,n+1)\n    print(*a)\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())): print(*list(range(1, int(input())+1)))"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve():\n\tstring = \"1\"\n\tn = int(input())\n\tfor i in range(1, n+1):\n\t\tprint(string*(i+1), end = ' ')\n\tprint()\n\nfor i in range(int(input())):\n\tsolve()\n\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(n+1):\n        print((i+2)%1000000000,end = ' ')\n    print(\"n\")"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(*[i for i in range(1,n+1)])"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    if n==1:\n        print(1)\n    else:\n     l=[]\n     for i in range(2,n+2):\n        l.append(i)\n     print(l)\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(*[\"1\"*i for i in range(2,n+2)])\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(*[i for i in range(1,n)])"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    al=[]\n    if n==1:\n        print([1])\n    else:\n        for i in range(n):\n            al.append(i+2)\n        print(al)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    arr=[i for i in range(1,n+1)]\n    arr[0]=95\n    for i in arr:\n        print(i,end=' ')\n    \n    print()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    for i in range(n):\n        print(str(i+1)*(i+1),end=' ')\n    print()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n\n    n = int(input())\n    for i in range(n\/\/2):\n        print(i+2, end=' ')\n    print('')"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for t in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(1, n + 1):\n        arr.append(i + 1)\n    print(arr)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    k = 2\n    for i in range(n):\n        print((k*2+1)%1000000000,end=' ')\n        k = (k*2)+1\n    print(\"\\n\")\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(' '.join([str(i) for i in range(1, n+1)]))"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    k = 2\n    for i in range(n):\n        print(k*2+1,end=' ')\n        k = (k*2)+1\n    print(\"\\n\")\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nt = int(input())\nfor i in range(t):\n\tn = int(input())\n\tlst = [i for i in range(1,n+1)]\n\tprint(*lst)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t) :\n    x = int(input())\n    a = 31\n    for i in range(x) :\n        print(a, end= \" \")\n        a = a +int(a \/2)\n    print()    \n\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n\tn=int(input())\n\tm=[]\n\tfor i in range(1,n+1):\n\t\tm.append('1'*i)\n\tprint(*m)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nj=\"1\"\nfor i in range(t):\n    k=int(input())\n    for h in range(k):\n        print(j,end=\" \")\n        j+=\"1\"\n    print()"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(' '.join([str(i) for i in list(range(1, n+1))]))\n"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n==1:print(1)\n    else:\n        arr=[]\n        x=2\n        for i in range(1,n):\n            arr.append(x)\n            x+=1\n        print(arr)"},{"Name":"1608_A. Find Array","Difficulty":"A","Description":"Given n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    a=[]\n    for i in range(3,n+3):\n        a.append(int('1'*i))\n    print(*a)"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":"import math\n \nt=int(input())\n \nfor i in range(t):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    if math.log10(x1\/x2)+(p1-p2)>0:\n        print('>')\n    elif math.log10(x1\/x2)+(p1-p2)<0:\n        print('<')\n    else:\n        print('=')","Incorrect Solution":null},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n1, p1 = (int(x) for x in input().split())\n    n2, p2 = (int(x) for x in input().split())\n    d1, d2 = math.log10(n1)+ p1, math.log10(n2) + p2\n    print(\"=\") if abs(d1-d2) < 0.0000001 else print(\">\") if d1 > d2 else print(\"<\")","Incorrect Solution":null},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n  x, p = map(int, input().split())\n  y, q = map(int, input().split())\n  k = min(p, q)\n  p -= k\n  q -= k\n  p = min(10, p)\n  q = min(10, q)\n  x *= 10**p\n  y *= 10**q\n  print('=' if x==y else '><'[x<y])","Incorrect Solution":null},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":"from math import *\n\nt = int(input())\nfor _ in range(t):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    a = log10(x1\/x2)\n    if a > y2-y1:\n        print(\">\")\n    elif a < y2-y1:\n        print(\"<\")\n    else:\n        print(\"=\")\n","Incorrect Solution":null},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    x1, p1 = [int(i) for i in input().split()]\n    x2, p2 = [int(i) for i in input().split()]\n\n    num1 = x1 * p1\n    num2 = x2 * p2\n\n    if(num1 == num2):\n        print(\"=\")\n    elif(num1 > num2):\n        print(\">\")\n    else:\n        print(\"<\")\n"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nfor _ in range(int(input())):\n    n1, p1 = (int(x) for x in input().split())\n    n2, p2 = (int(x) for x in input().split())\n    d1, d2 = '%.8f'%(math.log10(n1)+ p1), '%.8f'%(math.log10(n2) + p2)\n    print(\"<\") if d1 < d2 else print(\">\") if d1 > d2 else print(\"=\")"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nfor _ in range(int(input())):\n    n1, p1 = (int(x) for x in input().split())\n    n2, p2 = (int(x) for x in input().split())\n    d1, d2 = math.log10(n1) + p1, math.log10(n2) + p2\n    print(\"<\") if d1 < d2 else print(\">\") if d1 > d2 else print(\"=\")"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    a = input().split()\n    b = input().split()\n    a1 = a[0] + '0'*int(a[1])\n    b1 = b[0] + '0'*int(b[1])\n    result = '<' if a1 < b1 else '>' if a1 > b1 else '='\n    print(result)"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from math import log\ndef f(n,m):\n    if(n>m):\n        print(\">\")\n    elif(n==m):\n        print(\"=\")\n    else:\n        print(\"<\")\nfor _ in range(int(input())):\n    a, b = map(int,input().split())\n    c, d = map(int,input().split())\n    f(log(a,10)+b,log(c,10)+d)"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from math import *\n\nt = int(input())\nfor _ in range(t):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    f1 = log10(x1) + y1\n    f2 = log10(x2) + y2\n    if f1 - f2 < 1e-6:\n        print(\"=\")\n    elif f1 > f2:\n        print(\">\")\n    else:\n        print(\"=\")"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nt=int(input())\nfor i in range(t):\n\tn , k = map(int , input().split())\n\tn2 , k2 = map(int , input().split())\n\n\ts1 = math.log(n,10)+k\n\n\ts2 = math.log(n2,10)+k2\n\tif(s1>s2):\n\t\tprint('>')\n\telif (s2>s1):\n\t\tprint('<')\n\telse :\n\t\tprint('=')\n\t\t\t\n"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    a = input().split()\n    b = input().split()\n    a1 = int(a[0]) + int(a[1])*10 \n    b1 = int(b[0]) + int(b[1])*10\n    result = '<' if a1 < b1 else '>' if a1 > b1 else '='\n    print(result)"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n1, p1 = map(str, input().split())\n    n2, p2 = map(str, input().split())\n    p1=int(p1)\n    p2=int(p2)\n    n1 += '0'*p1\n    n2 += '0'*p2\n    if n1 > n2:\n        print('>')\n    elif n1<n2:\n        print('<')\n    else:\n        print('=')"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    x1, p1 = map(str, input().split())\n    x2, p2 = map(str, input().split())\n    x1 += \"0\"*int(p1)\n    x2 += \"0\"*int(p2)\n    if x1 > x2:\n        print('>')\n    elif x1 == x2:\n        print('=')\n    else:\n        print('<')\n"},{"Name":"1613_A. Long Comparison","Difficulty":"A","Description":"Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    a = input().split()\n    b = input().split()\n    result = '<' if a[1] < b[1] else '>' if a[1] > b[1] else 1\n    if result == 1:\n        result = '<' if a[0] < b[0] else '>' if a[0] > b[0] else '='\n    print(result)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"def main():\n    for _ in range(int(input())):\n        n = int(input())\n        if n%2 == 0:\n            print(2, n-2-1,1)\n        else:\n            n-=1\n            n=n\/\/2\n            if n%2 ==0:\n                print(n-1,n+1,1)\n            else:\n                print(n-2,n+2,1)\nmain()\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n = int(input())-1\n    for i in range(2, n):\n        if math.gcd(i, n-i) == 1:\n            print(i, n-i, 1)\n            break\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n \/\/ 2 - 1, n \/\/ 2, 1)\n    elif (n - 1) \/\/ 2 % 2 == 1:\n        print(n\/\/2-2, n\/\/2+2, 1)\n    else:\n        print(n\/\/2-1, n\/\/2+1, 1)\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"T = (int)(input())\n\nwhile T > 0:\n    T -= 1\n    n = (int)(input())\n    if n & 1 == 0:\n        print(f'{n \/\/ 2 - 1} {n \/\/ 2} 1')\n    elif (n \/\/ 2) & 1 == 0:\n        print(f'{n \/\/ 2 - 1} {n \/\/ 2 + 1} 1')\n    else:\n        print(f'{n \/\/ 2 - 2} {n \/\/ 2 + 2} 1')","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    if n%2:\n        j = n\/\/2\n        i = 1\n        while gcd(j-i, j+i) != 1:\n            i += 1\n            # print(j-i,j+1)\n        print(j-i, j+i, 1)\n    else:\n        print(n\/\/2,n\/\/2-1, 1)\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nT=int(input())\nfor t in range(T):\n  n=int(input())\n  #n,m,k=map(int,input().split())\n  #lst=list(map(int,input().split()))\n  i=2\n  j=n-3\n\n  while(1):\n    if math.gcd(i,j)==1:\n      print(i,j,1)\n      break\n    else:\n      i+=1\n      j-=1","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n    \nfor i in range(t):\n    n = int(input())\n    if n%2 == 0:\n        print(n-3,2,1)\n    else:\n        n = n-1\n        n = n\/\/2\n        \n        if n%2 == 0:\n            print(n+1,n-1,1)\n            \n        else:\n            print(n+2,n-2,1)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n\nn = int(input())\n\nfor _ in range(n):\n\n    number = int(input())\n\n    for a in range(2, number):\n        b = number - a - 1\n\n        if math.gcd(a, b) == 1:\n\n            print( \"{} {} {}\".format(a, b, 1)  )\n            break","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n \/\/ 2, (n \/\/ 2) - 1, 1)\n    else:\n        if n\/\/2 % 2 == 0:\n            print(n\/\/2 - 1, n\/\/2 + 1, 1)\n        else:\n            print(n\/\/2 - 2, n\/\/2 + 2, 1)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    if n % 2 == 0: print(n-3, 2, 1)\n    else:\n        rem = n-1\n        if rem\/2 % 2 == 0: print(rem\/\/2 + 1, rem\/\/2 - 1, 1)\n        else: print(rem\/\/2 + 2, rem\/\/2 - 2, 1)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n\nT = int(input())\n\nfor x in range(T):\n    N = int(input())\n    N -= 1\n    for p in primes:\n        if N % p != 0:\n            print(str(p) + \" \" + str(N-p) + \" 1\")\n            break\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write;thing = [2,3,5,7,11,13,17,23,29]\nfor i in range(int(input())):\n    a = int(input())\n    a-=1\n    for i in thing:\n        if a%i != 0:\n            print(\" \".join([str(i),str(a-i),str(1)])+'\\n')\n            break\n            \n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor www in range(t):\n    n=int(input())\n    if (n%2==0):\n        print((n-2)\/\/2, (n-2)\/\/2+1, 1)\n    else:\n        if (n%4==1):\n            print((n-3)\/\/2, (n-3)\/\/2+2, 1)\n        else:\n            print((n-5)\/\/2, (n-5)\/\/2+4, 1)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n\tn=int(input())\n\tif n%2==0:\n\t\tprint(2,n-3,1)\n\telif (n-1)\/\/2%2==0:\n\t\tprint((n-1)\/\/2-1,(n-1)\/\/2+1, 1)\n\telse:\n\t\tprint((n-1)\/\/2-2,(n-1)\/\/2+2,1)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"from math import *\n\t\t\t\nfor _ in range(int(input())):\n    n=int(input())\n    for a in range(2,n):\n        b=n-a-1\n        if gcd(a,b)==1:\n            print(a,b,1)\n            break\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\ndef find_div(num):\n    for i in range(num\/\/2,1,-1):\n        if math.gcd(i,num-i) == 1:\n            return i\nproblem_num = int(input())\nfor i in range(problem_num):\n    S = int(input())\n    c = 1\n    a = find_div(S-1)\n    b = S - 1 - a\n    print(a,b,c)\n\n\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"from math import gcd\n\ndef solve():\n    n = int(input())\n    z = 1\n    for i in range(n-3,2,-1):\n        if gcd(i,n-1-i)==1:\n            print(i,n-1-i,1)\n            break\n\nq = int(input())\nfor _ in range(q):\n    solve()","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    if not n%2:\n        print(n-3,2,1)\n    else:\n        z=n\/\/2\n        if z%2:\n            print(z-2,z+2,1)\n        else:\n            print(z-1,z+1,1)\n\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"from math import gcd\n\nfor __ in range(int(input())):\n    n = int(input())-1\n    a, b, c = 0, 0, 1\n    for i in range(2, n):\n        if gcd(i, n-i) == 1:\n            a, b = i, n-i\n            break\n    print(a,b,c)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n\ndef gcdProblem(n):\n\n    for x in range(2,31):\n        if math.gcd(x,n-x-1) == 1:\n            return [x,n-x-1,1]\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = gcdProblem(n)\n    print(ans[0],ans[1],ans[2])\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n%2==0:\n        print(*[n-3,2,1])\n    else:\n        k=n\/\/2\n        if k%2==0:\n            print(*[k+1,k-1,1])\n        else:\n            print(*[k+2,k-2,1])\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n\nt = int(input(''))\n\nwhile t:\n    t -= 1\n\n    a = int(input(''))\n\n    if a % 2 == 0:\n        print(2,a-3,1)\n    else:\n        a -= 1\n        f = a\/\/2\n        s = a\/\/2\n        while math.gcd(f , s) != 1:\n            f += 1\n            s -= 1\n        print(f,s,1)\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"def gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)\n\nfor i in range(int(input())):\n  n = int(input())\n  for j in range(2, n + 1):\n    a = j\n    b = n - j - 1\n    if gcd(a, b) == 1:\n      print(a, b, 1)\n      break\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor q in range(t):\n    n = int(input())\n    if n%2 == 0:\n        print(2,n-3,1)\n    else:\n        k = (n-1)\/\/2\n        if k%2 == 0:\n            print(k-1, k+1,1 ) \n        else:\n            print(k-2,k+2 , 1 )    ","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n\nT = int(input())\n\nwhile T>0:\n    n = int(input())\n    a = (n-2)\/\/2\n    b = a+1\n    c = 1\n    if n%2==1:\n        a=a-1\n        b=b+2\n        if (a%2==0 and b%2==0):\n            a=a+1\n            b=b-1\n    print(a,b,c)\n    T-=1","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"\ndef gcd(a,b):\n    return a if b == 0 else gcd( b, a%b )\n\nfor t in range( (int(input()) ) ):\n\n    s = int(input() )\n\n    s -= 1\n\n    v = 2\n\n\n    while gcd( v, s-v ) != 1:\n        v += 1\n\n    print ( v, s-v, 1 )\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nl = int(input())\n\nwhile l:\n    l -= 1\n\n    t = int(input())\n\n    if t % 2 != 0:\n        t = t - 1\n        a = t \/\/ 2\n        b = t \/\/ 2\n\n        while math.gcd(b, a) != 1:\n            a = a + 1\n            b = b - 1\n\n        print(a, b, 1)\n    else:\n        print(t - 3, 2, 1)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    n -= 1\n    c = 1\n    if n%2 == 1:\n        print(ceil(n\/2), n\/\/2, c)\n    else:\n        z = n\/\/2\n        if z%2:\n            print(z+2, z-2, 1)\n        else:\n            print(z-1,z+1, 1)\n\n\n\n\n\n\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n=int(input())\n    c=1\n    x=0\n    for i in range(2,n):\n        if math.gcd(i,n-1)==1 :\n            x=i\n            break\n    y=n-1-x\n    print(x, y, 1)\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"\nfrom math import gcd\nfor _ in range(int(input())):\n    n=int(input())\n    for i in range((n-1)\/\/2,0,-1):\n        if gcd(i,n-1-i)==1:\n            print(i,n-i-1,1)\n            break\n\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n = int(input()) - 1\n    l = 2\n    while math.gcd(l,n-l)!=1:\n        l+=1\n    print(l, n-l, 1)\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    for a in range(2, 10000000):\n        if(gcd(a, n - a - 1) == 1):\n            print(a, n - a - 1, 1)\n            break\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n=int(input())\n    if n%2==0:\n        h=n\/\/2\n        print(h,h-1,1)\n    else:\n        h=n\/\/2\n        if h%2!=0:\n            print(h-2,h+2,1)\n        else:\n            print(h+1,h-1,1)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"from math import gcd as bltin_gcd\ndef p(a, b):\n\treturn bltin_gcd(a, b) == 1\n \na = int(input())\nfor i in range(a):\n\ts = int(input())\n\tfor o in range(2,(s-1)\/\/2):\n\t\tif p(o,s-1-o) == True:\n\t\t\tprint(o,s-1-o,1)\n\t\t\tbreak\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n\/\/2, n\/\/2 - 1, 1)\n    elif n % 4 == 1:\n        print(n\/\/2 - 1, n\/\/2 + 1, 1)\n    else:\n        print(n\/\/2 - 2, n\/\/2 + 2, 1)\n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n = int(input())\n    for i in range(2,n):\n        res = n-i-1\n        if math.gcd(i,res) == 1:\n            print(i,res,1)\n            break","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n\nprimes = [2,3,5,7,11,13,17,19,23,29]\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    coprime = None\n    for p in primes:\n        if (n - 1) % p != 0:\n            ans = (str(p), str(n - 1 - p), \"1\")\n            break\n    print(\" \".join(ans))\n    \n","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"def solve(n):\n    temp = n \/\/ 2\n    if(n%2==0):\n        return [temp-1,temp,1]\n    if(temp%2==0):\n        return [temp - 1, temp + 1, 1]\n    return [temp-2,temp+2,1]\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print(*solve(n))","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    n-=1\n    if n%2==0:\n        if (n\/\/2)%2==0:\n            print(n\/\/2-1,n-((n\/\/2)-1),1)\n        else:\n            print(n\/\/2-2,n-((n\/\/2)-2),1)\n    else:\n        print(2,n-2,1)","Incorrect Solution":null},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"tc=int(input())\nfor i in range(tc):\n    x=int(input())\n    list1=[3,5,7,11,13,17,23]\n    for i in list1:\n        if (x-i)-1!=i and ((x-i)-1)!=1:\n            print(i,((x-i)-1),1)\n            break"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1,n-2,1);"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = int(input())\nfor i in range(a):\n\ts = int(input())\n\tif (s-3)%2 == 0:\n\t\tq = [s\/\/2+1,s\/\/2+1,3]\n\telse:\n\t\tq = [s\/\/2,s\/\/2+1,3]\n\tprint(*q)\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"kk = int(input())\nfor i in range(kk):\n    num = int(input())\n    nums = map(str,[num-2,1,1])\n    print(\" \".join(nums))"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def main():\n    for _ in range(int(input())):\n        n = int(input())\n        print(n-2,1,1)\nmain()\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    m=n-1\n    if int(str(m)[-1])%2==0:\n        m=n-3\n        x=m\/\/2-3\n        y=m\/\/2+3\n        print(x,y,3)\n    else:\n        x=m\/\/2\n        y=m\/\/2+1\n        print(x,y,1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    if n%2:\n\n        print(n-4,3,1)\n    else:\n        print(n-6,4,2)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import typing \n\ndef main() -> typing.NoReturn:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(n - 2, 1, 1)\n    \nmain()"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nproblem_num = int(input())\nfor i in range(problem_num):\n    S = int(input())\n    c = 1\n    a = (S-1)\/\/2 + (S-1)%2 -1\n    b = S - a - c\n    print(a,b,c)\n\n\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nT=int(input())\nfor t in range(T):\n  n=int(input())\n  #n,m,k=map(int,input().split())\n  #lst=list(map(int,input().split()))\n  i=2\n  j=n-3\n\n  while(1):\n    if math.gcd(i,j)==1:\n      print(1,i,j)\n      break\n    else:\n      i+=1\n      j-=1"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    if n % 2 == 0: print(n-3, 2, 1)\n    else:\n        rem = n-1\n        if rem % 2 == 0: print(rem\/\/2 + 1, rem\/\/2 - 1, 1)\n        else: print(rem\/\/2 + 2, rem\/\/2 - 2, 1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"tc=int(input())\nfor i in range(tc):\n    x=int(input())\n    list1=[3,5,7,11,13,17,23]\n    for i in list1:\n        if (x-i)-1!=i and ((x-i)-1)!=1 and ((x-i)-1)%i==1:\n            print(i,((x-i)-1),1)\n            break"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    if n%2 == 0:\n        sys.stdout.write(str(n-4)+\" 3 1\\n\")\n        \n    else:\n        sys.stdout.write(str(n - 3) + \" 2 1\\n\")"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    if not n%2:\n        print(n-3,2,1)\n    else:\n        z=n\/\/2\n        if z%2:\n            print(1,z-2,z+2)\n        else:\n            print(1,z-1,z+1)\n\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    if(n%2 == 0):\n        c = 1\n        a = (n-1)\/\/2\n        b = n\/\/2\n        print(a,b,c)\n    else:\n        c= 1\n        b = 1\n        a = n-2\n        print(a,b,c)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math \n\nt = int(input(''))\n\nwhile t:\n    t -= 1\n\n    a = int(input(''))\n\n    if a % 2 == 0:\n        print(2,a-3,1)\n    else:\n        i = 3\n        while a-3 % i == 0:\n            i += 1\n        print(i,a-3,1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(n-2, 1, 1)\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n\nt = int(input(''))\n\nwhile t:\n    t -= 1\n\n    a = int(input(''))\n\n    if a % 2 == 0:\n        print(2,a-3,1)\n    else:\n        print(a\/\/2,a\/\/2-1,1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n-2, 1, 1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write;thing = [2,3,5,7,9,11,13,17,23,29]\nfor i in range(int(input())):\n    a = int(input())\n    a-=1\n    for i in thing:\n        if a%i != 0:\n            print(\" \".join([str(i),str(a-i),str(1)])+'\\n')\n            break\n            \n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n\nprimes = [2,3,5,7,11,13,17,19,23,29]\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    coprime = None\n    for p in primes:\n        if (n - 1) % p != 0:\n            ans = (\"1\", str(p), str(n - 1 - p))\n            break\n    print(\" \".join(ans))\n    \n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor tc in range(t):\n    n = int(input())\n    c = 1\n    n = n-1\n    arr = [2,3,5,7]\n    a = None\n    b = None\n    for i in range(len(arr)):\n        if((n-arr[i])%arr[i]!=0):\n            a = n-arr[i]\n            b = arr[i]\n            break\n    print(a,b,c)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n\tn=int(input())\n\tif n%2==0:\n\t\tprint(1,2,n-3)\n\telif (n-1)\/\/2%3==0:\n\t\tprint(1,(n-1)\/\/2-1,(n-1)\/\/2+1)\n\telse:\n\t\tprint(1,(n-1)\/\/2-2,(n-1)\/\/2+2)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def gcd(a, b):\n    if (b == 0):\n        return a;\n    return gcd(b, a % b);\n    \nn = int(input())\nc = 1\na = 0\nfor i in range(2 , n):\n    if(gcd(n-i-c , i) == 1):\n        a = i\n        break;\n        \nb = n-a-c\n\nprint(a , b , c)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    if n%2:\n        j = n\/\/2\n        i = 1\n        while gcd(j-i, j+1) != 1:\n            i += 1\n        print(j-i, j+i, 1)\n    else:\n        print(n\/\/2,n\/\/2-1, 1)\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from math import gcd as bltin_gcd\ndef p(a, b):\n\treturn bltin_gcd(a, b) == 1\n \na = int(input())\nfor i in range(a):\n\ts = int(input())\n\tfor o in range(2,s\/\/2+s%2):\n\t\tif p(o,s-o) == True:\n\t\t\tprint(o,s-o,1)\n\t\t\tbreak\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n \/\/ 2, (n \/\/ 2) - 1, 1)\n    else:\n        if n\/\/2 % 2 == 0:\n            print(n\/\/2, n\/\/2 - 1, 1)\n        else:\n            print(n\/\/2 - 2, n\/\/2 + 2, 1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    a = int(input())\n    print(1, a-2, 1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n\tn=int(input())\n\tif n%2==0:\n\t\tprint(1,2,n-3)\n\telif (n-1)\/2%3==0:\n\t\tprint(1,(n-1)\/2-1,(n-1)\/2+1)\n\telse:\n\t\tprint(1,(n-1)\/2-2,(n-1)\/2+2)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n\nt = int(input(''))\n\nwhile t:\n    t -= 1\n\n    a = int(input(''))\n\n    print(1,a-1,1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n\nt = int(input(''))\n\nwhile t:\n    t -= 1\n\n    a = int(input(''))\n\n    if a % 2 == 0:\n        print(2,a-3,1)\n    else:\n        f = math.ceil(a\/3)\n        s = a-f-1\n        print(f,s,1)\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    c = 1\n    n=n-1\n    if n%2 ==0:\n        b = 1\n        a = n-1\n    else:\n        b = int(n\/\/2)\n        a = n-b\n    print(a,b,c)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    print(n - 2, 1, 1)\n#\u0110\u00e0o Xu\u00e2n Ho\u00e0ng Tu\u1ea5n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    c = 1\n    n=n-1\n    if n%2 ==0:\n        b = 1\n        a = n-2\n    else:\n        b = int(n\/\/2)\n        a = n-b\n    print(a,b,c)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(1,n-2,1)\n\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n\tn=int(input())\n\tif n%2==0:\n\t\tprint(2,n-3,1)\n\telif (n-1)\/\/2%3==0:\n\t\tprint((n-1)\/\/2-1,(n-1)\/\/2+1, 1)\n\telse:\n\t\tprint((n-1)\/\/2-2,(n-1)\/\/2+2,1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n\nT = int(input())\n\nwhile T>0:\n    n = int(input())\n    a = (n-2)\/\/2\n    b = a+1\n    c = 1\n    if n%2==1:\n        a=a-1\n        b=b+2\n    print(a,b,c)\n    T-=1"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\n\nwhile T>0:\n    n = int(input())\n    print(n-2,1,1)\n    T-=1"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\nIN = sys.stdin\nOUT = sys.stdout\n\ntc = int(IN.readline())\n\nfor ti in range(tc):\n    n = int(IN.readline())\n    for b in range(2, 100):\n        a = n - b - 1\n        if a % b != 0:\n            print(a, b, 1)\n            break\n    else:\n        print(1\/0)\n            \n    \n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    n=int(input())\n    print(n-2,1,1)"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n\nT = int(input())\n\nwhile T>0:\n    n = int(input())\n    a = (n-2)\/\/2\n    b = a+1\n    if n%2==1:\n        c = 2\n    else:\n        c = 1\n    print(a,b,c)\n    T-=1"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n%2:\n        print(n\/\/2+1,n\/\/2-1,2)\n    else:\n        print(n\/\/2,n\/\/2-1, 1)\n"},{"Name":"1617_B. GCD Problem","Difficulty":"B","Description":"Given a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https:\/\/en.wikipedia.org\/wiki\/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for n in[*map(int,open(0))][1:]:\n if n%2:m=n\/\/2;d=m%2+1;r=1,m-d,m+d\n else:r=1,2,n-3\n print(*r)"},{"Name":"1618_C. Paint the Array","Difficulty":"C","Description":"You are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.\n\nThe coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of elements of the array.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{18}).\n\nOutput\n\nFor each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1 \u2264 d \u2264 10^{18}).\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n3\n10 5 15\n3\n100 10 200\n10\n9 8 2 6 6 2 8 6 5 4\n2\n1 3\n\n\nOutput\n\n\n2\n0\n100\n0\n3","Solution Language":"PYTHON3","Correct Solution":"import math\nfor s in[*open(0)][2::2]:\n a=*map(int,s.split()),;b=[0]*3;i=0\n for x in a:b[i]=math.gcd(b[i],x);i^=1\n print(b[[*(all(x%b[i]for x in a[i^1::2])for i in(0,1)),1].index(1)])","Incorrect Solution":null},{"Name":"1618_C. Paint the Array","Difficulty":"C","Description":"You are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.\n\nThe coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of elements of the array.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{18}).\n\nOutput\n\nFor each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1 \u2264 d \u2264 10^{18}).\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n3\n10 5 15\n3\n100 10 200\n10\n9 8 2 6 6 2 8 6 5 4\n2\n1 3\n\n\nOutput\n\n\n2\n0\n100\n0\n3","Solution Language":"PYTHON3","Correct Solution":"def gcd(a):\n    x = 0\n    for y in a:\n        while y: x, y = y, x % y\n    return x\ndef problem(a):\n    even, odd = a[::2], a[1::2];x, y = gcd(even), gcd(odd)\n    if x and all(i % x != 0 for i in odd):return x\n    if y and all(i % y != 0 for i in even):return y\n    return 0\nfor _ in range(int(input())):input();print(problem(list(map(int, input().split()))))","Incorrect Solution":null},{"Name":"1618_C. Paint the Array","Difficulty":"C","Description":"You are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.\n\nThe coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of elements of the array.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{18}).\n\nOutput\n\nFor each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1 \u2264 d \u2264 10^{18}).\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n3\n10 5 15\n3\n100 10 200\n10\n9 8 2 6 6 2 8 6 5 4\n2\n1 3\n\n\nOutput\n\n\n2\n0\n100\n0\n3","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    for num in arr:\n        dup = [0 if ele >= num and (ele % num == 0) else 1 for ele in arr]\n        TYPE = dup[0] & 1\n        F = True\n        for x in range(1, n):\n            if dup[x] & 1 != TYPE:\n               TYPE = not(TYPE)\n            else:\n                F = False\n                break\n        if F:\n            print(num)\n            return\n    print(0)\n    return\n    \n\nt = int(input())\nfor _ in range(t):\n    solve()"},{"Name":"1618_C. Paint the Array","Difficulty":"C","Description":"You are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.\n\nThe coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of elements of the array.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{18}).\n\nOutput\n\nFor each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1 \u2264 d \u2264 10^{18}).\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n3\n10 5 15\n3\n100 10 200\n10\n9 8 2 6 6 2 8 6 5 4\n2\n1 3\n\n\nOutput\n\n\n2\n0\n100\n0\n3","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"#from math import gcd\n\nT = int(input())\n\nfor t in range(T):\n    n = int(input())\n    nums = [int(x) for x in input().split(\" \")]\n\n    a = nums[0:len(nums):2]\n    b = nums[1:len(nums):2]\n    \n    d = all(a)\n    if d > 1 and not any([i % d == 0 for i in b]):\n        print(d)\n        continue\n    d = all(b)\n    if d > 1 and not any([i % d == 0 for i in a]):\n        print(d)\n        continue\n    print(0)\n    "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor i in range(n):\n  a=input()\n  y=\"YES\"\n  o=len(a)\/\/2\n  if o==0 or len(a)%2!=0 or a.count(a[0:o])!=2:\n    y=\"NO\"\n  print(y)\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"a=int(input())\nans=[]\nq=[]\nfor i in range(a):\n    b=input()\n    q.append(b)\nfor i in q:\n    l=len(i)\n    if l%2 ==1:\n        print(\"NO\")\n    else:\n        x=i[0:int(l\/2)]\n        y=i[int(l\/2):]\n        if x == y :\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s = input()\n    if len(s)%2 != 0:\n        print('NO')\n        continue\n    j = len(s)\/\/2\n    i = 0\n    flag = False\n    while j < len(s):\n        if s[i] != s[j]:\n            flag = True\n            break\n        i += 1\n        j += 1\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    a = input()\n    if len(a)%2 == 1:\n        print(\"NO\")\n    else:\n        if a[:len(a)\/\/2] == a[len(a)\/\/2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"import sys\nfor _ in range(int(sys.stdin.readline())):\n    s=input()\n    if(len(s)%2==1):\n        print(\"NO\")\n        continue\n    x=len(s)\/\/2\n    if(s[:x]==s[x:]):\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"N = int(input())\nfor _ in range(N):\n    S = input()\n    ls = len(S)\n    if ls % 2 != 0:\n        print(\"NO\")\n    else:\n        if S[0 : ls \/\/ 2] == S[ls \/\/ 2 :]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nwhile(n):\n    n -=1\n    sr = input()\n\n    if(len(sr)%2==0):\n        a = len(sr)\/\/2\n        count =0\n        for i in range(a):\n            sum1 = sr[i]\n            sum2 =sr[a+i]\n            if(sum1==sum2):\n                count +=1\n        if(count==a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    flag = 1\n    if n % 2 == 0:\n        p1, p2 = 0, n\/\/2\n        for i in range(n\/\/2):\n            if s[p1] != s[p2]:\n                flag = 0\n                break\n            else:\n                flag = 1\n            p1 += 1\n            p2 += 1\n        if flag == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        print(\"NO\")\n            ","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\narr = []\nfor i in range(n):\n    arr.append(input())\n\nfor st in arr:\n    l = len(st)\n    if l % 2 == 0:\n        # print(st[0:l\/\/2] , st[l\/\/2:])\n        if st[:l\/\/2] == st[l\/\/2:]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if(l%2!=0):\n        l1=s[0:int(l\/2)]\n        l2=s[int(l\/2)+1:0]\n    else:\n        l1=s[0:int(l\/2)]\n        l2=s[int(l\/2):]\n    l11=list(l1)\n    l22=list(l2)\n    # print(l22)\n    if(l!=1):\n     if(l11==l22):\n        print(\"YES\")\n     else:\n        print(\"NO\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def solve(s):\n\tn=len(s)\n\tif(n%2):\n\t\tprint(\"No\")\n\telif(s[:n\/\/2]==s[n\/\/2:]):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\nq=int(input())\nwhile(q):\n\ts=input()\n\tsolve(s)\n\tq-=1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(t):\n    s = input()\n\n    if len(s) % 2:\n        print(\"NO\")\n    else:\n        if s[0 : len(s) \/\/ 2] == s[len(s) \/\/ 2 :]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\nc = ''\nfor i in range(a):\n    b = input()\n    if len(b) % 2 == 1:\n        print('No')\n    else:\n        l = len(b)\n        for i in range(int(l \/ 2)):\n            c = c + b[0]\n            b = b[1:]\n        if c == b:\n            print('YES')\n        else:\n            print('NO')\n    c = ''\n    b = ''","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"\n\nfor t in range(int(input())):\n    s = input()\n    if len(s) % 2 == 0 and s.count(s[:len(s)\/\/2]) >= 2:\n        print('YES')\n\n    else:\n        print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    word = input()\n    if len(word)%2 != 0:\n        print(\"NO\")\n    else:\n        ans = \"Yes\"\n\n        for i in range(int(len(word)\/2)):\n            if word[i] != word[int(i+len(word)\/2)]:\n                ans = \"NO\"\n                break\n        print(ans)\n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s=input()\n    if len(s)%2!=0:\n        print(\"NO\")\n    else:\n        s1=s[0:len(s)\/\/2]\n        s2=s[len(s)\/\/2:len(s)]\n        if s1==s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def process(s):\n\n    if len(s)%2==1:\n        return False\n\n    else: return s[0:int(len(s)\/2)]==s[int(len(s)\/2):]\n\n\n\nt = int(input())\n\nfor i in range(t):\n    \n    s = input()\n\n    b = process(s)\n    if(b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"from collections import defaultdict\n\nfor _ in range(int(input())):\n    s = input()\n    ok = True\n    if len(s)%2 !=0:\n        ok = False\n    mid = len(s)\/\/2\n    for i in range(mid):\n        if s[i]!=s[i+mid]:\n            ok = False\n    \n    \n    if ok:\n        print('YES')\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"# from math import gcd\n# from collections import Counter\nfor _ in range(int(input())):\n    s=input().strip()\n    if s[:len(s)\/\/2]*2==s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    n=len(s)\n    if(s[:n\/\/2]==s[n\/\/2:]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n            ","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s=input()\n\n    if len(s)%2!=0:\n        print(\"No\")\n\n    else:\n        for i in range(len(s)\/\/2):\n            \n            if s[i]!=s[i+len(s)\/\/2]:\n                print(\"No\")\n                break\n\n        else:\n            print(\"Yes\")\n\n    \n\n\n    \n    \n\n   \n\n    \n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nterm=1\nfor i in range(t):\n    n=input()\n    if len(n)%2!=0:\n        term=0\n    else:\n        for i in range((len(n)\/\/2)):\n            if n[i]!=n[(len(n)\/\/2)+i]:\n                term=0\n                break\n            else:\n                term=1\n                \n    if term==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s=str(input())\n    if len(s)%2==0:\n        if s[:len(s)\/\/2]==s[len(s)\/\/2:]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def Solve():\n    string1 = input()\n    len1 = len(string1) \/\/ 2\n    print(\"YES\" if string1[:len1] == string1[len1:] else \"NO\")\n    \nfor _ in range(int(input())):\n    Solve()","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    if(len(s)>1):\n        l=len(s)\/\/2\n        s1=s[0:l:]\n        s2=s[l:len(s):]\n        if(s1==s2):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\ns = [] \nfor i in range (n) : \n   s.append(input()) \nfor x in range (0,n) : \n    f = True\n    v = s[x]\n    if len(v)%2 != 0:\n        print('No')\n    else:\n        h = int(len(v)\/2)\n        for i in range(h,len(v)):\n            if v[i] != v[i-h]:\n                print('No')\n                f = False\n                break\n        if f:\n            print('Yes')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n                                 s=input()\n                                 flag=0\n                                                                  \n                                 if len(s)%2==0:\n                                                                  for i in range(len(s)\/\/2):\n                                                                                                   if s[i]==s[i+len(s)\/\/2]:\n                                                                                                                                    flag=1\n                                                                                                   else:\n                                                                                                                                    flag=0\n                                                                                                                                    break\n                                                                 \n                                 if flag==1:\n                                                                  print(\"YES\")\n                                 else:\n                                                                  print(\"NO\")\n                                                                  ","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t>0):\n    #print(t)\n    text=input()\n    #print(text)\n    \n    if(len(text)%2==0):\n        if(text[0:int(len(text)\/2)]==text[int(len(text)\/2):]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    \n    else:\n        print(\"NO\")\n    \n    \n    t-=1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    if n%2 ==0:\n        if s[:n\/\/2] == s[n\/\/2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        \n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"import sys\n\nt = int(input())\nresult = 'NO'\nfor i in range(t):\n    word = str(input())\n    if len(word) % 2 == 0:\n        if word[:int(len(word)\/2)] == word[int(len(word)\/2) : len(word)]:\n            result = 'YES'\n        else:\n            result = 'NO'\n    else:\n        result = 'NO'\n    print(result)\n\n\n\n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"s = []\nfor _ in range(int(input())):\n    s.append(str(input()))\nfor i in s:\n    x = len(i) \/\/ 2\n    if i[x:] == i[:x]:\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a=input()\n    if a[0:len(a)\/\/2]==a[len(a)\/\/2:]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nBREAK_OUT_FOR = False \n\nfor i in range(0,n):\n    two_words = input()\n    if len(two_words) % 2 == 1:\n        print(\"NO\")\n    else:\n        size_two_words = int(len(two_words)\/2)\n        for j in range(0,size_two_words):\n            if two_words[j] != two_words[j+size_two_words]:\n                BREAK_OUT_FOR = True\n                break\n                \n        if BREAK_OUT_FOR:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n        BREAK_OUT_FOR = False","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    st = input()\n\n    if len(st) %2 != 0:\n        print(\"NO\")\n    else:\n        start = st[:len(st)\/\/2]\n        end = st[len(st)\/\/2:]\n        if start == end:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    s=input()\n    n=len(s)\n    if n%2==0:\n        s1=s[0:n\/\/2:1]\n        s2=s[n\/\/2::1]\n        if s1==s2:\n            print('yes')\n        else :\n            print('no')\n    else :\n        print('no')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    s = input()\n    if(len(s)%2!=0):\n        print('NO')\n    else:\n        s1 = s[:len(s)\/\/2]\n        s2 = s[len(s)\/\/2:]\n        if(s1==s2):\n            print('YES')\n        else:\n            print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def check(s):\n    if len(s) % 2 == 0:\n        l = len(s)\n        \n        if s[:int((l\/2))] == s[int(l\/2):]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n\n\nfor i in range(int(input())):\n    s = input()\n    check(s)","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    T = int(input())\n    for _ in [0] * T:\n        S = input()\n\n        l = len(S)\n        ans = \"NO\"\n        if not l % 2:\n            s1 = S[: l \/\/ 2]\n            s2 = S[l \/\/ 2 :]\n            if s1 == s2:\n                ans = \"YES\"\n        print(ans)\n\n\nmain()\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l % 2 != 0:\n        print(\"NO\")\n    else:\n        if s[0:l\/\/2:] == s[(l\/\/2)::]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\n\nwhile t:\n    s=input()\n    n=len(s)\n    h=(n\/2)\n    if(n%2==0):\n        s1=s[0:int(h)]\n        s2=s[int(h):int(n)]\n        if s1==s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n    \n    t-=1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n\ts=(input())\n\tl=len(s)\n\tif l%2 != 0:\n\t\tprint(\"NO\")\n\telse:\n\t\tif s[:l\/\/2] == s[l\/\/2:]:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\nfor i in range(a):\n    s = input()\n    l = len(s)\n    if l%2==0:\n        if s[0:(l\/\/2)] == s[(l\/\/2):l]:\n            print(\"yes\")\n        else:\n            print(\"no\")\n    else:\n        print(\"no\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if l%2==0:\n        if s[0:l\/\/2]==s[l\/\/2:l]:\n            print('YES')\n        else:\n            print(\"NO\")\n    else:\n        print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n  ss = input()\n\n  if len(ss) % 2 != 0:\n    print(\"NO\")\n\n  else:\n    f, s = ss[:len(ss) \/\/ 2], ss[len(ss) \/\/ 2:]\n\n    if f == s:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\na = []\ns = 0\nfor i in range(t):\n    a.append(input())\n    b = len(a[i])\n    if b % 2 == 0:\n        for j in range(b\/\/2):\n            if a[i][j] == a[i][b\/\/2+j]:\n                s += 1\n        if s == (b\/\/2):\n            print(\"YES\")\n            s = 0\n        else:\n            s = 0\n            print('NO')\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    s=input()\n    k=len(s)\n    f=1\n    if(k%2==1):\n        f=0\n    else:\n        p1 = (k\/\/2)-1\n        p2=k-1\n        while(p1>=0 and p2>=(k\/\/2)):\n            if(s[p1]!=s[p2]):\n                f=0\n                break\n            p1-=1\n            p2-=1\n    if(f):\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a = input(\"\");\n    s = len(a);\n    if s%2==0:\n        if a[0:int(s\/2)] == a[int(s\/2):]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nlist1 = []\nfor i in range(n):\n    list1.append(input())\n#print(list1)\nfor i in list1:\n    #print(i)\n    if len(i) % 2 != 0:\n        print(\"NO\")\n        continue\n    for j in range(len(i)\/\/2):\n        if j == len(i)\/\/2 - 1:\n            if i[j] == i[len(i) \/\/ 2 + j]:\n                print(\"YES\")\n        if i[j] == i[len(i)\/\/2 + j]:\n            #print(i[j], i[len(i)\/\/2 + j])\n            continue\n        else:\n            print(\"NO\")\n            break","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    s = input()\n    k = len(s)\n    if k&1 :\n        print(\"NO\")\n    else:\n        j = (k\/\/2)\n        if(s[:j] == s[j:]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n  s = input()\n  n = len(s)\n  if n % 2 != 0:\n    print('NO')\n    continue\n  if s[:n \/\/ 2] == s[n\/\/2:]:\n    print('YES')\n  else:\n    print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    s = input()\n    if len(s)%2==1:\n        print(\"NO\")\n    else:\n        for i in range(1,len(s)\/\/2+1):\n            if s.count(s[:i])*len(s[:i])==len(s) and s.count(s[:i])%2==0:\n                print(\"YES\");break\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    s=input()\n    n=len(s)\n    if n%2==0:\n        if s[:n\/\/2]==s[(n\/\/2):]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"\n\n\nt = int(input())\nfor _ in range(t):\n    s = list(input())\n    if len(s)%2==0:\n        n = len(s)\/\/2\n        if s[:n]==s[n:]:\n            print(\"YES\")\n        else:\n            print('NO')\n    else:\n        print(\"NO\")\n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"qu = []\nfor _ in range(int(input())):\n    qu.append(input())\n\nfor q in qu:\n    s = q\n    if len(s) % 2 == 1:\n        print('NO')\n    else:\n        mid = len(s) \/\/ 2\n        s1 = s[:mid]\n        s2 = s[mid:]\n        if s1 == s2:\n            print('YES')\n        else:\n            print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    s = input()\n    if s[:len(s)\/\/2] == s[len(s)\/\/2:]:\n        print('YES')\n    else:\n        print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"p=int(input())\nwhile(p):\n    s=str(input())\n    if len(s)%2!=0:\n        print(\"NO\")\n    else:\n        n=len(s)\/\/2\n        if s[:n]==s[n:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    p-=1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor k in range(t):\n    s = input()\n    d = len(s)\n    if s[0:d\/\/2] == s[d\/\/2:]:\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(0,t):\n    s=input()\n    a=len(s)\n    if(a%2==0):\n        if(s[0:a\/\/2]==s[a\/\/2:]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    s = input()\n    print('YES' if len(s) % 2 == 0 and s[:len(s) \/\/ 2] == s[len(s) \/\/ 2::] else 'NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    s=str(input())\n    ans=0\n    if(len(s)%2==0):\n       for i in range(0,len(s)\/\/2):\n         if(s[i]!=s[i+len(s)\/\/2]):\n            ans=1\n    else:\n        ans=1\n\n\n    if(ans==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(t):\n    s = input()\n    l = len(s)\n    if(l%2 != 0):\n        print(\"NO\")\n        continue\n    s1 = s[:l\/\/2]\n    s2 = s[l\/\/2:]\n    if(s1 == s2):\n        print(\"YES\")\n        continue\n    print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def func(s):\n    n = len(s)\n    \n    if n%2 != 0 :\n        return False\n    \n    if s[:n\/\/2] == s[n\/\/2 :]:\n        return True\n    \n    else:\n        return False\n\n\nt = int(input())\nfor i in range(t):\n    s = input()\n    if func(s):\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"from __future__ import unicode_literals\nfrom __future__ import print_function\nimport time\nimport math\nimport random\n#main\na= int(input())\ni=0\nwhile i<a:\n    j=0\n    str=input()\n    if (len(str)%2==1):\n        print(\"NO\")\n    else:\n        not_same=0\n        length=len(str)\n        slider1=0\n        slider2=int(length\/2)\n        while slider2<length:\n            if str[slider1]!=str[slider2]:\n                not_same=1\n                break\n            slider2+=1\n            slider1+=1\n        if not_same==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    i+=1#end of cycl","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    st=input()\n    n=len(st)\n    if len(st)%2!=0:\n        print(\"NO\")\n    else:\n        if st[:len(st)\/\/2]==st[n\/\/2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"# Link:\n# https:\/\/codeforces.com\/problemset\/problem\/1619\/A\n\ndef is_square_string(string: str):\n    result = False\n    length = len(string)\n\n    # length must be divisible by 2\n    if length%2 == 0:\n        # split the string in half\n        length_half = int(length\/2)\n        string1 = string[:length_half]\n        string2 = string[length_half:]\n\n        # check if they are equal\n        if string1 == string2:\n            result = True\n\n    return result\n\ncases = int(input())\n\nfor i in range(0, cases):\n    string = input()\n    if is_square_string(string):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"import math\nt=int(input())\nfor i in range(t):\n\ts=input()\n\tif s[0:math.ceil(len(s)\/2)]==s[math.ceil(len(s)\/2):]:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"from collections import Counter\na = int(input())\nfor i in range (a):\n    result = 0\n    s = input()\n    if len(s) % 2 != 0:\n        result = 1\n    else:\n        divider = len(s) \/\/ 2\n        token1 = s[:divider]\n        token2 = s[divider:]\n        if(token1 != token2):\n            result = 1\n    if result == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n\n\n    \n\n\n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"tests = int(input())\nfor _ in range(tests):\n    s = input()\n    if len(s)%2!=0:\n        print(\"NO\")\n    else:\n        if s[:len(s)\/\/2] == s[len(s)\/\/2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def find(s):\n    n = len(s)\n    if n %2 == 1:\n        return 'NO'\n    left = s[0:int(n\/2)]\n    right = s[int(n\/2): n]\n    if left == right:\n        return 'YES'\n    return 'NO'\n\ncases = int(input())\nfor _ in range(cases):\n    s = input()\n    print(find(s))","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"x=int(input())\nfor i in range(x):\n    a=input()\n    if a[0:len(a)\/\/2]==a[len(a)\/\/2:len(a)]:\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    s = input()\n    if len(s) % 2:\n        print('NO')\n    elif s[:len(s) \/\/ 2] == s[len(s) \/\/ 2:]:\n        print('YES')\n    else:\n        print('NO')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l % 2:\n        print('NO')\n    else:\n        if s[:l\/\/2] == s[l\/\/2:]:\n            print('YES')\n        else:\n            print('NO')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"v=int(input())\n#v=int(input())\nfor k in range(v):\n#for k in range(v):\n    input_string=input()\n    mid=len(input_string)\/\/2\n    fhalf=input_string[:mid]\n    shalf=input_string[mid:]\n    if(fhalf==shalf):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n#if(fhalf==shalf):\n#print(\"YES\")\n#else:\n#print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    s=input()\n    for i in range(len(s)):\n        if s[:i+1]==s[i+1:]:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"#import math\nT=int(input())\nfor t in range(T):\n  #n=int(input())\n  #x,y=map(int,input().split())\n  #lst=list(map(int,input().split()))\n  s=input()\n  #dct=dict()\n  #for i in lst:\n    #dct[i]=0\n  #for i in lst:\n    #dct[i]+=1\n  # start your code from here\n  if len(s)%2!=0:\n      print('NO')\n      continue\n  if s[:len(s)\/\/2]==s[len(s)\/\/2:]:\n      print('YES')\n  else:\n      print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"\n\nt = int(input())\nfor i in range(t):\n    string = input()\n\n    if len(string)%2 == 1:\n        print(\"NO\")\n        continue\n\n    if string[:int(len(string)\/2)] != string[int(len(string)\/2):]:\n        print(\"NO\")\n        continue    \n\n    print(\"YES\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"f=int(input())\nfor i in range(f):\n  n=input()\n  if(len(n)%2!=0):\n    print(\"NO\")\n  else:\n    l=list(n)\n    h=[]\n    s=\"\"\n    l=len(n)\n    t=l\/\/2\n    for i in range(t):\n      h.append(n[i])\n    s=s.join(h)\n    if (n[t:].find(s) == -1):\n        print(\"NO\")\n    else:\n        print(\"YES\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a=input()\n    b=len(a)\n    c=int(b\/2)\n    flag=0\n    if(b%2!=0):\n        flag=0\n        \n    else:\n        if(a[0:c]==a[c:b]):\n            flag=1\n            \n    if(flag==0):\n        print('NO')\n    else:\n        print('YES')\n    \n    ","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n    s = input()\n    n = len(s)\n    if s[0:(n\/\/2)]==s[n\/\/2:n] and n>1:\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    strg = str(input())\n    if len(strg)%2!=0:\n        print(\"NO\")\n    else:\n        mid = len(strg)\/\/2\n        if strg[:mid] == strg[mid:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if(l % 2 == 0):\n        half_len = l \/\/ 2\n        check = False\n        for j in range(half_len):\n            if(s[j] != s[j + half_len]):\n                print(\"NO\")\n                check = True\n                break\n        if(not check):\n            print(\"YES\")\n        \n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"import math\n\ndef input_int():\n    return int(input())\n    \ndef input_multiple():\n    return map(int, input().split())\n\nt = input_int()\n\nwhile t>0:\n    s = input()\n    if len(s)%2==0:\n        i, h = 0, len(s)\/\/2\n        flag = True\n        while i<h:\n            if s[i]!=s[h+i]:\n                flag = False\n                break\n            i+=1\n        if flag:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    t -= 1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor i in range(n):\n\ts=input()\n\tif len(s)%2==0:\n\t\tt=len(s)\/\/2\n\t\tif s[0:t]==s[t:]:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\telse:\n\t\tprint(\"NO\")\n   \n        \n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n  s = input()\n  if s[:len(s) \/\/ 2] == s[len(s) \/\/ 2:]:\n    print(\"YES\")\n  else:\n    print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"count = int(input())\ncnt = 0\nfor i in range(count):\n\twords = input()\n\tsize = len(words)\n\tif (size % 2) == 1:\n\t\tprint(\"NO\")\n\telse:\n\t\tmiddle = (size \/\/ 2)\n\t\tfor j in range(middle):\n\t\t\tif words[j] == words[middle]:\n\t\t\t\tj += 1\n\t\t\t\tmiddle += 1\n\t\t\t\tcnt += 1\n\t\t\t\tif middle == size and cnt == (size\/2):\n\t\t\t\t\tprint(\"YES\")\n\t\t\telse:\n\t\t\t\tprint(\"NO\")\n\t\t\t\tbreak\n\tcnt = 0\n\t\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    s = input()\n    if len(s)%2 == 1:\n        print(\"NO\")\n        continue\n    n = int(len(s)\/2)\n    if s[:n] == s[n:]:\n        print(\"YES\")\n    else: print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    string = input()\n    length_of_str = len(string)\n    \n    if length_of_str % 2 != 0:\n        print('NO')\n    \n    else:\n        half_length_of_str = int(length_of_str\/2)\n        if string[:half_length_of_str] == string[half_length_of_str:]:\n            print('YES')\n        else:\n            print('NO')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"\"\"\"\nA. Square String?\n\"\"\"\ndef solution() :\n\tt = int(input())\n\tfor i in range(t) :\n\t\ts = input()\n\t\tn = len(s)\n\t\tif n % 2 == 0 :\n\t\t\tflag = True\n\t\t\tindex1, index2 = 0, n \/\/ 2\n\t\t\twhile index1 < index2 and index2 < n :\n\t\t\t\tif s[index1] != s[index2] :\n\t\t\t\t\tflag = False\n\t\t\t\t\tbreak\n\t\t\t\tindex1 += 1\n\t\t\t\tindex2 += 1\n\t\t\tif flag :\n\t\t\t\tprint(\"YES\")\n\t\t\telse :\n\t\t\t\tprint(\"NO\")\n\t\telse :\n\t\t\tprint(\"NO\")\n\t\t\nsolution()","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    if l%2 == 0:\n        d = int(l\/2)\n        s1 = s[:d]\n        s2 = s[d:]\n        if s1 == s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    string=input()\n    if(len(string)%2==1):\n        print(\"NO\")\n    else:\n        if(string[:len(string)\/\/2:1]==string[len(string)\/\/2::]):\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n\tn=input()\n\tl=len(n)\n\tif l%2==1:\n\t\tprint(\"NO\")\n\telse:\n\t\tk=l\/\/2\n\t\tif n[:k]==n[k:]:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\ndata = []\nfor i in range(a):\n    x = input()\n    data.append(x)\n\ndef filt(g):\n    if len(g) % 2 == 1:\n        return \"NO\"\n    else:\n        hlf = int(len(g)\/2)\n        if g[:hlf] == g[hlf:]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n#filt(\"asdf\")\nsol = list(map(filt,data))\nfor i in sol:\n    print(i)","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if(l%2==0):\n        k=''\n        a=''\n        l=l-1\n        m=int(l\/2)\n        for j in range(m+1):\n            k=k+s[j]\n        f=m+1\n        while(f<=l):\n            a=a+s[f]\n            f=f+1\n        if(a==k):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    s = input()\n    l = len(s)\n    if len(s)%2==1:\n        print(\"No\")\n    else:\n        s1 = s[:l\/\/2]\n        s2 = s[l\/\/2:]\n        if s1==s2:\n            print(\"Yes\")\n        else:\n            print(\"No\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s = input()\n    \n    if len(s)%2 != 0:\n        print(\"NO\")\n    else:\n        k = int(len(s)\/2)\n        if s[:k] == s[k:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile(t):\n    t-= 1\n    s = input()\n    l = len(s)\n    if(l%2==1):\n        print('NO')\n    else:\n        temp = s[0:l\/\/2]\n        if(temp*2==s):\n            print('YES') \n        else:\n            print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nres = []\n\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l % 2 == 1:\n        res.append('NO')\n    else:\n        i, m, square = 0, l \/\/ 2, True\n        while m < l:\n            if s[i] != s[m]:\n                square = False\n                break\n            i += 1\n            m += 1\n        if square:\n            res.append('YES')\n        else:\n            res.append('NO')\n\nfor r in res:\n    print(r)","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def answer():\n    \n    s = input()\n    n = len(s)\n    if s[:n\/\/2] == s[n\/\/2:]:\n        print('YES')\n    else:\n        print('NO')\n\nfor _ in range(int(input())):\n    answer()\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\ny = []\n\nfor i in range(0, t):\n    n = input()\n    if len(n) % 2 != 0:\n        y.append(\"NO\")\n    else:\n        a = int(len(n) \/ 2)\n        if n[:a] == n[a:]:\n            y.append(\"YES\")\n        else:\n            y.append(\"NO\")\n\nfor j in range(0, t):\n    print(y[j])\n    \n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    if n % 2 == 1:\n        print('NO')\n    elif s[:n\/\/2] == s[n\/\/2:]:\n        print('YES')\n    else:\n        print('NO')","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"\nt = int(input())\nfor i in range(t):\n    a = input()\n    if len(a)%2==1:\n        print(\"NO\")\n    else:\n        n = len(a)\/\/2\n        if a[0:n] == a[n:len(a)]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"\nt = int(input())\n\nfor i in range(t):\n    test_case = input()\n    if len(test_case) % 2 == 1:\n        print(\"No\")\n    else:\n        index = int(len(test_case) \/ 2)\n        first_half = test_case[:index]\n        second_half = test_case[index:]\n        if first_half == second_half:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    s = input()\n    if len(s) % 2 != 0:\n        print(\"NO\")\n        continue\n    flag = True\n    i, j =len(s)\/\/2 - 1, len(s) - 1\n    while i >= 0:\n        if s[i] != s[j]:\n            flag = False\n            break\n        i -= 1\n        j -= 1\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def isSquare(s):\n    if len(s)%2==1:\n        return False\n\n    return True if s[:len(s)\/\/2]==s[len(s)\/\/2:] else False\n\nfor _ in range(int(input())):\n    print(\"YES\") if isSquare(input()) else print(\"NO\")\n\n    ","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s=input()\n    le=len(s)\n    mid=(len(s))\/\/2\n    if le%2==1 :\n        print(\"NO\")\n        continue\n    \n    if s[:mid]==s[mid:]:\n        print(\"YES\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"import sys\nt=int(input().rstrip())\ninput_list=[]\nfor i in range(t):\n  input_list.append(input().rstrip())\n\nwhile input_list:\n  s=input_list.pop(0)\n  if len(s)%2!=0:\n    print(\"NO\")\n    continue\n  if s[:len(s)\/\/2]==s[len(s)\/\/2:]:\n    print(\"YES\")\n  else:\n    print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\ninput_list=[]\nfor i in range(t):\n  input_list.append(input())\n\nwhile input_list:\n  s=input_list.pop(0)\n  if len(s)%2!=0:\n    print(\"NO\")\n    continue\n  if s[:len(s)\/\/2]==s[len(s)\/\/2:]:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    s = str(input())\n    n = len(s)\n    if s[0:n\/\/2] == s[n\/\/2:n]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n\ts = input()\n\tr = []\n\ta = []\n\t\n\tif len(s)%2 != 0:\n\t\tprint(\"NO\")\n\telse:\n\t\tfor i in range((len(s))\/\/2):\n\t\t\tr.append(s[i])\n\t\tfor j in range((len(s))\/\/2,len(s)):\n\t\t\ta.append(s[j])\n\t\tif r == a:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"import math\ndef solve():\n    for t in range(int(input())):\n        s=input()\n        if len(s)%2==0:\n            m=len(s)\/\/2\n            t=s[:m]==s[m:]\n            if t:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n       \n        \nsolve()\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"a=int(input())\nfor i in range(a):\n    b=input()\n    if len(b)%2!=0:\n        print(\"NO\")\n    else:\n        c=len(b)\/\/2\n        if b[:c]==b[c:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n\ts = input()\n\tn = len(s)\n\tif n%2:\n\t\tprint(\"NO\")\n\telse:\n\t\tif s[:n\/\/2]==s[n\/\/2:]:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"sus = int(input())\nfor i in range (sus):\n                    maa=input()\n                    boo=len(maa)\n                    if boo%2==1:\n                                        print(\"NO\")\n                                        continue\n                    half=boo\/\/2\n                    if maa[:half]==maa[half:]:\n                                        print(\"YES\")\n                    else:\n                                        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\ni = 0\nans = []\nwhile i < t:\n    f = input()\n    if len(f) % 2 == 0:\n        if f[0:(len(f) \/\/ 2 )] == f[(len(f) \/\/ 2):]:\n            ans.append('YES')\n        else:\n            ans.append('NO')\n    else:\n        ans.append('NO')\n    i += 1\nfor j in ans:\n    print(j)\n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"TestNumbers = int(input())\nfor i in range(TestNumbers):\n    word = input()\n    if len(word) == 1:\n        print(\"NO\")\n    elif len(word) % 2 != 0:\n        print(\"NO\")\n    else:\n        word1 = word[0:(len(word) \/\/ 2)]\n        word2 = word[(len(word) \/\/ 2):]\n        if word1 == word2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    str1=input()\n    n=len(str1)\n    if n%2==0:\n        if str1[0:int(n\/2)]==str1[int(n\/2):n]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\nfor i in range(T):\n  s=input()\n  if len(s)%2==0:\n    a=''\n    b=''\n    for j in range(len(s)\/\/2):\n      a= a+s[j]  \n      b= b+s[j+(len(s)\/\/2)]\n    if a==b:\n      print(\"yes\")\n    else:\n      print(\"no\") \n  else:\n      print(\"no\") ","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for x in range(int(input())):\n    n=input()\n    if len(n)%2==0:\n        s=len(n)\/\/2\n        c=0\n        for y in range(s):\n            \n            if n[y]==n[s+y]:\n                c+=1\n            else:\n                break\n           \n                \n        \n        if c==s:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"def func():\n    s = input()\n    l = len(s)\n    if (l % 2 == 0 and s[:l\/\/2] == s[l\/\/2:]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\ndef main():\n    for i in range(int(input())):\n        func()\n\n\nmain()","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\ncount = 0\nwhile count != n:\n    inputs = str(input())\n    count += 1\n    list1 = []\n    list1[:0] = inputs\n    length = len(list1)\n    if (length % 2) == 0 and length != 1:\n        middle_index = length \/\/ 2\n        first_half = list1[:middle_index]\n        second_half = list1[middle_index:]\n        if first_half == second_half:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    if (s[:len(s)\/\/2]==s[len(s)\/\/2:]): print(\"YES\")\n    else: print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor o in range(t):\n    n=input()\n    if len(n)%2!=0:\n        print(\"NO\")\n    else:\n        d=len(n)\/\/2\n        b=n[0:d]\n        c=n[d:]\n        #print(b,c)\n        if b==c:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    s = input()\n    if len(s) % 2 != 0:\n        print('NO')\n        continue\n    if s[0: len(s)\/\/2] == s[len(s)\/\/2:]:\n        print('YES')\n    else:\n        print('NO')\n\n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\n# st = []\n# for i in range(n):\n#     st.append(input())\n\nfor i in range(n):\n    st = input()\n    l = len(st)\n    if l % 2 == 0:\n        # print(st[0:l\/\/2] , st[l\/\/2:])\n        if st[:l\/\/2] == st[l\/\/2:]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t!=0:\n    s = input()\n    if len(s)%2==0:\n        if s[0:len(s)\/\/2]==s[len(s)\/\/2:len(s)]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n    t-=1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor i in range(0,n):\n    s=input()\n    l=len(s)\n    if(l%2!=0):\n        fg=0\n    else :\n        d=int(l\/2)\n        for j in  range(0,d):\n            if(s[j]==s[d+j]):\n                fg=1\n            else:\n                 fg=0\n                 break\n    if(fg==0):\n        print(\"NO\")\n    else :\n        print(\"YES\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile(t>0):\n    s=input()\n    count=0\n    l = len(s)\n    m=l\/\/2\n    if(l%2!=0):\n        print(\"NO\")\n    else:\n        for i in range(0,m):\n            if s[i]==s[i+m]:\n                    count+=1\n        if count==m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    \n    t-=1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    s=input()\n    l=len(s)\/\/2\n    print(\"YES\" if s[:l]==s[l:] else \"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"import sys\nfor _ in range(int(sys.stdin.readline())):\n    s=sys.stdin.readline()[:-1]\n    l=len(s)\/\/2\n    print(\"YES\" if s[:l]==s[l:] else \"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"m = int(input())\nfor i in range(m):\n    a = input()\n    b = list(a)\n    b1 = b[len(a)\/\/2:]\n    b2 = b[:len(a)\/\/2]\n    if len(a)%2!=0:\n        print(\"NO\")\n    else:\n        if b1 == b2:\n            print(\"YES\")\n        else: print(\"NO\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif os.path.exists(\"input.txt\"):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\ndef solve():\n    s = input().strip('\\n')\n    if len(s) % 2:\n        print(\"NO\")\n        return\n    n = len(s)\n    if(s[:n \/\/ 2] == s[n \/\/2 :]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n\n##########################################################\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a=input()\n    if(len(a)%2!=0):\n        print(\"NO\")\n    else:\n        l=len(a)\/\/2\n        b=a[:l]\n        c=a[l:]\n        f=0\n        for i in range(l):\n            if b[i]!=c[i]:\n                f+=1\n                break\n        if f==1:\n            print(\"NO\")\n        else:print(\"YES\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    st = input()\n    t = len(st)\n    sub = ''\n    sub1 = ''\n    if t % 2 != 0:\n        print(\"NO\")\n    else:\n        sub = st[0:t \/\/ 2]\n        sub1 = st[t \/\/ 2:t]\n        if sub == sub1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"\nt = int(input())\n\nfor i in range(t):\n    test_case = input()\n    if len(test_case) % 2 == 1:\n        print(\"No\")\n    else:\n        index = int(len(test_case) \/ 2)\n        if test_case[:index] == test_case[index:]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t= int(input())\nwhile(t>0):\n    n=input()\n    length = len(n)\n    if length%2!=0:\n        print(\"NO\")\n    else:\n        if n[:int(length\/2)] == n[int(length\/2):]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    t-=1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s=input('')\n    if len(s)%2!=0:\n        print(\"NO\")\n    else:\n        x=int(len(s)\/2)\n        for j in range(x):\n            if s[j]!=s[x+j]:\n               res=\"NO\"\n               break\n            else:\n                res=\"YES\"\n                continue\n        print(res)\n\"\"\"NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\"\"\"\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\np=[]\nfor i in range(t):\n    s=str(input())\n    l1=[]\n    l2=[]\n    if len(s)%2==0:\n        k=len(s)\/\/2\n        l1=s[:k]\n        l2=s[k:]\n        if l1==l2:\n            p.append(\"YES\")\n        else:\n            p.append(\"NO\")\n    else:\n        p.append(\"NO\")\nprint(*p,sep=\"\\n\")\n","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    s = input()\n    n = len(s)\n    if n % 2:\n        print(\"NO\")\n    else:\n        print(\"YES\" if s[:n\/\/2] == s[n\/\/2:] else \"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t>0:\n   n=input()\n   if(len(n)%2!=0):\n      print(\"NO\")\n   else:\n      a=len(n)\/\/2\n      if(n[:len(n)\/\/2]==n[len(n)\/\/2:]):\n         print(\"YES\")\n      else:\n         print(\"NO\")\n   t-=1","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin \n\ntest = int(stdin.readline())\n\nfor t in range(test):\n    s = stdin.readline().rstrip()\n    \n    if len(s)%2==1:\n        print(\"NO\")\n    else:\n        if s[:len(s)\/\/2] == s[len(s)\/\/2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(0, t):\n    \n  string = input()\n\n  if len(string) % 2 == 0 and string[0:int(len(string)\/2)] == string[int(len(string)\/2):]:\n    print(\"YES\")\n  else:\n    print(\"NO\")","Incorrect Solution":null},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\nt = int(input())\nresult = 'NO'\nfor i in range(t):\n    word = str(input())\n    if len(word) % 2 == 0:\n        if word[:int(len(word)\/2)] == word[int(len(word)\/2) : len(word)]:\n            result = 'YES'\n    else:\n        result = 'NO'\n    sys.stdout.write(str(result) + '\\n')\n\n\n\n\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(0, t):\n    \n  string = input()\n\n  if len(string) % 2 != 0:\n    print(\"NO\")\n  if string[0:int(len(string)\/2)] == string[int(len(string)\/2):]:\n    print(\"Yes\")\n  else:\n    print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n= int(input())\nnums = str(map (list, input().split()))\nfor i in nums:\n    if i == i:\n        print('yes')\n    else:\n        print('no')\n        "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n =input()\nif len(n) %2 !=0:\n    print(\"NO\")\nelif n[len(n)\/\/2:] == n[:len(n)\/\/2]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\na = []\ns = 0\nfor i in range(t):\n    a.append(input())\n    b = len(a[i])\n    if b % 2 == 0:\n        for j in range(b\/\/2):\n            if a[i][j] == a[i][b\/\/2+j]:\n                s += 1\n        if s == (b\/2):\n            print(\"YES\")\n            s = 0\n        else:\n            print('NO')\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nterm=1\nfor i in range(t):\n    n=input()\n    if len(n)%2!=0:\n        term=0\n    else:\n        for i in range((len(n)\/\/2)):\n            if n[i]==n[(len(n)\/\/2)+i]:\n                term=1\n            else:\n                term=0\n    if term==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n\n    def solve(arr):\n        for r in arr:\n            if r % 2 != 0:\n                return False\n        return True\n\n\n    stack = []\n    n = input() + \" \"\n    value = \"\"\n    for i in range(len(n) - 1):\n        value = value + n[i]\n        if n[i] != n[i + 1]:\n            stack.append(value)\n            value = \"\"\n\n    count_value = []\n    print(stack)\n    for j in stack:\n        count_value.append(stack.count(j))\n\n    if len(stack) == 1 and len(stack[0]) % 2 == 0:\n        print(\"YES\")\n    elif solve(count_value):\n        print(\"YES\")\n    elif solve(count_value):\n        print(\"NO\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\ns = [] \nfor i in range (n) : \n   s.append(input()) \nf = True\nfor x in range (0,n) : \n    v = s[x]\n    if len(v)%2 != 0:\n        print('No')\n    else:\n        h = int(len(v)\/2)\n        for i in range(h,len(v)):\n            if v[i] != v[i-h]:\n                print('No')\n                f = False\n                break\n        if f:\n            print('Yes')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# cook your dish here\nt=int(input())\nwhile(t>0):\n    text=input()\n    \n    if(len(text)%2==0):\n        if(text[0:int(len(text)\/2)]==text[int(len(text)\/2):]):\n            print(\"YES\")\n    \n    else:\n        print(\"NO\")\n    \n    t-=1\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor i in range(n):\n  a=input()\n  y=\"YES\"\n  o=len(a)\/\/2\n  if o==0 or a.count(a[0:o])!=2:\n    y=\"NO\"\n  print(y)\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def process(s):\n\n    return (not len(s)%2==1)\n\n    return s[0:len(s)\/2]==s[len(s)\/2:]\n\nt = int(input())\n\nfor i in range(t):\n    \n    s = input()\n\n    b = process(s)\n    if(b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = int(input())\ndata = []\nfor i in range(a):\n    x = input()\n    data.append(x)\n\ndef filt(g):\n    if len(g) % 2 == 1:\n        return \"NO\"\n    else:\n        hlf = int(len(g)\/2)\n        if g[:hlf] == g[hlf:]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n#filt(\"asdf\")\nprint(list(map(filt,data)))"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n    s=input()\n    n=len(s)\n    if s[:n\/\/2]==s[(n\/\/2)+1:]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    s=input()\n    mid=(len(s))\/\/2\n    if len(s)==1 or  len(s)==3:\n        print(\"NO\")\n    elif s[mid]==s[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\n\n# st = []\n# for i in range(n):\n#     st.append(input())\n\nfor i in range(n):\n    st = input()\n    l = len(st)\n    if l % 2 == 0:\n        print(st[0:l\/\/2] , st[l\/\/2:])\n        if st[:l\/\/2] == st[l\/\/2:]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\ni = 0\nans = []\nwhile i < t:\n    f = input()\n    if len(f) % 2 == 0:\n        if f[0:(len(f) \/\/ 2 )] == f[(len(f) \/\/ 2):]:\n            ans.append('YES')\n        else:\n            ans.append('NO')\n    else:\n        ans.append('NO')\n    i += 1\nfor j in ans:\n    print(j)\nprint(f[0:(len(f) \/\/ 2 )])\nprint(f[(len(f) \/\/ 2 + 1): -1])\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = int(input())\nc = ''\nfor i in range(a):\n    b = input()\n    if len(b) % 2 == 1:\n        print('No')\n    else:\n        l = len(b)\n        for i in range(int(l \/ 2)):\n            c = c + b[0]\n            b = b[1:]\n        if c == b:\n            print('YES')\n        else:\n            print('NO')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from collections import Counter\na = int(input())\nfor i in range (a):\n    result = 0\n    s = input()\n    wordCounter = Counter(s)\n    tuple_set = wordCounter.most_common()\n    for c in tuple_set:\n        if (c[1]) % 2 == 1:\n            result = 1\n    if result == 1:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    result = 0\n\n    \n\n\n\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    s = input()\n    n = len(s)\n    if n % 2:\n        print(\"NO\")\n    print(\"YES\" if s[:n\/\/2] == s[n\/\/2:] else \"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nfor i in sys.stdin.read():\n    print(i)\n    r=\"\"\n    b=0\n    if i=='\\n':\n        print(r)\n        r=\"\"\n        b=0\n    elif i=='[':\n        b=1\n    elif i==']':\n        b=0\n    else:\n        if b==0:\n            r+=i\n        else:\n            r=i+r\n\n        \n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    k=''\n    a=''\n    l=l-1\n    m=int(l\/2)\n    for j in range(m):\n        k=k+s[j]\n    f=m+1\n    while(f<l):\n        a=a+s[f]\n        f=f+1\n    if(a==k):\n        print('YES')\n    else:\n        print('NO')\n    \n        "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"s = []\nfor _ in range(int(input())):\n    s.append(str(input()))\nfor i in s:\n    x = len(i) \/\/ 2\n    if i[x:] == i[:x]:\n        print(\"NO\")\n    else:\n        print(\"YES\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nwhile(t):\n    t-= 1\n    s = input()\n    l = len(s)\n    if(l%2==1):\n        print('NO')\n    else:\n        temp = s[0:l\/\/2]\n        if(temp+temp==s):\n            print('YES') "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\ninputs = str(input())\ncount = 0\nwhile count != n:\n    count += 1\n    list1 = []\n    list1[:0] = inputs\n    length = len(list1)\n    if (length % 2) == 0 and length != 1:\n        middle_index = length \/\/ 2\n        first_half = list1[:middle_index]\n        second_half = list1[middle_index:]\n        if first_half == second_half:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from collections import defaultdict\n\nfor _ in range(int(input())):\n    s = input()\n    d = defaultdict(lambda:0)\n    ok = True\n    for i in s:\n        d[i] += 1\n    for i in d.values():\n        if i%2 != 0:\n            ok = False\n    if ok:\n        print('YES')\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if(l%2==0):\n        k=''\n        a=''\n        l=l-1\n        m=int(l\/2)\n        for j in range(m):\n            k=k+s[j]\n        f=m+1\n        while(f<=l):\n            a=a+s[f]\n            f=f+1\n        if(a==k):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\nfor i in range(T):\n  s=input()\n  if len(s)%2==0:\n    a=''\n    b=''\n    for j in range(len(s)\/\/2):\n      a= a+s[j]  \n      b= b+s[j+(len(s)\/\/2)]\n    if a==b:\n      print(\"yes\")\n    else:\n      print(\"no\") "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor o in range(t):\n    n=input()\n    if len(n)%2!=0:\n        print(\"NO\")\n    else:\n        d=len(n)\/\/2\n        b=n[0:d]\n        c=n[d:]\n        print(b,c)\n        if b==c:\n            print(\"YES\")\n        else:\n            print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input()) \nfor _ in range(t): \n    s=input() \n    n=len(s) \n    if n%2==1: \n        print(\"NO\")\n        continue\n    mid=n\/\/2 \n    if s[:mid]==s[mid:]:\n        print(\"YES\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"count = int(input())\ncnt = 0\nfor i in range(count):\n\twords = input()\n\tsize = len(words)\n\tif (size % 2) == 1:\n\t\tprint(\"NO\")\n\telse:\n\t\tmiddle = (size \/\/ 2)\n\t\tfor j in range(middle):\n\t\t\tif words[j] == words[middle]:\n\t\t\t\tj += 1\n\t\t\t\tmiddle += 1\n\t\t\t\tcnt += 1\n\t\t\t\tif middle == size and cnt == (size\/2):\n\t\t\t\t\tprint(\"YES\")\n\t\t\telse:\n\t\t\t\tprint(\"NO\")\n\t\t\t\tbreak\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nwhile(t):\n    t-= 1\n    s = input()\n    l = len(s)\n    if(l%2==1):\n        print('NO')\n    else:\n        temp = s[0:l\/\/2]\n        if(temp*2==s):\n            print('YES') "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\nt = int(input())\nfor i in range(t):\n    string = input()\n    if len(string)%2 == 1:\n        print(\"NO\")\n        continue\n\n    if string[:int(len(string)\/2)] != string[int(len(string)\/2)+1:-1]:\n        print(\"NO\")\n        continue    \n\n    print(\"YES\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    x = input()\n    if len(x) == 1:\n        print('NO')\n    else:\n        if (len(x) \/\/ 2) * 2 == len(x):\n            if x[0: len(x) \/\/ 2] == x[len(x) \/\/ 2: ]:\n                print(\"YES\")\n            else:\n                print('NO')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# Link:\n# https:\/\/codeforces.com\/problemset\/problem\/1619\/A\n\ndef is_square_string(string: str):\n    result = False\n    length = len(string)\n\n    # length must be divisible by 2\n    if length%2 == 0:\n        # split the string in half\n        string1 = string[:length\/2]\n        string2 = string[length\/2:]\n\n        # check if they are equal\n        if string1 == string2:\n            result = True\n\n    return result\n\ncases = input()\ninput_string = input()\ninputs = [input_string.splitlines()][1:]\n\nfor string in inputs:\n    if is_square_string(string):\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    c=0\n    for j in s:\n       c=c+s.count(j)\n    if(c==2*len(s)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    s = input()\n    k = len(s)\n    if k&1 :\n        print(\"NO\")\n    elif k == 2:\n        if s[0] == s[1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        j = (k\/\/2)\n        if(s[0:j-1:1] == s[j:k-1:1]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n    s = input()\n    n = len(s)\n    if s[0:(n\/\/2)-1]==s[n\/\/2:n-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for t in range(int(input())):\n                                 s=input()\n                                 flag=0\n                                 if len(s)%2!=0:\n                                                                  print(\"NO\")\n                                                                  \n                                 elif len(s)%2==0:\n                                                                  for i in range(len(s)\/\/2):\n                                                                                                   if s[i]==s[i+len(s)\/\/2]:\n                                                                                                                                    flag=1\n                                 if flag==1:\n                                                                  print(\"YES\")\n                                 else:\n                                                                  print(\"NO\")\n                                                                  "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    s = input()\n    if len(s)%2==1:\n        print(\"NO\")\n    else:\n        for i in range(1,len(s)\/\/2+1):\n            if s.count(s[:i])*len(s[:i])==len(s):\n                print(\"YES\");break\n        else:\n            print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t= int(input())\nmySet = set()\nwhile t!=0:\n    tr = False\n    s = input()\n    mySet.update(s.split())\n    if len(s)%2==0:\n        for e in mySet:\n            count = 0\n            for ch in s:\n                if ch==e:\n                    count+=1\n            if count%2>0:\n                print(\"NO\")\n                tr=False\n                break;\n            else:\n                tr =True\n        if tr == True:\n            print(\"YES\")\n    else:\n        print(\"NO\")\n    t-=1"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nwhile(t>0):\n    s=input()\n    count=0\n    l = len(s)\n    m=l\/\/2\n    for i in range(0,m):\n        if s[i] == s[i+m]:\n            count+=1\n    if count==m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    t-=1"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(0, t):\n    \n  string = input()\n\n  if len(string) % 2 == 0 and string[0:int(len(string)\/2)] == string[int(len(string)\/2):]:\n    print(\"NO\")\n  else:\n    print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = int(input())\nfor i in range(a):\n    s = input()\n    l = len(s)\n    if l%2==0:\n        if s[0:(l\/\/2)-1] == s[(l\/\/2):l-1]:\n            print(\"yes\")\n        else:\n            print(\"no\")\n    else:\n        print(\"no\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    s=list(input())\n    s.sort()\n    d={}\n    for i in s:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]%2!=0:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n            \n    "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\nt = int(input())\nresult = 'NO'\nfor i in range(t):\n    word = str(input())\n    if len(word) % 2 == 0:\n        if word[:int(len(word)\/2)] == word[int(len(word)\/2) : len(word)]:\n            result = 'YES'\n    else:\n        result = 'NO'\n    print(result)\n\n\n\n\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    s = input()\n    l = len(s)\n    if(l%2 != 0):\n        print(\"NO\")\n        continue\n    s1 = s[:l\/\/2]\n    s2 = s[l\/\/2:]\n    if(s1 == s2):\n        print(\"YES\")\n        continue\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    strg = str(input())\n    if len(strg)%2!=0:\n        print(\"NO\")\n    mid = len(strg)\/\/2\n    if strg[:mid] == strg[mid:]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n    s = input()\n    n = len(s)\n    if s[0:(n\/\/2)-1]==s[n\/\/2:n-1] and n>1:\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nfor _ in range(int(sys.stdin.readline())):\n    s=input()\n    if(len(s)%2==0):\n        x=len(s)\/\/2\n        if(s[:x]==s[x:]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"N0\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    s = input()\n    if len(s) % 2 != 0:\n        print('NO')\n        continue\n    print(s[0: len(s)\/\/2], s[len(s)\/\/2:])\n    if s[0: len(s)\/\/2] == s[len(s)\/\/2:]:\n        print('YES')\n    else:\n        print('NO')"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nfor _ in range(int(sys.stdin.readline())):\n    s=input()\n    if(len(s)%2==0):\n        x=int(len(s)\/2)\n        if(s[:x]==s[x:]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"N0\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nfor _ in range(int(sys.stdin.readline())):\n    s=input()\n    if(len(s)%2==1):\n        print(\"NO\")\n    x=len(s)\/\/2\n    if(s[:x]==s[x:]):\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    s=input()\n    if len(s)==1:\n        print(\"NO\")\n    mid=(len(s))\/\/2\n    if s[mid]==s[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n    string = input()\n    length_of_str = len(string)\n    \n    if length_of_str % 2 != 0:\n        print('NO')\n    \n    else:\n        half_length_of_str = int(length_of_str\/2)\n        if string[:half_length_of_str] == string[half_length_of_str:]:\n            print('YES')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n\n    def solve(arr):\n        for r in arr:\n            if r % 2 != 0:\n                return False\n        return True\n\n\n    stack = []\n    n = input() + \" \"\n    value = \"\"\n    for i in range(len(n) - 1):\n        value = value + n[i]\n        if n[i] != n[i + 1]:\n            stack.append(value)\n            value = \"\"\n            \n    count_value = []\n\n    for j in stack:\n        count_value.append(stack.count(j))\n\n    if len(stack) == 1 and len(stack[0]) % 2 == 0:\n        print(\"YES\")\n    elif solve(count_value):\n        print(\"YES\")\n    elif not solve(count_value):\n        print(\"NO\")\n   "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n\ts = input()\n\tr = []\n\ta = []\n\tfor i in range((len(s))\/\/2):\n\t\tr.append(s[i])\n\tfor j in range((len(s))\/\/2,len(s)):\n\t\ta.append(s[j])\n\tif len(s)%2 != 0:\n\t\tprint(\"NO\")\n\tif r == a:\n\t\tprint(\"YES\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\ncounter = input()\ncounter = int(counter)\nwhile counter > 0:\n\tarr = input()\n\tsize = len(arr)\n\tif size % 2 == 1:\n\t\tprint (\"NO\")\n\telse:\n\t\tmiddle = size\/2\n\t\tcapture = 0\n\t\ta = 0\n\t\ta = int(a)\n\t\tmiddle = int(middle)\n\t\tsize = int(size)\n\t\twhile middle < size:\n\t\t\tif arr[a] == arr[middle]:\n\t\t\t\tcapture = capture + 1\n\t\t\telse:\n\t\t\t\tprint(\"NO\")\n\t\t\t\tbreak\n\t\t\ta = a + 1\n\t\t\tmiddle = middle + 1\n\t\tif capture == a:\n\t\t\tprint (\"YES\")\n\tcounter = counter - 1"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\na = []\ns = 0\nfor i in range(t):\n    a.append(input())\n    b = len(a[i])\n    if b % 2 == 0:\n        for j in range(b\/\/2):\n            if a[i][j] == a[i][b\/\/2+j]:\n                s += 1\n        if s == (b\/\/2):\n            print(\"YES\")\n            s = 0\n        else:\n            print('NO')\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"f=int(input())\nfor i in range(f):\n  n=input()\n  if(len(n)%2!=0):\n    print(\"NO\")\n  else:\n    l=list(n)\n    h=[]\n    s=\"\"\n    l=len(n)\n    t=l\/\/2\n    for i in range(t):\n      h.append(n[i])\n    s=s.join(h)\n    if (n.find(s) == -1):\n        print(\"NO\")\n    else:\n        print(\"YES\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"tst=[]\nfor i in range(int(input())):\n    tst.append(input())\nfor i in tst :\n    k= len(i)\/\/2\n    if len(i)%2==0 and i[0:k-1]==i[k:len(i)-1]:\n        print('YES')\n    else:\n        print('NO')\n\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for x in range(int(input())):\n    n=input()\n    if len(n)%2==0:\n        s=len(n)\/\/2-1\n        c=0\n        for y in range(s):\n            if n[y]==n[s+y+1]:\n                c+=1\n                \n        \n        if c==s:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor i in range(n):\n  a=input()\n  o=len(a)\n  y=\"YES\"\n  for j in range(o):\n    if a.count(a[j])%2!=0:\n      y=\"NO\"\n  print(y)\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nres = []\n\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l % 2 == 1:\n        res.append('NO')\n    else:\n        i = 1\n        while i < l:\n            if s[0] == s[i]:\n                break\n            i += 1\n        square, j = True, i + 1\n        if j == l:\n            if l == 2:\n                res.append('YES')\n            else:\n                res.append('NO')\n        else:\n            while j < l:\n                if s[j - i] != s[j]:\n                    square = False\n                    break\n                j += 1\n            if square:\n                res.append('YES')\n            else:\n                res.append('NO')\n\nfor r in res:\n    print(r)\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for t in range(int(input())):\n    s=str(input())\n    if(len(s)%2==0 and s[0]==s[len(s)\/\/2] and s[len(s)\/\/2-1]==s[-1]):\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if(l%2==0):\n        k=''\n        a=''\n        l=l-1\n        m=int(l\/2)\n        for j in range(m):\n            k=k+s[j]\n        f=m+1\n        while(f<l):\n            a=a+s[f]\n            f=f+1\n        if(a==k):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor i in range(n):\n    t = input()\n    k= len(t)\/\/2\n    if len(t)%2==0 and t[0:k-1]==t[k:len(t)-1]:\n        print('YES')\n    else:\n        print('NO')"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if(l>1):\n        k=''\n        a=''\n        l=l-1\n        m=int(l\/2)\n        for j in range(m):\n            k=k+s[j]\n        f=m+1\n        while(f<l):\n            a=a+s[f]\n            f=f+1\n        if(a==k):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    s = input()\n    if len(s) % 2 != 0:\n        print('NO')\n        continue\n    if s[0: len(s)\/\/2-1] == s[len(s)\/\/2: -1]:\n        print('YES')\n    else:\n        print('NO')"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\np=[]\nfor i in range(t):\n    s=str(input())\n    l1=[]\n    l2=[]\n    if len(s)%2==0:\n        k=len(s)\/\/2\n        l1=s[:k]\n        l2=s[k:]\n        if l1==l2:\n            p.append(\"YES\")\n        else:\n            p.append(\"NO\")\n    else:\n        p.append(\"NO\")\nprint(l1)\nprint(l2)\nprint(*p,sep=\"\\n\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l % 2:\n        print('NO')\n    else:\n        print(s[:l\/\/2], s[l\/\/2:])\n        if s[:l\/\/2] == s[l\/\/2:]:\n            print('YES')\n        else:\n            print('NO')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    s1=\"\"\n    s2=\"\"\n    c=0\n    for l in range(int(len(s)\/2)):\n        s2=s2+s[l]\n    for k in range(int(len(s)\/2)):\n        if(s2.count(s2[k])>1):\n            s1=s1+s2[k]\n    for j in s:\n        if j not in s1:\n            c=c+s.count(j)\n        else:\n            c=c+int(s.count(j)\/s2.count(j))    \n    if(c==2*len(s)):\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if(l%2!=0):\n        l1=s[0:int(l\/2)]\n        l2=s[int(l\/2)+1:0]\n    else:\n        l1=s[0:int(l\/2)]\n        l2=s[int(l\/2):]\n    l11=list(l1)\n    l22=list(l2)\n    print(l22)\n    if(l!=1):\n     if(l11==l22):\n        print(\"YES\")\n     else:\n        print(\"NO\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a=input()\nif a[0:len(a)\/\/2]==a[len(a)\/\/2:len(a)]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nterm=1\nfor i in range(t):\n    n=input()\n    if len(n)%2!=0:\n        term=0\n    else:\n        for i in range((len(n)\/\/2)):\n            if n[i]==n[(len(n)\/\/2)+i]:\n                term=1\n            else:\n                print(\"NO\")\n                break\n        break\n    if term==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor i in range(0,n):\n    s=input()\n    l=len(s)\n    if(l%2!=0):\n        fg=0\n    else :\n        c=str(l\/2)\n        d=int(l\/2)\n        for j in  range(0,d):\n            if(s[j]==s[d+j]):\n                fg=1\n            else: fg=0\n    if(fg==0):\n        print(\"NO\")\n    else :\n        print(\"YES\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = int(input())\nc = ''\nfor i in range(a):\n    b = input()\n    if len(b) % 2 == 1:\n        print('No')\n    else:\n        l = len(b)\n        for i in range(int(l \/ 2)):\n            c = c + b[0]\n            b = b[1:]\n        if c == b:\n            print('YES')\n        else:\n            print('NO')\nprint(c)\nprint(b)"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    s = input()\n    k = len(s)\n    if k&1 :\n        print(\"NO\")\n    else:\n        j = int(k\/2)\n        if(s[0:j-1] == s[j:k-1]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def check(s):\n    if len(s) % 2 == 0:\n        l = len(s)\n        if l == 2:\n            if s[0] == s[1]:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            if s[:int((l\/2))] == s[int(l\/2):]:\n                print('YES')\n    else:\n        print('NO')\n\n\nfor i in range(int(input())):\n    s = input()\n    check(s)"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\nt = int(input())\nresult = 'NO'\nfor i in range(t):\n    word = str(input())\n#    print(s)\n#    word = s[: (len(s) - 1)]\n    if len(word) % 2 == 0:\n        print('i am here')\n        if word[:int(len(word)\/2)] == word[int(len(word)\/2) : len(word)]:\n            result = 'YES'\n    else:\n        print('i am no here')\n        result = 'NO'\n    sys.stdout.write(str(result) + '\\n')\n\n\n\n\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t= int(input())\nmySet = set()\nwhile t!=0:\n    tr = False\n    s = input()\n    mySet.update(s.split())\n    if len(s)%2==0:\n        for e in mySet:\n            if s.split().count(e)%2>0:\n                print(\"NO\")\n                tr=False\n                break;\n            else:\n                tr=True\n        if tr == True:\n            print(\"YES\")\n    else:\n        print(\"NO\")\n    \n    t-=1"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nBREAK_OUT_FOR = False \n\nfor i in range(0,n):\n    two_words = input()\n    if len(two_words) % 2 == 1:\n        print(\"NO\")\n    else:\n        size_two_words = int(len(two_words)\/2)\n        print(size_two_words)\n        for j in range(0,size_two_words):\n            if two_words[j] != two_words[j+size_two_words]:\n                BREAK_OUT_FOR = True\n                break\n                \n        if BREAK_OUT_FOR:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n        BREAK_OUT_FOR = False"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for t in range(int(input())):\n                                 s=input()\n                                 flag=0\n                                                                  \n                                 if len(s)%2==0:\n                                                                  for i in range(len(s)\/\/2):\n                                                                                                   if s[i]==s[i+len(s)\/\/2]:\n                                                                                                                                    flag=1\n                                                                 \n                                 if flag==1:\n                                                                  print(\"YES\")\n                                 else:\n                                                                  print(\"NO\")\n                                                                  "},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor _ in range(n):\n\tinputs = str(input())\ncount = 0\nwhile count != n:\n    count += 1\n    list1 = []\n    list1[:0] = inputs\n    length = len(list1)\n    if (length % 2) == 0 and length != 1:\n        middle_index = length \/\/ 2\n        first_half = list1[:middle_index]\n        second_half = list1[middle_index:]\n        if first_half == second_half:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for t in range(int(input())):\n    s=str(input())\n    if(len(s)%2==0 and s[0]==s[len(s)\/\/2]):\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n\n    def solve(arr):\n        for r in arr:\n            if r % 2 != 0:\n                return False\n        return True\n\n\n    stack = []\n    n = input() + \" \"\n    value = \"\"\n    for i in range(len(n) - 1):\n        value = value + n[i]\n        if n[i] != n[i + 1]:\n            stack.append(value)\n            value = \"\"\n\n    count_value = []\n    print(stack)\n    for j in stack:\n        count_value.append(stack.count(j))\n\n    if len(stack) == 1 and len(stack[0]) % 2 == 0:\n        print(\"YES\")\n    elif solve(count_value):\n        print(\"YES\")\n    elif not solve(count_value):\n        print(\"NO\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n\n    def solve(arr):\n        for r in arr:\n            if r % 2 != 0:\n                return False\n        return True\n\n\n    stack = []\n    n = input() + \" \"\n    value = \"\"\n    for i in range(len(n) - 1):\n        value = value + n[i]\n        if n[i] != n[i + 1]:\n            stack.append(value)\n            value = \"\"\n\n    count_value = []\n\n    for j in stack:\n        count_value.append(stack.count(j))\n\n    if len(stack) == 1 and len(stack[0]) % 2 == 0:\n        print(\"YES\")\n    elif solve(count_value):\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# Link:\n# https:\/\/codeforces.com\/problemset\/problem\/1619\/A\n\ndef is_square_string(string: str):\n    result = False\n    length = len(string)\n\n    # length must be divisible by 2\n    if length%2 == 0:\n        # split the string in half\n        string1 = string[:length\/2]\n        string2 = string[length\/2:]\n\n        # check if they are equal\n        if string1 == string2:\n            result = True\n\n    return result\n\ninput_string = input()\ninputs = [input_string.splitlines()][1:]\n\nfor string in inputs:\n    if is_square_string(string):\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n    s = input()\n    n = len(s)\n    if s[0:(n\/\/2)-1]==s[n\/\/2:n-1] and n%2==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a=int(input())\nfor i in range(a):\n    b=input()\n    if len(b)%2!=0:\n        print(\"NO\")\n        quit()\n    else:\n        c=len(b)\/\/2\n        if b[:c]==b[c:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    st=input()\n    s=''\n    c=0\n    for i in range(len(st)):\n        s=s+st[i]\n        if(st.count(s)==2):\n            c=c+1\n            break\n    if(c==0):\n        print(\"NO\")\n    else:\n        print(\"YES\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\n\narr = []\nfor i in range(n):\n    arr.append(input())\n\nfor st in arr:\n    l = len(st)\n    if l % 2 == 0:\n        print(st[0:l\/\/2] , st[l\/\/2:])\n        if st[:l\/\/2] == st[l\/\/2:]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    s=input()\n    s=s.split()\n    m=len(s)\n    if 2*len(set(s))==m:\n        print(\"YES\")\n    else:\n        print(\"NO\")"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\ns = input()\n\nfor i in range(0, t):\n    l = len(s)\n    if l%2 == 0:\n        d = int(l\/2)\n        s1 = s[:d]\n        s2 = s[d:]\n        if s1 == s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n"},{"Name":"1619_A. Square String?","Difficulty":"A","Description":"A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def squarestring(strg):\n    if len(strg)%2!=0:\n        return False\n    mid = len(strg)\/\/2\n    return strg[:mid] == strg[mid:]"},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"\n\nfor i in range(int(input())):\n\tn=int(input())\n\n\tcount=[0]\n\n\tif n==1:\n\t\tprint(1)\n\telse:\n\t\tfor i in range(1,n):\n\n\t\t\tif i*i>n:\n\t\t\t\tbreak\n\n\t\t\tif i*i<=n:\n\t\t\t\tcount.append(i*i)\n\t\t\tif i*i*i<=n:\n\t\t\t\tcount.append(i*i*i)\n\t\t\telse:\n\t\t\t\tpass\n\n\t\tprint(len(set(count))-1)\n\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    i = 1\n    res = []\n    while (i*i)<=n:\n        res.append(i*i)\n        i = i+1\n    i = 1\n    while (i*i*i)<=n:\n        res.append(i*i*i)\n        i = i+1\n    \n    result = set(res)\n    count = 0\n    for i in result:\n        if i<=n:\n            count += 1\n\n    print(count)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a = int(input()) + 0.99\n    print(int(a ** 0.5) + int(a ** (1 \/ 3)) - int(a ** (1 \/ 6)))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n  n = int(input())\n  l = list()\n  x = 2\n  summa = 1\n  square = x**2\n  while square <= n:\n    cube = x**3\n    if cube <= n:\n      l.append(cube)\n      summa += 1\n    if len(l) > 0:\n      if square != l[0]:\n        summa += 1\n      else:\n        l.remove(square)\n    else:\n      summa += 1\n    x += 1\n    square = x**2\n    while len(l) > 0 and square > l[0]:\n      l.pop(0)\n  print(summa)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\ndef check(n):\n    if str(n).split(\".\")[1][:4]==\"9999\":\n        return int(n)+1 \n    else:\n        return int(n)\nfor _ in range(int(input())):\n    n=int(input())\n    itwo=0\n    ithree=0\n    isix=0\n    true=True\n    while(true):\n        if itwo*itwo>n:\n            itwo-=1\n            break\n        itwo+=1\n    while(true):\n        if ithree*ithree*ithree>n:\n            ithree-=1\n            break\n        ithree+=1\n    while(true):\n        if isix*isix*isix*isix*isix*isix>n:\n            isix-=1\n            break\n        isix+=1\n    print(itwo+ithree-isix)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"def count(a):\n    counter = 1\n    for i in range(2, a):\n        square = i ** 2\n        cube = i ** 3\n        sixth = i ** 6\n        if square <= a:\n            counter += 1\n        if cube <= a:\n            counter += 1\n        if sixth <= a:\n            counter -= 1\n        if square > a:\n            break\n    return counter\n\n\nt = int(input())\nfor i in range(t):\n    a = int(input())\n    print(count(a))\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\nT=int(input())\nfor t in range(T):\n    n=int(input())\n    sq=int(math.sqrt(n))\n    cb=int(n**(1\/3))\n    sqcb=int(n**(1\/6))\n    if (sq+1)**2==n:\n        sq+=1\n    if (cb+1)**3==n:\n        cb+=1\n    if (sqcb+1)**6==n:\n        sqcb+=1\n    print(sq+cb-sqcb)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    ans = defaultdict(int)\n    j = 1\n    while j**2<=n:\n        ans[j**2]+=1\n        j+=1\n    i = 1\n    while i**3<=n:\n        ans[i**3]+=1\n        i+=1\n    print(len(ans))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\n\nt = int(input())\n\nfor _ in range(t):\n  n = int(input())\n  sqrt = int(n ** 0.5)\n  res = 1\n  used = set()\n  for num in range(2, sqrt + 1):\n    if num ** 3 <= n:\n      used.add(num ** 3)\n      res += 1\n    if num ** 2 not in used and num ** 2 <= n:\n      used.add(num ** 2)\n      res += 1\n  print(res) ","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())+.5\n    print(int(n**(1\/2))+int(n**(1\/3))-int(n**(1\/6)))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    x = int(input())\n    l = [0]\n    for i in range(1, x):\n        if i*i > x:\n            break\n        if i*i <= x:\n            l.append(i*i)\n        if i*i*i <= x:\n            l.append(i*i*i)\n        else:\n            pass\n    m = set(l)\n    if x == 1:\n        print(1)\n    else:\n        print(len(m)-1)\n\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    a = int(input())\n    count = [1]\n    for i in range(2, a,  1):\n        \n        if i**2 <= a:\n            count.append(i**2)\n        else:\n            break\n        if i**3 <= a:\n            count.append(i**3)\n            \n    count = set(count)\n    print(len(count))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\nimport math\ni = 0\nwhile i<a:\n    b = int(input())\n    s = int(b**(1\/2))\n    p = int(b**(1\/3))\n    k = int(b**(1\/6))\n    if (s+1)**2==b:\n        s=s+1\n    if (p+1)**3==b:\n        p=p+1\n    if (k+1)**6==b:\n        k=k+1\n    print(s+p-k)\n    i=i+1\n\n\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    x=1\n    c=0\n    while(x*x<=n):\n        x+=1\n        c+=1\n    x=1\n    while(x*x*x<=n):\n        x+=1\n        c+=1\n    x=1\n    c1=0\n    while(x**6<=n):\n        x+=1\n        c1+=1\n    print(c-c1)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"\ncases = int(input())\n\n\n\nfor i in range(cases):\n    numbers = {1}\n    variable = 2\n    number = int(input())\n    while True and number != 1:    \n        if variable**2 <= number:\n            numbers.add(variable**2)\n        else:\n            break\n        if variable**3 <= number:\n            numbers.add((variable**3))  \n        variable += 1\n    print(len(numbers))\n\n                \n        \n            \n            \n        \n\n    \n    \n    \n    \n    \n        \n\n    \n    \n    \n    \n    \n    \n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"\nimport sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = set()\n    for i in range(1, n+1):\n        if i**2>n:\n            break\n        elif i**3 <= n:\n            a.add(i**3)\n        a.add(i**2)\n    print(len(a))\n\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    n = int(input())\n    a = int(n**0.5)\n    b = int(n**0.3333333333334)\n    c = int(n**0.1666666666667)\n    print(a+b-c)\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    count=0\n    count+=int(math.sqrt(n))\n    x=math.ceil(n**(1\/3))\n    if x*x*x>n:\n        x=x-1\n    for i in range(1,int(x+1)):\n        x=i*i*i\n        if math.sqrt(x).is_integer():\n            count+=0\n        else:\n            count+=1\n    print(count)\n\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"from math import ceil\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n>1:\n        a = [1]\n        for i in range(2,ceil(n**0.5+1)):\n            if i**2<=n:\n                a.append(i**2)\n            if i**3<=n:\n                a.append(i**3)\n        print(len(set(a)))\n    else:\n        print(1)\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n=int(input())\n    if n==1:\n        print(1)\n        continue\n    no_s=math.floor(n**(1\/2))\n    if int(round(n ** (1. \/ 3))) ** 3 == n:\n        no_c=int(round(n ** (1. \/ 3)))\n    else:\n        no_c=math.floor(n**(1\/3))\n    #print(no_s,no_c)\n    ans=no_s+no_c\n    for i in range(1,no_c+1):\n        if (i**3)<=no_s:\n            ans-=1\n    print(ans)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    c = int(round(n**(1\/3),0))\n    s = int(round(n**(1\/2),0))\n    lc=ls=[]\n    for i in range(1,c+1):\n        lc.append(i**3)\n    for i in range(1,s+1):\n        ls.append(i**2)\n    a = [i for i in lc if i>n]\n    b = [i for i in ls if i>n]\n    a=set(a)\n    b=set(b)\n    lc=set(lc)\n    lc=lc.difference(a)\n    ls=set(ls)\n    ls=ls.difference(b)\n    k=lc.union(ls)\n    print(len(k))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"for n in[*map(int,open(0))][1:]:n+=.5;print(int(n**.5)+int(n**(1\/3))-int(n**(1\/6)))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\nfor i in range(int(input())):\n    a = set()\n    num = int(input())\n    for j in range(1, int(math.sqrt(num)) + 1):\n        if j ** 2 <= num:\n            a.add(j ** 2)\n        if j ** 3 <= num:\n            a.add(j ** 3)\n    print(len(a))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\nn=int(input())\nfor i in range(n):\n    x=int(input())\n    c=0\n    for j in range(1,x):\n        if j**2<=x:\n            c+=1\n        if j**3<=x and j!=1 and not math.sqrt(j**3).is_integer():\n            c+=1\n        if j**2>x:\n            break\n    if c==0:\n        print(1)\n    else:\n        print(c)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n  n = int(input())\n  seen = set()\n  for i in range(1, 10 ** 5):\n    val = i ** 2\n    if val > n:\n      break\n    seen.add(val)\n  for i in range(1, 10 ** 3 + 2):\n    val = i ** 3\n    if val > n:\n      break\n    seen.add(val)\n  print(len(seen))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n\tn = int(input()) \n\tn+= 0.5\n\tt1 = int(n**(1\/2))\n\tt2 = int(n**(1\/3))\t\n\tt3 = int(n**(1\/6))\n\n\tprint(t1+t2-t3)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\nfor _ in range(n):\n    num = int(input())\n    arr = []\n    for i in range(1,int(num**.5)+1):\n        if i ** 2<=num:\n            arr.append(i ** 2)\n        if i ** 3<=num:\n            arr.append(i ** 3)\n\n    print(len(set(arr)))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"x=0\nfor _ in range(int(input())):\n    a=int(input())\n    s=[]\n    i=0\n    while True:\n        i+=1\n        if i**2<=a:\n            s.append(i*i)\n        else:\n            break\n        if i**3<=a: \n            s.append(i**3)\n    print(len(set(s)))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    d={}\n    n=int(input())\n    x=int(n**(1\/2))\n    k=n**(1\/3)\n    h=int(k)+1\n    if int(k)==k:\n        y=int(k)\n    elif h*h*h==n:\n        y=h\n    else:\n        y=int(k)\n    for i in range(1,x+1):\n        d[i**2]=1\n    for j in range(1,y+1):\n        if j**3 not in d.keys():\n            d[j**3]=1\n    print(len(d))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n=int(input())\n    n=n+0.99\n    a=int(n**(1\/2))\n    b=int(n**(1\/3))\n    c=int(n**(1\/6))\n    print(a+b-c)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\nn=int(input())\nfor i in range(n):\n    num = int(input())\n    sqrt = round(num**0.5)\n    if sqrt**2>num:\n        sqrt-=1\n    cbrt = round(num**(1\/3))\n    if cbrt**3>num:\n        cbrt-=1\n    sixrt = round(num**(1\/6))\n    if sixrt**6>num:\n        sixrt-=1\n    ans = sqrt + cbrt - sixrt\n    print(ans)\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"# square or a cube\n# simple dp\nfrom bisect import bisect_left\n\n# squares and cubes till int(1e9)\ndp = set()\n\ndef generate_items():\n    global dp\n    \n    i = 1\n    while i**2 <= int(1e9):\n        dp.add(i**2)\n        dp.add(i**3)\n        i += 1\n        \n\ndef answer(x):\n    if x in dp:\n        return dp.index(x)+1\n    else:\n        return bisect_left(dp, x)\n\ngenerate_items()\ndp = sorted(list(dp))\nfor _ in range(int(input())):\n    print(answer(int(input())))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\n\ntst = int(input())\nresult = []\n\nfor i in range(tst):\n    n = int(input())\n    x = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if i * i <= n:\n            x += 1\n        if i * i * i <= n:\n            x += 1\n        if i * i * i * i * i * i <= n:\n            x -= 1\n\n    result.append(x)\n\n\n\n\n\nfor i in range(tst):\n    print(result[i])\n\n\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"from itertools import combinations\nimport time\n# command eval and join\n\nn = []\n\nfor i in range(1,31623):\n    n.append(i**2)\nfor j in range(1,1001):\n    n.append(j**3)\na = list(set(n))\na.sort()\np = int(input())\nl = []\nfor i in range(p):\n    y = int(input())\n    l.append(y)\n\ng = []\nfor i in l:\n    c = 0\n    for j in a:\n        if j <= i:\n            c+=1\n    g.append(c)\n\nfor i in g:\n    print(i)\n\n\n\n\n\n\n\n\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = int(pow(n, 1\/2))\n    if (a+1)**2 == n:\n        a += 1\n    b = int(pow(n, 1\/3))\n    if (b+1)**3 == n:\n        b += 1\n    c = int(pow(n, 1\/6))\n    if (c+1)**6 == n:\n        c += 1\n    print(a+b-c)\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nT = int(input())\nfor _ in range(T):\n    num = int(input())\n    count = 0\n    x = 1\n    y = set()\n    while x*x <= num:\n        y.add(x*x)\n        x += 1\n    x = 1\n    while x**3 <= num:\n        y.add(x**3)\n        x += 1\n\n\n    print(len(y))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    ans = 1\n    arr = set()\n    # x = int(math.sqrt(n))\n    # y = int(n**(1\/3))-1\n    # print(x+y)\n    i = 2\n    while(True):\n        sq = i*i\n        cu = i*i*i\n        if(sq<=n):\n            if(sq not in arr):\n                ans+=1\n                arr.add(sq)\n            if(cu<=n):\n                if(cu not in arr):\n                    ans+=1\n                    arr.add(cu)            \n        else:\n            break\n        i+=1\n    print(ans)\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile(t):\n    t-= 1\n    s = int(input())\n    sq=cub= scu = 0\n    import math\n    sq = math.ceil(s**(1\/2))\n    if(sq*sq!=s):\n        sq-= 1\n    cub = math.ceil(s**(1\/3))\n    if(cub**3!= s):\n        cub-= 1\n    scu = math.ceil(s**(1\/6))\n    if(scu**6!= s):\n        scu-= 1\n    print(sq+cub- scu)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    for i in range(int(n ** .5) + 1):\n        if i * i <= n:\n            ans += 1\n        if i * i * i <= n:\n            ans += 1\n        if i * i * i <= n and int((i * i * i) ** .5) == (i * i * i) ** .5: \n            ans -= 1\n    print(ans - 1)\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n  n = int(input())\n  seen = set()\n  for i in range(1, 10 ** 5):\n    if i ** 2 <= n:\n      seen.add(i ** 2)\n    else:\n      break\n    if i ** 3 <= n:\n      seen.add(i ** 3)\n  print(len(seen))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor _ in range(n):\n    m = int(input())\n    ans = set()\n    ans.add(1)\n    k = 2\n    cube = True\n    while k <= m**(1\/2):\n        if k **3 <= m:\n            ans.add(k**3)\n            ans.add(k**2)\n        elif k ** 2 <= m:\n            ans.add(k**2)\n        k += 1\n    print(len(ans))","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"import bisect\n#pre\nX = [1]\nfor i in range(40000):\n    for j in range(2,4):\n        if i ** j > 10 ** 9:\n            break\n        X.append(i ** j)\nX = list(set(X))\nX.sort()\nt = int(input())\nfor i in range(t):\n    A = int(input())\n    c = bisect.bisect_right(X,A)\n    print(c-1)\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=int(n**0.5)\n    b=int(n**(1.\/3))\n    c=int(n**(1\/6))\n    if (a+1)**2<=n:\n        a+=1\n    if (b+1)**3<=n:\n        b+=1\n    if (c+1)**6<=n:\n        c+=1\n    print(a+b-c)","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"def temp(a, b):\n    counter = 1\n\n    while counter ** a <= b:\n        counter += 1\n    return counter - 1\n\n\ndef b(n):\n    return temp(2, n) + temp(3, n) - temp(6, n)\n\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n\n    print(b(n))\n","Incorrect Solution":null},{"Name":"1619_B. Squares and Cubes","Difficulty":"B","Description":"Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n    initialinput = int(input())\n    nums = []\n    cbn = 1\n    sqrn = 2\n    while cbn ** 3 <= initialinput:\n        nums.append(cbn ** 3 )\n        cbn += 1\n    while sqrn ** 2 <= initialinput:\n        nums.append(sqrn ** 2)\n        sqrn += 1\n\n    print(len(set(nums)))\n\n\n\n\n\n\n\n\n","Incorrect Solution":null}]
[{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"\nt=int(input())\nfor _ in range(t):\n    P=int(input())\n    dic={}\n    for i in range(2,P+1):\n        rem=P%i\n        brk=False\n        # print(i,rem,dic)\n        try:\n            if dic[rem]:\n                print(dic[rem],i)\n                brk=True\n        \n        except KeyError:\n            dic[rem]=i\n        \n        if brk:break\n    \n    ","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"number = int(input())\nfor i in range(number):\n    chislo = int(input())\n    if chislo%2 == 1:\n        print(2, chislo - 1)\n    else:\n        if chislo %3 == 1:\n            print(3, chislo-1)\n        elif chislo%3 == 2:\n            print(3, chislo - 2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\nt=int(input())\nfor o in range(t):\n    p=int(input())\n    print(2,p-1)\n        ","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nwhile t:\n    \n    t-=1\n    \n    n = int(input())\n    \n    print(2, n-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def func(n):\n    a = 0\n    b = 0\n    i = 2\n    list = []\n    while i < n:\n        m = n % i\n        if (m in list):\n            return [list.index(m) + 2, i]\n        list.append(m)\n        i += 1\n\nt = int(input())\nbaba = []\nfor j in range(t):\n    baba.append(func(int(input())))\nfor r in baba:\n    print(r[0], r[1])","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"\nk=int(input())\n\n\nwhile k > 0:\n \n n=int(input())\n if n==5:\n  print(\"2 4\")\n elif n%2==0:\n  rest=int(n\/2)\n  print(\"2 \" + str(rest))\n else:\n  n-=1\n  rest=int(n\/2)\n  print(\"2 \" + str(rest))\n k=k-1","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\nfor _ in range(int(input())):\n    n = int(input())\n    num = n - 1\n    if num % 2 == 0:\n        print(num\/\/2,num)\n    else:\n        num = num - 1","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    p = int(input())\n    r = p % 2\n    if r == 0:\n        print(f'{2} {p}')\n    else:\n        print(f'{2} {p - 1}')\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(0,t):\n        n=int(input())\n        if n==5:\n                print(str(2) + \" \"+str(4))\n        else:\n                m=(n-1)\/\/2\n                print(str(2) + \" \"+str(m))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"\n\n\n\n\n\n\n\n\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    if p == 5:\n        print(2,4)\n    else:\n        print(2,p\/\/2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(f\"2 {n - 1}\")\n\n\nif __name__ == \"__main__\":\n    main()\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    number = int(input())\n    if number % 2 == 0:\n        print(2, number)\n    else:\n        print(2, number - 1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n    p = int(input())\n    p -= 1\n    print(2, p)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    print(\"2 \"+str(int(input())-1))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(2,\" \",n-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if(n%2==1):\n        print((n-1)\/\/2,n-1)\n    else:\n        print(n\/\/2,2)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput=sys.stdin.readline\n\nfor _ in range(int(input())):\n     n=int(input())\n     print((n-1)\/\/2, n-1)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    print(2,int(input())-1,sep=\" \")","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor o in range(t):\n    n = int(input())\n    mods = []\n    divs = []\n    for i in range(2, n + 1):\n        if n % i in mods:\n            print(divs[mods.index(n % i)], i)\n            break\n        mods += [n % i]\n        divs += [i]\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    p = int(input())\n    print(2,p-1,sep=\" \")","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"num = int(input())\nvar1 = 0\nvar2 = 1\nfor x in range(num):\n    test = int(input())\n    a = test\/\/2\n    b = a*2 \n    print(a,b)\n\n\n\n\n\n\n\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n  x = int(input())\n  if x <= 5:\n    print(2, 4)\n  else:\n    print(2, x\/\/2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nwhile n!=0:\n    n-=1\n    m = int(input())\n    if m%2==0:\n        print(2,int(m\/2))\n        print(end=' ')\n    else:\n        print(2,m-1)\n        print(end=' ')\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def f():\n    p=int(input())\n    a=p\/\/2; b=a+a\n    print(a,b)\n    \n\n\nt=int(input())\nfor i in range(t):\n    f()\n      \n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    a = int(input())\n    print(2, a-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.buffer.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print(2,n-1)\n  \n   \n        \n         \n            \n                \n        \n    \n    \n        \n        ","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n\tn = int(input())\n\tn-=1\n\tprint(\"%d %d\" %(2 , n))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"from math import ceil\nfor _ in range(int(input())):\n\tp = int(input())\n\tx = ceil(p\/2)-1\n\tprint(*sorted([p-1,p-x-1]))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def bases(p):\n    \n    for i in range(2,p+1):\n        temp=p%i\n        tmp1=p\/\/i\n        if tmp1!=i:\n            if p%(tmp1)==temp:\n                return i,tmp1\n            continue\n        else:\n            if p%(tmp1*i)==temp and tmp1*i<=p:\n                return i,tmp1*i\n            continue\n        \nfor _ in range(int(input())):\n    p=int(input())\n    a,b=bases(p)\n    print(a,b)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    P = int(input())\n    print(2, P-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print('2 ',end='')\n    print(n-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor j in range(t):\n    p = int(input())\n    if p == 5:\n        a = 2\n        b = 4\n    else:\n        a1 = p\/\/2\n        b1 = p\/\/a1\n        a = min(a1,b1)\n        b = max(a1,b1)\n    print(a,b)\n    ","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(0,t):\n\tp = int(input())\n\tprint(2,p-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(0,int(input())):\n    p=int(input())\n    a=(p-1)\/\/2\n    b=p-1\n    print(a,b)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"\n\nT = int(input())\n\nwhile(T > 0):\n    T-=1\n    a = int(input())\n\n    x = a-1\n\n    ans1 = 2;\n\n    print (ans1, \" \", x)\n\n\n\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    #n, k = list(map(int, input().split())) \n    print(2, n-1)\n\n        \n    #a = list(map(int, input().split()))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput=sys.stdin.readline\n\nt=int(input())\nfor _ in range(t):\n    p=int(input())\n    print(2,p-1)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nl = []\nfor _ in range(n):\n    l.append(int(input()))\nfor i in l:\n    for j in range(2, i+1):\n        if i \/\/ j > 1:\n            print(str(j) + ' ' + str(j * (i \/\/ j)))\n            break\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2, (n-1))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    print(2,int(input())-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n%2==0:\n        print(2, n)\n    else:\n        print(2, n-1)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if (n & 1):\n        print(n \/\/ 2, n - 1)\n    else:\n        print(n \/\/ 2 - 1, n - 1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin ,stdout\nfrom os import path\nrd = lambda:stdin.readline().strip()\nwr = stdout.write\nif(path.exists('input.txt')):\n    stdin = open(\"input.txt\",\"r\")\nimport time ,math\n#why sorting suffix array although we go through the whole array any way till we find the pattern\n#------------------------------------=\nfor _ in range(int(rd())):\n\tx = int(rd())\n\tif x\/\/2 == 2 :\n\t\tprint(2,4)\n\telse:\n\t\tprint(2, x\/\/2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\nfor i in range(0, n):\n    p = int(input())\n    print(2, p - 1)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    # a=list(map(int,input().split()))\n    n-=1\n\n    print(2,n)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"res = int(input())\nfor i in range(res):\n    \n    a = int(input())\n    print(2,a-1,end=\" \")\n                \n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"from sys import *\ndef inputs(): return stdin.readline()\nfor _ in range(int(inputs())):\n    n=int(inputs())\n    if n==5:\n        print(2,4)\n        continue\n    print(2,n\/\/2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import collections as cc\nimport bisect as bi\nimport heapq as hp\nimport math as mt\nimport itertools as it\nimport sys\nimport io, os\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    p, = I()\n    print(2,p-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"\"\"\"\n ____  __.        .__                         \n|    |\/ _|_____   |  |  ___.__. __ __   ____  \n|      <  \\__  \\  |  | <   |  ||  |  \\ \/ ___\\ \n|    |  \\  \/ __ \\_|  |__\\___  ||  |  \/\/ \/_\/  >\n|____|__ \\(____  \/|____\/\/ ____||____\/ \\___  \/ \n        \\\/     \\\/       \\\/           \/_____\/ \n\"\"\"\nfor _ in range(int(input())):\n    n = int(input())\n    print(2,n-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"\"\"\"\nx + a*c1 = x + b*c2\n\nif there is a number such that a*b < x and (a+1)b, a(b+1) > x\n\n\n\n\"\"\"\nfrom math import sqrt, floor\nfor _ in range(int(input())):\n    P = int(input())\n    s = floor(sqrt(P))\n    if P>3:  \n        print(s,P-(P%s))\n    else:\n        print(\"-1\")\n    \n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(t):\n    p = int(input())\n    p -= 1\n    print(2,p)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t):\n    n=int(input())-1\n    m=n\/\/2\n    if(m==2):\n        m*=2\n    print(2,m)\n    t-=1","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def fun(n):\n    print(2,n-1)\n\nT = int(input())\n# T=1\nfor i in range(T):\n    n=int(input())\n    # ks= list(map(int, input().split()))  \n    # ls= list(map(int, input().split()))   \n    # print(ls) \n    # st=input()\n    # ts=input()\n    # ls= list(map(int, input().split()))\n    fun(n)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"a=int(input())\nwhile a>0:\n    b=int(input())\n    print(int((b-1)\/2),b-1)\n    \n    a-=1","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    t = int(input())\n    arr = []\n    if t%2==1:\n        print('2',t-1)\n    elif t%2==0:\n        print('2','4')","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    P = int(input())\n    print(2,'',P-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    p = int(input())\n    print(2, p - 1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\na=[]\nfor i in range(n):\n    v=int(input())\n    a.append([2,v-1])\nfor i in range(n):\n    print(str(a[i][0])+' '+str(a[i][1]))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range (int(input())):\n    n = int(input())\n    print(2,n-1)\n        \n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"#  5 4 3 2 2\n\n\n\ndef main():\n    n = int(input())\n    print(2,n-1)\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        main()\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    ab = int(input())\n    print(2,ab-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import sys,os\nfrom math import sqrt\nfrom collections import defaultdict\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\nT=int(input())\nfor i in range(T):\n    n=int(input())\n    if n==3:\n        print()\n    md={}\n    for i in range(2,n):\n        if n%i in md:\n            print(md[n%i],i)\n            break\n        md[n%i]=i\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput=sys.stdin.readline\nfrom collections import defaultdict as dc\nfrom collections import Counter\nfrom bisect import bisect_right, bisect_left,bisect\nimport math\nfrom operator import itemgetter\nfrom heapq import heapify, heappop, heappush\nfor _ in range(int(input())):\n    n=int(input())\n    if n%2==1:\n        print(2,n-1)\n    else:\n        print(2,n\/\/2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def solve(p):\n    ans=[]\n    for i in range(2,p+1):\n        a=p%i\n        for j in range(p,i+1,-1):\n            b=p%j\n            if a==b:\n                ans.append(i)\n                ans.append(j)\n                return ans\nt = int(input())\nfor _ in range(t):\n    p=int(input())\n    ans=solve(p)\n    print(ans[0],ans[1])\n\n            ","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    p=int(input())\n    print(2,p-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    p = int(input())\n    print(str(2) + ' ' + str(p - 1))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nmas = []\ng = []\nfor i in range(n):\n    g = (2, int(input())-1)\n    mas.append(g)\nfor i in range(len(mas)):\n    print(*mas[i])\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    P = int(input())\n    if (P % 2 == 1):\n        print(2, P - 1)\n    else:\n        print(2, P)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for y in range(int(input())):\n    n=int(input())\n    if n==5:\n        print(2,4)\n    else:\n        print(2,(n-1)\/\/2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\n\n\nfor tests in range(t):\n    p=int(input())\n    a=2\n    for b in range(p,a,-1):\n        if p%b==p%a:\n            print(a,b)\n            break","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a = int(input())\n    print(2, a - 1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a=int(input())\n    if a%2==0:\n        print(2, a)\n    else:\n        print(2, a-1)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    p=int(input())\n    if p==5:\n        print(2,4)\n    else:\n        print(2,p\/\/2)\n    # print(p%2,p%(p\/\/2))\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    print(2,int(input())-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"tc = int(input())\nfor _ in range(tc):\n      n = int(input())\n      if n == 5:\n            print('2 4')\n      else:\n            n -= 1\n            b = n \/\/ 2\n            a = 2\n            print(a, b)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    P = int(input())\n    if P%2==0: print(2, P)\n    else: print(2, P-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def func():\n    n = int(input())\n    print(2, n-1)\n\n\ndef main():\n    for i in range(int(input())):\n        func()\n\n\nmain()\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    p = int(input())\n    print(2, p - p % 2)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def f(a):\n\tfor i in range(2,100):\n\t\tfor j in range(2,100):\n\t\t\tif a%i==a%j and i!=j:\n\t\t\t\treturn i,j\nfor _ in range(int(input())):\n\ta=int(input())\n\tprint(*f(a))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"i=int(input())\nwhile i>0:\n    m=int(input())\n    k=int((m-1)\/2)\n    if m==5:\n        print(2,'',4)\n    else:\n        print(2,'',k)\n    i=i-1\n        ","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\nres = [[0,0] for _ in range(T)]\n\nfor i in range(T):\n    P = int(input())\n    res[i][0] = 2; res[i][1] = P - 1\n\n[print(r[0], r[1]) for r in res]\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    P = int(input())\n    if P%2!=0:\n        P-=1\n    print(2,P)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    p = int(input())\n    b = p - 1\n    a = b \/\/ 2\n    print(a, b)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninp = [int(x[:-1]) for x in sys.stdin.readlines()]\nfor i in inp[1:]:\n    print(\"2\"+\" \"+str(i-1))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())\n    print(2,n-1)\n        \n    \n    \n    \n    ","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    P = int(input())\n    if P == 5:\n        print(\"2 4\")\n    else:\n        first = 2\n        second = P - 1\n        print(first, second)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n%2!=0:\n        print(2,n-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"tt=int(input())\nfor i in range(tt):\n\tp=int(input())\n\tif p%2!=0:\n\t\tp-=1\n\tprint(2,p)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    print(2,int(n\/2)*2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in ' '*int(input()):\n    n = int(input())\n    if n > 5: print(2, n\/\/2)\n    else: print(2, 4)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor case in range(t):\n    p=int(input())\n    print(2,p-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def fun(a):\n i=2\n rem=[]\n while i<=a-1:\n  if a%i in rem:\n    k=rem.index(a%i)+2\n    return k,i\n  else:\n   rem.append(a%i)\n  i=i+1\n \nif __name__==\"__main__\":\n t=int(input())\n for j in range(t):\n  n=int(input())\n  res=fun(n)\n  print(res[0],res[1])","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    n = int(input())\n    aa, bb = 2, 3\n    if n%2 != 0:\n        n -= 1\n    print(2, n)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 5:\n        print(2,4)\n    elif n == 17:\n        print(3,5)\n    else:\n        n = n-1\n        print(2,n\/\/2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    p=int(input())\n    print(p\/\/2,2*(p\/\/2))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for s in  range(int(input())):\n    a = int(input())\n    print(2,int(a)-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    p=int(input())\n    print(2,p-1)\n    # print(p%2,p%(p\/\/2))\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor tc in range(t):\n\tn = int(input())\n\tprint(2,n-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t= int(input())\n\nfor a in range(t):\n    b = int(input())\n    print(2,b-1)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for u in range(int(input())):\n    n = int(input())\n    print((n-1)\/\/2, n-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"def main(p):\n    if p % 2 == 0:\n        print(2, p)\n    else:\n        print(2, p-1)\n\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    main(p)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2, n - 1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2, n - 1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"T, = map(int, input().split())\nfor _ in range(T):\n    N, = map(int, input().split())\n    if N%2:\n        print(2, N-1)\n    else:\n        print(2, N)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    p = int(input())\n    print ( (p-1)\/\/2, p-1)\n    ","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if(n==5):print(2,4)\n    else:print(2,n\/\/2)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n % 2==1:\n        print((n-1)\/\/2 ,(n-1))\n    else:\n        print(n\/\/2,n)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin, stdout\nnmbr = lambda : int(input())\nlst = lambda : list(map(int, input().split()))\nfrom random import randint\nfor _ in range(nmbr()):\n    n=nmbr()\n    # n,k=lst()\n    # a=lst()\n    ans=n\/\/2\n    print(ans , ( (2*ans)))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"# Problems are not stop signs, they are guidelines. Robert H. Schuller\n# by : Blue Edge - Create some chaos\n\nfor _ in range(int(input())):\n    n = int(input())\n    if 2==n\/\/2:\n        print(2,4)\n    else:\n        print(2,n\/\/2)\n","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(\"2 \"+str(n-1))","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\ni = 0\nwhile i < t:\n    p = int(input())\n    b = p-1\n    a = b\/\/2\n    print(a,b)\n    \n    i += 1","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    p = int(input())\n    print(2,p-1)","Incorrect Solution":null},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n\n    if n == 5:\n        print(3,4)\n    else:\n        n = n-1\n        print(2,n\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a = int(input())\n    if a%1:\n        print(2, 4)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# Problems are not stop signs, they are guidelines. Robert H. Schuller\n# by : Blue Edge - Create some chaos\n\nfor _ in range(int(input())):\n    n = int(input())\n    print(2,n\/\/2)\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n%2!=0:\n        print(2,2*2)\n    else:\n        print(3,3*2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    t = int(input())\n    arr = []\n    if t%2==1:\n        if t % 4 == 3:\n            print('2','8')\n        else:\n            print('2','4')\n    elif t%2==0:\n        print('2','4')"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    a = int(input())\n    for x in range(2, a-1):\n        for y in range(x+1, a+1):\n            if a % x == a % y:\n                print(x, y)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\"\"\"\n ____  __.        .__                         \n|    |\/ _|_____   |  |  ___.__. __ __   ____  \n|      <  \\__  \\  |  | <   |  ||  |  \\ \/ ___\\ \n|    |  \\  \/ __ \\_|  |__\\___  ||  |  \/\/ \/_\/  >\n|____|__ \\(____  \/|____\/\/ ____||____\/ \\___  \/ \n        \\\/     \\\/       \\\/           \/_____\/ \n\"\"\"\nfor _ in range(int(input())):\n    n = int(input())\n    print(2,4)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"tt=int(input())\nfor i in range(tt):\n\tp=int(input())\n\tfor j in range(2,p):\n\t\ta=j\n\t\tb=a+2\n\t\tif a<b and b<p:\n\t\t\tx = p%a\n\t\t\ty = p%b\n\t\t\tif x == y:\n\t\t\t\tprint(str(a)+\" \"+str(b))\n\t\t\t\tbreak"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n\tn = int(input())\n\tprint(\"%d %d\" %(2 , n\/2))"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def fun(a):\n i=2\n rem=[]\n while i<=a-1:\n  if a%i in rem:\n    k=rem.index(a%i)+2\n    return k,i\n  else:\n   rem.append(a%i)\n  i=i+1\n \nif __name__==\"__main__\":\n t=int(input())\n for j in range(t):\n  n=int(input())\n  res=fun(n)\n  "},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    print(2, 4)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\n\ndef prime(n):\n    i = 2\n    j = 3\n    while i < j:\n        x = n % i\n        while j <= n:\n            y = n % j\n            if x == y:\n                return (i, j)\n            else:\n                j += 1\n\n        i += 1\n\n\nwhile t:\n    t -= 1\n    n = int(input())\n    print(prime(n))\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"chislo = int(input())\nostat = []\nt = 0\nfor i in range(chislo):\n    ostat.append(chislo % (i+2))\nfor k in range (len(ostat)):\n    if t ==1:\n        break\n    for s in range (len(ostat)):\n        if (ostat[k] == ostat[s]) and (k != s) and (ostat[k]  !=0):\n            print (k +2, s +2)\n            t+=1\n            break\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    # a=list(map(int,input().split()))\n    n-=1\n    print(2,n\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"bases = []\nfor _ in range(int(input())):\n    p = int(input())-1\n    print(2,p-1,sep=\" \")"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if(n%2==1):\n        print(n-1)\n        print((n-1)\/\/2)\n    else:\n        print(2)\n        print(n\/\/2)\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for u in range(int(input())):\n    n = int(input())\n    print(n-1, (n-1)\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in ' '*int(input()):\n    p = int(input())\n    print(2, p\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n  prime = int(input())\n  ans = [prime+1,prime+2]\n  print(*ans)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a = int(input())\n    for b in range(2,9):\n        for c in range(2,9):\n            if c!= b: \n                if a%b == a%c:\n                    print(b,c)\n                    break\n        break"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    t = int(input())\n    arr = []\n    if t%2==1:\n        print('2','4')\n    elif t%2==0:\n        print('2','4')\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n\n    if n == 5:\n        print(3,4)\n    elif n == 17:\n        print(3,5)\n    else:\n        n = n-1\n        print(2,n\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    P = int(input())\n    if (P % 2 == 1):\n        print(1, P - 1)\n    else:\n        print(2, P - 2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range (int(input())):\n    n = int(input())\n    print(n+1,(n+1)*2)\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    p=int(input())\n    print(2,p\/\/2)\n    # print(p%2,p%(p\/\/2))\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n=int(input())\n    for i in range(2,n):\n         if n%i:\n             a=n\/\/i\n             b=n\/\/i+2\n             if n%a==n%b:\n                print(a,b,end='')\n                break"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    p = int(input())\n    print(2,p,sep=\" \")"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def fun(a):\n i=2\n rem=[]\n while i<=a-1:\n  if a%i in rem:\n    k=rem.index(a%i)+2\n    return k,i\n  else:\n   rem.append(a%i)\n  i=i+1\n\ninput1= int(input(\"Number of Test Cases\"))\n\nfor i in range(0,input1-1):\n    input2=int(input(\"Enter the Number\"))\n    fun(input2)\n    "},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"tt=int(input())\nfor i in range(tt):\n\tp=int(input())\n\tarr=[]\n\tfor j in range(2,p-1):\n\t\ta=j\n\t\tb=j+2\n\t\tx = p%a\n\t\ty = p%b\n\t\tif x == y:\n\t\t\tarr.append((a,b))\n\tprint(arr[-1])\n\t\t\t"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"{\n \"cells\": [],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n\n    if n == 5:\n        print(3,' ',4)\n    else:\n        n = n-1\n        print(2,' ',n\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# cook your dish here\nfor _ in range(int(input())):\n    n = int(input())\n    num = n - 1\n    if num % 2 == 0:\n        print(num,num\/\/2)\n    else:\n        num = num - 1"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    p = int(input())\n    print(3, 3 * (p \/\/ 3))\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import stdin, stdout\nnmbr = lambda : int(input())\nlst = lambda : list(map(int, input().split()))\n\nfor _ in range(nmbr()):\n    n=nmbr()\n    # n,k=lst()\n    # a=lst()\n    p=2\n    while 2*p<=n:\n        if n%p==n%(2*p):\n            ans=p\n            break\n        p*=2\n    print(ans , 2*ans)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n    p = int(input())\n    p -= 1\n    print(p, p \/\/ 2)\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.buffer.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    temp1=n%2\n    temp2=n%3\n    temp3=n%4\n    if temp1==temp3:\n        print(2,4)\n    elif temp1==temp2:\n        print(2,3)\n        \n   \n        \n         \n            \n                \n        \n    \n    \n        \n        "},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from itertools import combinations,takewhile\nfor _ in range(int(input())):\n    p = int(input())\n    def comp(x):\n        return (p%x[0]!=p%x[1])\n    comb = combinations(range(2,p+1),2)\n    #print(comb)\n    #print(*comb[len(takewhile(lambda x:p%x[0]!=p%x[1],comb))],sep=\" \")\n    print(takewhile(comp,comb))"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys,os\nfrom math import sqrt\nfrom collections import defaultdict\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\nT=int(input())\nfor i in range(T):\n    n=int(input())\n    if n==1:\n        print(2,3)\n    else:\n        print(n,n*2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n    p = int(input())\n    p -= 1\n    print(2, p \/\/ 2)\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    p = int(input())\n    p -= 1\n    print(2,p\/\/2)\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def func():\n    n = int(input())\n    print(2, n-2)\n\n\ndef main():\n    for i in range(int(input())):\n        func()\n\n\nmain()\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def fun(a):\n i=2\n rem=[]\n while i<=a-1:\n  if a%i in rem:\n    k=rem.index(a%i)+2\n    return k,i\n  else:\n   rem.append(a%i)\n  i=i+1\n \nif __name__==\"__main__\":\n t=int(input())\n for j in range(t):\n  n=int(input())\n  res=fun(n)\n  print(res)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n % 2==1:\n        print((n-1) ,(n-1)\/\/2)\n    else:\n        print(n,n\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(n+1,n+2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a = int(input())\n\n    print(2, a\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(0,t):\n\tp = int(input())\n\tprint(2,p+2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"res = int(input())\nfor i in range(res):\n    l = list(map(int, input().split()))\n    #print(l)\n    #flag = False\n    for a in range(2,l[0]\/\/2):\n        for b in range(a+2,l[0]+1):\n        #for b in range(a+2,l[0]+1,2):\n            #print(a,b)\n            if l[0]%a ==l[0]%b:\n                print(a,b,end=\" \")\n                \n                break\n        break"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a=int(input())\nwhile a>0:\n    b=int(input())\n    print((b-1)\/2,b-1,end=\" \")\n    print(\"\")\n    \n    a-=1"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def fun(a):\n i=2\n rem=[]\n while i<=a-1:\n  if a%i in rem:\n    k=rem.index(a%i)+2\n    return k,i\n  else:\n   rem.append(a%i)\n  i=i+1\n\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    print(3,int(input())-2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    p = int(input())\n    a, b = -1, -1\n    for i in range(1, p):\n        if p % i == p % (i+2):\n            a = i\n            b = i+2\n            break\n\n    print(f'{a} {b}')"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nt=int(input())\nfor _ in range(t):\n    P=int(input())\n    dic={}\n    for i in range(2,P+1):\n        rem=P%i\n        brk=False\n        # print(i,rem,dic)\n        try:\n            if dic[rem]:\n                # print(dic[rem],i)\n                brk=True\n        \n        except KeyError:\n            dic[rem]=i\n        \n        if brk:break\n    \n    "},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from itertools import combinations,takewhile\nfor _ in range(int(input())):\n    p = int(input())\n    def comp(x):\n        return (p%x[0]!=p%x[1])\n    comb = combinations(range(2,p+1),2)\n    print(tuple(comb))\n    #print(*comb[len(takewhile(lambda x:p%x[0]!=p%x[1],comb))],sep=\" \")\n    print(tuple(takewhile(comp,comb)))"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a = int(input())\n    for b in range(2,a):\n        for c in range(2,a):\n            if c!= b: \n                if a%b == a%c:\n                    print(b,c)\n                    break"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    a = int(input())\n    for x in range(2, a):\n        for y in range(x+1, a+1):\n            if a % x == a % y:\n                print(x, y)\n                break"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from itertools import combinations\nbases = []\nfor _ in range(int(input())):\n    p = int(input())-1\n    print('p-1')\n    print(p)\n    for i in range(2,p+1):\n        if(len(bases)==2):\n            print(*bases,sep=\" \")\n            break\n        if (p%i==0):\n            print('i')\n            print(i)\n            bases.append(i)\n    else:\n        print(*bases,sep=\" \")\n    bases.clear()"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    p = int(input())\n    print(p - 1, 2)\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"num = int(input())\nfor x in range(num):\n    test = int(input())\n    print(test,test)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    print(2,n)\n        \n    \n    \n    \n    "},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import *\ndef inputs(): return stdin.readline()\nfor _ in range(int(inputs())):\n    n=int(inputs())\n    print(2,n\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from itertools import combinations,takewhile\nfor _ in range(int(input())):\n    p = int(input())\n    def comp(x):\n        return (p%x[0]!=p%x[1])\n    comb = combinations(range(2,p+1),2)\n    #print(comb)\n    #print(*comb[len(takewhile(lambda x:p%x[0]!=p%x[1],comb))],sep=\" \")\n    print(tuple(takewhile(comp,comb)))"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    p = int(input())\n    print('2 4')\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if (n & 1):\n        print(n - 1, n \/\/ 2)\n    else:\n        print(n - 1, n \/\/ 2 - 1)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    a = int(input())\n    for x in range(2, a):\n        for y in range(x+1, a):\n            if a % x == a % y:\n                print(x, y)\n                break"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor m in range(int(input())) :\n    \n    #n, k = list(map(int, input().split()))                                   \n    #a.sort()\n    n = int(input())\n    #arr = {} \n   # a = list(map(int, input().split()))                                   \n    if n ==2 or n==3:\n        print(1,2)\n    else:\n        \n        print((n-1)\/\/2, 2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor o in range(t):\n    n = int(input())\n    print(2, 4)\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from math import ceil\nfor _ in range(int(input())):\n\tp = int(input())\n\tx = ceil(p\/2)-1\n\tprint(p-1,p-x-1)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput=sys.stdin.readline\nfrom collections import defaultdict as dc\nfrom collections import Counter\nfrom bisect import bisect_right, bisect_left,bisect\nimport math\nfrom operator import itemgetter\nfrom heapq import heapify, heappop, heappush\nfor _ in range(int(input())):\n    n=int(input())\n    print(2,4)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.buffer.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    temp1=n%2\n    temp2=n%3\n    temp3=n%4\n    if temp1==temp3:\n        print(2,4)\n    elif temp1==temp3:\n        print(2,3)\n        \n   \n        \n         \n            \n                \n        \n    \n    \n        \n        "},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from itertools import combinations,takewhile\nfor _ in range(int(input())):\n    p = int(input())\n    def comp(x):\n        return (p%x[0]!=p%x[1])\n    comb = tuple(combinations(range(2,p+1),2))\n    #print(tuple(comb))\n    #print(*comb[len(takewhile(lambda x:p%x[0]!=p%x[1],comb))],sep=\" \")\n    print(comb[len(tuple(takewhile(comp,comb)))])"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\nres = [[0,0] for _ in range(T)]\n\nfor i in range(T):\n    P = int(input())\n    res[i][0] = 2; res[i][1] = P \/\/ 2\n\n[print(r[0], r[1]) for r in res]\n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor m in range(int(input())) :\n    \n    #n, k = list(map(int, input().split()))                                   \n    #a.sort()\n    n = int(input())\n    #arr = {} \n   # a = list(map(int, input().split()))                                   \n    if n ==2:\n        print(1,2)\n    else:\n        print(2,(n-1)\/\/2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    m = int(input())\n    h = m \/\/ 2\n    print(2, h)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t= int(input())\n\nfor a in range(t):\n    b= int(input())\n    print(b-1, 2)"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\"\"\"\nx + a*c1 = x + b*c2\n\nif there is a number such that a*b < x and (a+1)b, a(b+1) > x\n\n\n\n\"\"\"\nfrom math import sqrt, floor\nfor _ in range(int(input())):\n    P = int(input())\n    s = floor(sqrt(P))\n    if P>3:  \n        print(s,s**2)\n    else:\n        print(\"-1\")\n    \n"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.buffer.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    temp1=n%2\n    temp2=n%3\n    temp3=n%4\n    temp4=n%5\n    if temp1==temp3:\n        print(2,4)\n    elif temp1==temp2:\n        print(2,3)\n    elif temp1==temp4:\n        print(2,5)\n        \n   \n        \n         \n            \n                \n        \n    \n    \n        \n        "},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"i=int(input())\nwhile i>0:\n    m=int(input())\n    k=int((m-1)\/2)\n    print(2,'',k)\n    i=i-1\n        "},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from itertools import combinations,takewhile\ndef comp(pair):\n    return \nfor _ in range(int(input())):\n    p = int(input())\n    comb = combinations(range(2,p+1),2)\n    #print(comb)\n    #print(*comb[len(takewhile(lambda x:p%x[0]!=p%x[1],comb))],sep=\" \")\n    print(tuple(takewhile(lambda x:p%x[0]!=p%x[1],comb)))"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    #n, k = list(map(int, input().split())) \n    d = {}\n    for i in range(1, 7):\n        if n % i not in d:\n            d[n%i] = i\n        else:\n            print(d[n%i], i)\n            break\n        \n        \n    #a = list(map(int, input().split()))"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n\tn = int(input())\n\tn-=1\n\tprint(\"%d %d\" %(2 , n\/2))"},{"Name":"1549_A. Gregor and Cryptography","Difficulty":"A","Description":"Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 \u2264 a < b \u2264 P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach subsequent line contains the integer P (5 \u2264 P \u2264 {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 \u2264 a < b \u2264 P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from collections import *\nfrom math import *\n\nTT=int(input())\nfor y in range(TT):\n    n=int(input())\n    #n,m=map(int,input().split())\n    #lst=list(map(int,input().split()))\n    #s=input()\n    foo=0\n    for i in range(2,10):\n        for j in range(2,10):\n            if (n%i)==(n%j) and (i!=j):\n                print(i,j)\n                foo=1\n                break\n        if foo:\n            break"},{"Name":"1551_D1. Domino (easy version)","Difficulty":"D","Description":"The only difference between this problem and D2 is that you don't have to provide the way to construct the answer in this problem, but you have to do it in D2.\n\nThere's a table of n \u00d7 m cells (n rows and m columns). The value of n \u22c5 m is even.\n\nA domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).\n\nYou need to find out whether it is possible to place nm\/2 dominoes on the table so that exactly k of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of a single line. The line contains three integers n, m, k (1 \u2264 n,m \u2264 100, 0 \u2264 k \u2264 nm\/2, n \u22c5 m is even) \u2014 the number of rows, columns and horizontal dominoes, respectively.\n\nOutput\n\nFor each test case output \"YES\", if it is possible to place dominoes in the desired way, or \"NO\" otherwise.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    h, w, k = map(int, input().split())\n    if w%2:h, w = w, h;k = (h*w)\/\/2-k\n    k -= (h%2*w\/\/2);print(\"NO\" if k%2 or k < 0 else \"YES\")","Incorrect Solution":null},{"Name":"1551_D1. Domino (easy version)","Difficulty":"D","Description":"The only difference between this problem and D2 is that you don't have to provide the way to construct the answer in this problem, but you have to do it in D2.\n\nThere's a table of n \u00d7 m cells (n rows and m columns). The value of n \u22c5 m is even.\n\nA domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).\n\nYou need to find out whether it is possible to place nm\/2 dominoes on the table so that exactly k of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of a single line. The line contains three integers n, m, k (1 \u2264 n,m \u2264 100, 0 \u2264 k \u2264 nm\/2, n \u22c5 m is even) \u2014 the number of rows, columns and horizontal dominoes, respectively.\n\nOutput\n\nFor each test case output \"YES\", if it is possible to place dominoes in the desired way, or \"NO\" otherwise.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n, m, k = map(int, input().split())\n    if n % 2 == k % 2 and m % 2 == ((n*m\/2)-k) % 2:\n        print('YES')\n    else:\n        print('NO')\n"},{"Name":"1551_D1. Domino (easy version)","Difficulty":"D","Description":"The only difference between this problem and D2 is that you don't have to provide the way to construct the answer in this problem, but you have to do it in D2.\n\nThere's a table of n \u00d7 m cells (n rows and m columns). The value of n \u22c5 m is even.\n\nA domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).\n\nYou need to find out whether it is possible to place nm\/2 dominoes on the table so that exactly k of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of a single line. The line contains three integers n, m, k (1 \u2264 n,m \u2264 100, 0 \u2264 k \u2264 nm\/2, n \u22c5 m is even) \u2014 the number of rows, columns and horizontal dominoes, respectively.\n\nOutput\n\nFor each test case output \"YES\", if it is possible to place dominoes in the desired way, or \"NO\" otherwise.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ndef input():return sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    h, w, k = map(int, input().split())\n    k -= (h%2*w\/\/2)\n    print(\"NO\" if k%2 or k < 0 else \"YES\")"},{"Name":"1551_D1. Domino (easy version)","Difficulty":"D","Description":"The only difference between this problem and D2 is that you don't have to provide the way to construct the answer in this problem, but you have to do it in D2.\n\nThere's a table of n \u00d7 m cells (n rows and m columns). The value of n \u22c5 m is even.\n\nA domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).\n\nYou need to find out whether it is possible to place nm\/2 dominoes on the table so that exactly k of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of a single line. The line contains three integers n, m, k (1 \u2264 n,m \u2264 100, 0 \u2264 k \u2264 nm\/2, n \u22c5 m is even) \u2014 the number of rows, columns and horizontal dominoes, respectively.\n\nOutput\n\nFor each test case output \"YES\", if it is possible to place dominoes in the desired way, or \"NO\" otherwise.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n  n,m,k=[i for i in map(int,input().split())]\n  if n-k>=0:\n    if (n-k)%2==0:\n      print('YES')\n    else:\n      print('NO')\n  else :\n    print('NO')"},{"Name":"1551_D1. Domino (easy version)","Difficulty":"D","Description":"The only difference between this problem and D2 is that you don't have to provide the way to construct the answer in this problem, but you have to do it in D2.\n\nThere's a table of n \u00d7 m cells (n rows and m columns). The value of n \u22c5 m is even.\n\nA domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).\n\nYou need to find out whether it is possible to place nm\/2 dominoes on the table so that exactly k of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of a single line. The line contains three integers n, m, k (1 \u2264 n,m \u2264 100, 0 \u2264 k \u2264 nm\/2, n \u22c5 m is even) \u2014 the number of rows, columns and horizontal dominoes, respectively.\n\nOutput\n\nFor each test case output \"YES\", if it is possible to place dominoes in the desired way, or \"NO\" otherwise.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    n, m, k = map(int, input().split())\n    if (abs(n - k) % 2)  == 1:\n        print('NO')\n    else:\n        print('YES')"},{"Name":"1551_D1. Domino (easy version)","Difficulty":"D","Description":"The only difference between this problem and D2 is that you don't have to provide the way to construct the answer in this problem, but you have to do it in D2.\n\nThere's a table of n \u00d7 m cells (n rows and m columns). The value of n \u22c5 m is even.\n\nA domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).\n\nYou need to find out whether it is possible to place nm\/2 dominoes on the table so that exactly k of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of a single line. The line contains three integers n, m, k (1 \u2264 n,m \u2264 100, 0 \u2264 k \u2264 nm\/2, n \u22c5 m is even) \u2014 the number of rows, columns and horizontal dominoes, respectively.\n\nOutput\n\nFor each test case output \"YES\", if it is possible to place dominoes in the desired way, or \"NO\" otherwise.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n  n,m,k=[i for i in map(int,input().split())]\n  if (n-k)%2==0:\n    print('YES')\n  else:\n    print('NO')"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"x=int(input())\nfor i in range(x):\n  y=int(input())\n  print((y+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if(n%10==9):\n        a=n\/\/10 \n        print(a+1)\n        \n    else:    \n        print(n\/\/10)\n        ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t:\n    n=int(input())\n    print(int((n+1)\/\/10))\n    t-=1","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"from math import floor, gcd,sqrt,ceil\n\ndef main():\n    for _ in range(int(input())):\n        n=int(input())\n        print(floor((n+1)\/10))\n\n\n\n        \n        \n            \n\n\n        \n        \nmain()","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import math\n\n\ndef solve():\n    n = int(input())\n    return (n + 1) \/\/ 10\n\n\nif __name__ == '__main__':\n    t = int(input())\n    while t > 0:\n        t -= 1\n        print(solve())\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    if(n<9):\n        print(0)\n    elif(n==9):\n        print(1)\n    else:\n        n=str(n)\n        if(n[len(n)-1]==\"9\"):\n            print(int(n[:len(n)-1])+1)\n        else:\n            print(n[:len(n)-1])\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput=stdin.readline\nfrom math import gcd\n# from collections import defaultdict\nfor _ in range(int(input().strip())):\n    n=int(input())\n    print(n\/\/10+(n%10)\/\/9)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    k=int(input())\n    if(k<9):\n        print(0)\n    elif(k==9):\n        print(1)\n    elif(k%10==9):\n        print(int(k\/10)+1)\n    else:\n        print(int(k\/10))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n=int(input())\n    print((n+1)\/\/10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t>0:\n\tt-=1\n\tn=int(input())\n\tif n<9:\n\t\tprint(0)\n\telif n==9:\n\t\tprint(1)\n\telse:\n\t\tif n%10==9:\n\t\t\tprint(n\/\/10+1)\n\t\telse:\n\t\t\tprint(n\/\/10)\n\t","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor tc in range(t):\n\n    n = int(input())\n\n    print((n+1) \/\/ 10)\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    res =0\n\n    if n < 9:\n        res=0\n    elif str(n)[-1] == \"9\":\n        res = str(n)[:-1]\n        if len(res) == 0:\n            res =1\n        else:\n            res = int(res)\n            res +=1\n    else:\n        res = str(n)[:-1]\n    print(res)\n\n\n\n\n\n\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\nfor i in range(n):\n  inp = int(input())\n  ans = int(inp \/ 10)\n  if (inp % 10 == 9): ans += 1\n  print(ans)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t:\n    t -= 1\n    i = int(input())\n    print(int((i + 1) \/ 10))\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Apr 15 17:39:13 2020\n\n@author: pena\n\"\"\"\n\n# -*- coding: utf-8 -*- 0 0 0 1 1 sm = 2, mn = 0.2 \n\"\"\"\nCreated on Fri Apr  3 17:34:50 2020\n\n@author: pena\n\"\"\"\nimport sys\nimport math\n\ndef solve(s):\n    ans = (s+1) \/\/ 10\n    return ans\n\nt = int(input())\n\nfor i in range(t):\n    #[a,b] = [int(x) for x in input().split()]\n    s = int(input())\n    print(solve(s))\n    ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    i = input()\n    if int(i) < 9: print(0)\n    elif int(i) == 9: print(1)\n    else:\n        if int(i[-1]) == 9: print(str(int(i)+1)[:len(str(int(i)+1))-1])\n        else:\n            print(i[:len(i)-1])","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    print((n + 1) \/\/ 10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def solve():\n    n = int(input())\n    print((n+1)\/\/10)\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\n\n\nif __name__ == \"__main__\":\n    main()\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\n# arr=list(map(int,input().split()))\nmod=10**9+7\nwhile(t):\n    t-=1\n    n=int(input())\n    mod=n%10\n    div=int(n\/10)\n    if(mod==9):\n        print(div+1)\n    else:\n        print(div)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\nimport math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = n%10\n    \n    while(a!=9):\n        if(a==0):\n            n-=1\n            break\n        a-=1\n        n-=1\n    #print(n)\n    print(n\/\/10+1)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print((n + 1) \/\/ 10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n\tn = int(input())\n\tprint((n+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in [0]*int(input()): print((int(input())+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor c in range(0, t):\n    n = int(input())\n    print((n+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def main():\n    for _ in range(int(input().rstrip())):\n        n = int(input().rstrip())\n\n        if n%10 == 9:\n            print(n\/\/10 + 1)\n        elif n >= 10:\n            print(n\/\/10)\n        else:\n            print(0)\n\nif __name__ == \"__main__\":\n    main()","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"# -*- coding: utf-8 -*-\n\ndef find_interesting(n) :  \n    # by observation we can say that -> \n    # count = (n+1-0)\/10 \n    return int((n+1)\/10) \n    \n    sum = 0 \n    s = str(n) \n    for x in s : \n        sum += int(x) \n    return s\n# TAKE INPUT --> \nt = int(input())   # test cases \n\nfor i in range(0, t) : \n    n = int(input())\n    p = find_interesting(n) \n    print(p)   \n\n\n\n\n\n\n\n \n\n        \n    \n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for iii in range(int(input())):\n    n=int(input())\n    n=n+1\n    n=n\/\/10\n    print(n)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n<9:\n        print(0);\n    elif(n%10==9):\n        print((n+1)\/\/10)\n    else:\n        print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(0, int(input())):\n    x = int(input()) + 1\n    print(x \/\/ 10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import math\nt = int(input())\nwhile t>0:\n\tn = int(input())\n\tprint(int((n+1)\/\/10))\n\tt-=1\n\n\n\t# x1, y1 = [int(x) for x in input().split()]\n\n\t# c = list(map(int, input().split()))\n\t# print(*ans,sep='\\n')\n\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    rem=n%10\n    n=n-rem\n    ans=0\n    if(rem==9):\n        ans+=1\n    ans+=n\/10\n    print(int(ans))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n  n = int(input())\n  s = \"0\"+str(n)\n  lst = s[-1]\n  ans = int(s[:-1])\n  if lst=='9':\n    ans+=1 \n  print(ans)\n    ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"\n\t\ndef compute(num):\n\tlast = num %10;\t\n\ttotal = int(num\/10);\n\tif(last == 9):\n\t\ttotal +=1;\n\treturn total;\n\nn = int(input());\nfor i in range(0,n):\n\t\n\n\tx=  int(input());\n\tprint(compute(x));\t\n\t\t\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n=int(input())\n    if n<9:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        n=n-9\n        n=n\/\/10\n        print(n+1)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\n\nfor case in range(t):\n    n=int(input())\n    print(n\/\/10+int(n%10>=9))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a = int(input())  \n    print(a\/\/10+ (a%10 == 9))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"print(*[(int(s)+1)\/\/10for s in[*open(0)][1:]])","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    print((n+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"T=int(input())\nwhile(T):\n    N=int(input())\n    S=list(map(int, str(N)))\n    if S[-1]==9:\n        print((N\/\/10)+1)\n\n    else:\n        print(N\/\/10)\n    T=T-1","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = input()\nl = []\nfor i in range(int(t)):\n    n = input('\\n')\n    n = int(n)\n    r = n%10\n    if (r!= 9):\n        count = int(n\/10)\n    else:\n        count = int(n\/10)+1\n\n    l.append(count)\nfor i in range(len(l)):\n\n    print(l[i])\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(0,int(input())):\n    a=int(input())\n    if a%10==9:\n        print(a\/\/10+1)\n    else:\n        print(a\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"\n\nt = int(input())\n\n\nfor i in range(t):\n    \n    n = int(input())\n    count = 0\n    \n    if n == 9:\n        count = 1\n    elif n%10 == 9:\n        count = n\/\/10 + 1\n    else:\n    \tcount = n\/\/10\n      \n    print(count)\n\t","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\n\ndef num(y):\n    while (y - 9) % 10 != 0:\n        y -= 1\n    return y\n\n\nwhile n > 0:\n    x = int(input())\n    print(int((num(x) - 9) \/ 10 + 1))\n    print('\\n')\n    n-=1\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"# This code is given by-kiran_abc02\nimport math\nfor _ in range(int(input())):\n    n=int(input())\n    # a,b=map(int,input().split())\n    # l=list(map(int,input().split()))\n    # str=input()\n    # s=0\n    if(n%10==9):\n          print((n\/\/10)+1)\n    else:\n          print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"\ndef check(n):\n    print((n+1)\/\/10)\ncases = []\nfor _ in range(int(input())):\n    cases.append(int(input()))\nfor n in cases:\n    check(n)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    c=0\n    if(str(n)[-1]=='9'):\n        c=1\n    print(n\/\/10+c)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t>0:\n    n=int(input())\n    if n%10==9:\n        print(n\/\/10+1)\n    else:\n        print(n\/\/10)\n    t=t-1","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for u in range(int(input())):\n    n = int(input())\n    print((n+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import sys\nimport io, os\ninput = sys.stdin.buffer.readline\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 9:\n        print(0)\n    else:\n        s = str(n+1)\n        print(s[:-1])\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    ans = n \/\/ 10\n\n    if n % 10 == 9:\n        ans += 1\n\n    print(ans)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    n=int(input())\n    if n<=8:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        y=n\/\/10\n        if (n+1)%10==0:\n            print(y+1)\n        else:\n            print(y)\n        \n    ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in [0]*int(input()):\n    j=int(input())\n    ans=j\/\/10\n    if(j%10==9):\n        ans=ans+1\n    print(ans)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input()) + 1\n    print(n\/\/10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"qn=list()\nans=list()\nn=int(input())\nfor i in range(n):\n    k=int(input())\n    qn.append(k)\nfor i in range(n):\n    k=(qn[i]+1)\/\/10\n    ans.append(k)\n\nfor item in ans:\n    print(item)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for tt in range(int(input())):\n    print((int(input())+1)\/\/10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    n = int(input())\n    print((n+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for T in range(int(input())):\n    print((int(input()) + 1) \/\/ 10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def digitSum(n):\n    if n < 9:\n        return 0\n    elif n == 9:\n        return 1\n    else:\n        return n \/\/ 10 + 1 if str(n)[-1] == \"9\" else n \/\/ 10\n\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    print(digitSum(k))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n%10==9:\n        n+=1\n    n=n\/\/10\n    print(n)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor p in range(n):\n  k=int(input())\n  print(k\/\/10+int((k%10)==9) if 1 else 0)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    if n % 10 == 9:\n        ans += 1\n    ans += n \/\/ 10\n    print(ans)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n = int(input())+1\n    if n<=9:\n        print(0)\n    elif n ==10:\n        print(1)\n    else:\n        print(n\/\/10)\n        \n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    a = int(input())\n    if (str(a)[len(str(a))-1] == '9'):\n        print(int(a\/10) + 1)\n    else:\n        print(int(a\/10))\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    print(int((int(input())+1)\/10))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\n_input = stdin.readline\n_range, _int = range, int\ndef solution():\n    for _ in _range(_int(_input())):\n        n = _int(_input())\n        ans = n \/\/ 10\n        if n % 10 == 9:\n            ans += 1\n        print(ans)\nsolution()","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"# import sys\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\ndef read_line():\n    return [int(x) for x in input().split()]\n\ndef read_int():\n    return int(input())\n\ndef solve():\n    n = read_int()\n    \n    res = int(n\/\/10)\n\n    if n%10 == 9:\n        res += 1\n\n    print(res)\n\nt = read_int()\n# t = 1\nwhile t > 0:\n    solve()\n    t -= 1","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())+1\n    # l = list(map(int, input().split()))\n    print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile ( t > 0):\n    t-=1\n    x = int(input())+1\n    x = x\/\/10\n    print(x)\n    ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\n\nwhile t>0 : \n    x=int(input())\n    ans = x\/\/10\n    if x%10 == 9 : \n        ans+=1\n    \n\n    print(ans)\n\n    t-=1\n\n\n    \n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import sys\nimport math\nfrom collections import deque,Counter\n#sys.setrecursionlimit(10**7)\nint1=lambda x: int(x)-1\n\ninp=lambda :int(input())\nmi=lambda :map(int,input().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1,input().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str,input().split())\nlis=lambda :list(mis())\npr=print\n\nfrom collections import defaultdict\n\"\"\"\n#\u521d\u671f\u5024 0\nd=defaultdict(int)\n\n#\u521d\u671f\u5024 1\nd=defaultdict(lambda:1)\n\"\"\"\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\nt=int(input())\nfor _ in range(t):\n  n=inp()\n  print((n+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if len(str(n))==1 and n!=9:\n        print(0)\n    elif n%10==9:\n        print(n\/\/10+1)\n    else:\n        print(n\/\/10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"[print((int(input())+1)\/\/10) for _ in range(int(input()))]","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n%10==9 :\n        print(n\/\/10 +1)\n    else:\n        print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t!=0):\n    n=int(input())\n    x=n%10\n    a=n\/\/10\n    if(x==9):\n        print(a+1)\n    else:\n        print(a)\n    t-=1\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"number = int(input().strip())\nfor i in range(number):\n    a = int(input().strip())\n    if a%10 == 9:\n       print(int(a\/10)+1)\n    else:\n       print(int(a\/10))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    if n<9:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        s=str(n)\n        if int(s[len(s)-1])==9:\n            s=s[0:len(s)-1]\n            print(int(s)+1)\n        else:\n            s=s[0:len(s)-1]\n            print(int(s))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"tt = int(input())\n\nfor i in range(tt):\n    n = int(input())\n    print((n+1)\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nimport functools\n# s(5) = 5\n# s(10) = 1\n# s(322) = 7\n# s(5) > s(10)\n\ndef s(s: int):\n\ts = str(s)\n\treturn functools.reduce(lambda x, y: x + int(y),[y for y in s if y.isdigit()],0)\n\t# s = ' '.join(s).split()\n\t# print(s)\n\nfor _ in range(t):\n\tn = int(input())\n\t# m = list(range(1, n + 1))\n\t# for i in m: print(s(i))\n\tif not n % 10 == 9:\n\t\tprint(n \/\/ 10)\n\telse:\n\t\tprint(n \/\/ 10 + 1)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def solve():\n    n = int(input())\n    print(n \/\/ 10 + (n % 10 == 9))\n\nt = int(input())\nfor _ in range(t):\n    solve()","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for case in range(int(input())):\n\tnumber = int(input())\n\n\tprint(int((number + 1) \/ 10))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nresults=[]\nfor _ in range(t):\n    n = int(input())\n    result=0\n    # a = list(map(int,input().split()))\n    # b = list(map(int,input().split()))\n    if n<9:\n        result=0\n    else:\n        if n==9:\n            result=1\n        else:\n            if n%10==9:\n                result = int(n\/10) + 1\n            else:\n                result = int(n\/10)\n    results.append(result)\n\nfor i in results:\n    print(i)\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nlst = []\n\nfor i in range(t):\n    q = int(input())\n    if str(q)[-1]=='9':\n        y = (q+1)\/\/10\n        lst.append(y)\n    else:\n        y = q\/\/10\n        lst.append(y)\n\nfor b in lst:\n    print(b)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\nfor i in range(T):\n    n = int(input())\n    result = 0\n    if(n%10 == 9):\n        result = (n\/\/10)+1\n    else:\n        result = n\/\/10\n    print(result)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n \nfor caseNr in range(1, t + 1):\n    n = int(input())\n    \n    count = n\/\/10\n    \n    if (n-9) % 10 == 0:\n        count += 1\n    \n    print(count)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for q in range(int(input())):\n    n=int(input())\n    k=(n-9)\/\/10\n    print(k+1)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def solve2(num):\n    if num<9:\n        return 0\n    elif num==9:\n        return 1\n\n    return (num+1)\/\/10\ndef digits_sum():\n    t=int(input())\n    for i in range(t):\n        num=int(input())\n        print(solve2(num))\ndigits_sum()\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for i in range((int(input()))):\n    num=int(input())\n    if(num<9):\n        print(0)\n        continue\n    if(num%10==9):\n        print((num\/\/10) +1)\n        continue\n    else:\n        print(num\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    print((int(input()) +1) \/\/ 10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def solve(n):\n    rem = n % 10\n    a = n\/\/10\n    if rem == 9:\n        print(a+1)\n    else:\n        print(a)\n\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    solve(n)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n<9:\n        print(0)\n    elif int(str(n)[-1])==9:\n        print(n\/\/10+1)\n    else:\n        print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor j in range(n):\n    a=int(input())\n    c=[]\n    c.append((a+1)\/\/10)\n    print(*c)\n\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin, stdout\ndef arrin():\n    return list(map(int, stdin.readline().split()))\ndef num1in():\n    return int(stdin.readline())\ndef num2in():\n    a, b = map(int, stdin.readline().split())\n    return a, b\ndef num3in():\n    a, b, c = map(int, stdin.readline().split())\n    return a, b, c\ndef num4in():\n    a, b, c, d = map(int, stdin.readline().split())\n    return a, b, c, d\ndef num5in():\n    a, b, c, d, e = map(int, stdin.readline().split())\n    return a, b, c, d, e\nt=num1in()\nfor test in range(t):\n    n=num1in()\n    ans = (n+1)\/\/10\n    print(ans)\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\n\ninput = sys.stdin.readline\n\n\n# sys.setrecursionlimit(400000)\ndef I(): return input().strip()\n\n\ndef II(): return int(input().strip())\n\n\ndef LI(): return [*map(int, input().strip().split())]\n\n\nimport copy, string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, combinations, groupby\nfrom operator import itemgetter\n\n\nfor _ in range(II()):\n    n = II()\n    x = n+1\n    f = 0\n    if n%10 == 9:\n        f = 1\n    m = str(n)\n    if f == 1:\n        print((n\/\/10) + 1)\n    else:\n        print(n\/\/10)\n\n\n        ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = (n + 1) \/\/ 10\n    print(ans)\n    ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\n\ndef get_string(): return sys.stdin.readline().strip()\n\n\ndef get_array(): return list(map(int, sys.stdin.readline().rstrip().split()))\n\n\ndef get_num(): return int(sys.stdin.readline())\n\n\nt = get_num()\nfor i in range(t):\n    count = 0\n    x = get_num()\n    if x % 10 == 9:\n        count += 1 + x \/\/ 10\n    else:\n        count += x \/\/ 10\n    print(count)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(int((n+1)\/10))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"j=int(input())\nwhile j>0:\n    n=int(input())\n    if n%10==9:\n        print((n\/\/10)+1)\n    else:\n        print(n\/\/10)\n    j=j-1\n    ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    print((int(input())+1)\/\/10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"\n\nt = int(input())\n\nfor z in range(t):\n    n = int(input())\n    ans = 0\n    if (n < 10 and n == 9):\n        print(1)\n    else:\n        if(n%10 == 9):\n            ans = n\/\/10 + 1\n        else:\n            ans = n\/\/10\n        print(ans)\n\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def f():\n    n=int(input())\n    print((n+1)\/\/10)\n    return\n\nt=int(input())\nwhile t:\n    f()\n    t-=1\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor test in range(t):\n    n=int(input())\n    if n%10==9:\n        print(1+(n\/\/10))\n    else:\n        print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    ans = n \/\/ 10 + bool(n % 10 == 9)\n    print(ans)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"#  author:  violist\n#  created: 23.07.2021 08:37:15\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((n + 1) \/\/ 10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nn = []\nfor _ in range(t):\n    n.append(int(input()))\nfor number in n:\n    counter = (number \/\/ 100) * 10\n    counter += (number % 100) \/\/ 10\n    if str(number)[-1] == '9':\n        counter += 1\n    print(counter)\n\n\n\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t:\n    t-=1\n    n = int(input())\n    if n%10 == 9:\n        print(int(n\/10) + 1)\n    else:\n        print(int(n\/10))\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n\tn=int(input())\n\tx=n\/\/10\n\tif n%10==9:\n\t\tx+=1\n\tprint(x)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\n\nb = 0\n\nwhile b < a:\n    c = int(input())\n    if str(c)[-1] == \"9\":\n        print((c\/\/10)+1)\n    else:\n        print(c\/\/10)\n    b += 1","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nwhile t > 0:\n    n = int(input())\n\n    print(n \/\/ 10 if (n + 1) % 10 else (n\/\/10) + 1)\n    t -= 1\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n < 9:\n        print(0)\n    elif str(n)[-1] == '9':\n        print(n\/\/10 + 1)\n    else:\n        print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def s(v):\n    sum = 0\n    while v>0:\n        sum = sum + v%10\n        v = v\/\/10\n    return sum\n\n\ncount = int(input(\"\"))\nlist = [0]*count\nfor k in range(count):\n    val = int(input(\"\"))\n    list[k] = (val+1)\/\/10\n\nfor i in list:\n    print(i)\n\n    \n\n\n\n        \n\n\n\n\n    \n\n\n\n\n        ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"# import pandas as pd\n#\n# ft = pd.read_csv('football.csv')\n#\n# a = ft.loc[ft.Club.isin(['FC Barcelona', 'Real Madrid', 'Juventus', 'Manchester United'])].pivot_table(\n#     values=['Wage'],\n#     index=['Nationality'],\n#     columns=['Club'],\n#     aggfunc='sum',\n#     margins=True,\n#     fill_value=0\n# )\n# print(a)\nt = int(input())\nmas = []\nfor i in range(t):\n    a = int(input())\n    mas.append(a)\n\nans = []\nfor el in mas:\n    ans.append((el + 1) \/\/ 10)\nfor i in ans:\n    print(i)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n\tn=int(input())\n\tif n%10==9:\n\t\tprint((n\/\/10)+1)\n\telse:\n\t\tprint(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    q=n\/\/10\n    rem=n%10\n    q+=rem\/\/9\n    print(q)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import time\nfrom collections import deque \n\ndef inpt():\n    return int(input())\ndef inpl():\n    return list(map(int,input().split()))\ndef inpm():\n    return map(int,input().split())\n    \ndef solve():\n    n = inpt()\n    print((n+1)\/\/10)\n    \n    \ndef main():\n    #start_time=time.time()\n    m=10**9+7\n    t = int(input())\n    while(t):\n        t-=1\n        solve()\n        \n    \n    #print('Time Elapsed = ',time.time()-start_time,\" seconds\")\nif __name__ == \"__main__\":\n    main()\n    ","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile(t>0):\n    t=t-1\n    n=int(input())\n    if n>=1 and n<9:\n        print(\"0\")\n    elif n==9:\n        print(\"1\")\n    else:\n        if n%10==9:\n            print((n\/\/10) +1)\n        else:\n            print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    d = n\/\/10\n    if n%10==9:\n        d+=1\n    print(d)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nnum = 9\nnumbers=0\nfor k in range(t):\n    n = input()\n    if len(n)==1:\n        if n==\"9\":\n            print(1)\n        else:\n            print(0)\n    else:\n        if n[-1] == \"9\":\n            print(int(n[:-1])+1)\n        else  :\n            print(int(n[:-1]))","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"import sys,math,heapq,bisect\ninput=sys.stdin.readline\n\nfrom collections import defaultdict, deque\nT=int(input())\nfor _ in range(T):\n    #n,m=map(int,input().split())\n    n=int(input())\n    n=n+1\n    print(n\/\/10)\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\na=[]\nfor i in range(t):\n    a.append(int(input()))\nfor elem in a:\n    z=int(elem) +1\n    y=int(z\/10)\n    print(y)   \n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n      n=int(input())\n      if(n<9):\n            print(0)\n      elif(n==9):\n            print(1)\n      else:\n            if(n%10==9):\n                  print(n\/\/10+1)\n            else:\n                  print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    n+=1\n    print(n\/\/10)","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":"def f(x):\n    if x%10==9:\n        return x\/\/10+1\n    return x\/\/10\n\nt=int(input())\nfor _ in range(t):\n    print(f(int(input())))\n","Incorrect Solution":null},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n<9:\n        print(0);\n    elif n==9:\n        print(1)\n    else:\n        print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\nt = int(input())\n\nfor z in range(t):\n    n = int(input())\n    count = 0\n    i = 9\n    if (n < 10 and n == 9):\n        print(1)\n    else:\n        print(n\/\/10)\n\n\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n<9:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        s=str(n)\n        if s[len(s)-1]==9:\n            s=s[0:len(s)-1]\n            print(int(s)+1)\n        else:\n            s=s[0:len(s)-1]\n            print(int(s))\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((n + 1) % 10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def main():\n    for _ in range(int(input().rstrip())):\n        n = int(input().rstrip())\n\n        if n == 9:\n            print(1)\n        elif n >= 10:\n            print(n\/\/10)\n        else:\n            print(0)\n\nif __name__ == \"__main__\":\n    main()"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nresults=[]\nfor _ in range(t):\n    n = int(input())\n    result=0\n    # a = list(map(int,input().split()))\n    # b = list(map(int,input().split()))\n    if n<9:\n        result=0\n    else:\n        if n==9:\n            result=1\n        else:\n            result = int(n\/10)\n    results.append(result)\n\nfor i in results:\n    print(i)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if len(str(n))==1 and n!=9:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        print(n\/\/10)\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile t:\n    n=int(input())\n    if n==1:\n        print(1)\n    else:\n        print(int(n\/\/10))\n    t-=1"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# import sys\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\ndef read_line():\n    return [int(x) for x in input().split()]\n\ndef read_int():\n    return int(input())\n\ndef solve():\n    n = read_int()\n    \n    res = int(n\/\/10)\n\n    if n%9 == 0:\n        res += 1\n\n    print(res)\n\nt = read_int()\n# t = 1\nwhile t > 0:\n    solve()\n    t -= 1"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for tt in range(int(input())):\n    s = input()\n    if s == '1':\n        print(0)\n    elif int(s) <= 10:\n        print(1)\n    else:\n        print(s[:len(s)-1])\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=(input())\n    if int(n)==1:\n        print(0)\n    elif int(n)>1 and int(n)<10:\n        print(1)\n    else:\n        print(n[:-1])\n        "},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\t\ndef compute(num):\n\ttotal = int(num\/10);\n\n\treturn total;\n\nn = int(input());\nfor i in range(0,n):\n\t\n\n\tx=  int(input());\n\tprint(compute(x));\t\n\t\t\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = int(input())\n\nb = 0\n\nwhile b < a:\n    c = int(input())\n    if c == 9:\n        print(1)\n    else:\n        print(c\/\/10)\n    b += 1"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n<=8:\n        print(0)\n    if n==9 or n==10:\n        print(1)\n    if n>10:\n        n=str(n)\n        print(n[:-1])"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nfor _ in range(int(input())):\n    n=int(input())\n    #n=math.ceil(n-9\/10)+1\n    if n<9:\n        print(0)\n    else:\n        n=n-9\n        if n%10==0:\n            print((n\/10)+1)\n        else:\n            n=int(n\/10)\n            #print(n)\n            print(int(n)+1)\n        \n    \n    "},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"x=int(input())\nfor i in range(x):\n  y=int(input())\n  if(y-10*(y\/\/10)==0.9):\n    print(y\/\/10+1)\n  else:\n    print(y\/\/10)\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    k=int(input())\n    if(k<9):\n        print(0)\n    elif(k==9):\n        print(1)\n    else:\n        print(int(k\/10))\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# -*- coding: utf-8 -*-\n\"\"\"p1.ipynb\n\nAutomatically generated by Colaboratory.\n\nOriginal file is located at\n    https:\/\/colab.research.google.com\/drive\/1p2mAv1q48qUedSRisLlOLo0-L21KioGJ\n\"\"\"\n\nt=int(input())\nwhile(t!=0):\n    #sum=0\n    n=int(input())\n    if(n<9):\n        print(0)\n    \n    elif(n==9):\n        print(1)\n        \n    else:\n        x=(n\/\/10)\n        print(int(x))\n\n    t=t-1"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    a = int(input())\n    if (str(a)[0] == '9'):\n        print(int(a\/10) + 1)\n    else:\n        print(int(a\/10))\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"x=int(input())\nfor i in range(x):\n  y=int(input())\n  if(5<=y<10):\n    print(y\/\/10+1)\n  else:\n    print(y\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for u in range(int(input())):\n    n = int(input())\n    if(2 <= n <= 10):\n        print(1)\n        \n    elif(n == 1):\n        print(0)\n        \n    else:\n        print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    if n<9:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        n = str(n)\n        n = n[:len(n)-1]\n        n = int(n)\n        print(n)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\tprint(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile(t!=0):\n    n=int(input())\n    n=n%10\n    if(n==9):\n        print(n+1)\n    else:\n        print(n)\n    t-=1\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"x=int(input())\nfor i in range(x):\n  y=input()\n  if(int(y)\/\/(10**(len(y)-1))==9):\n    print(int(y)\/\/10+1)\n  else:\n    print(int(y)\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n < 9:\n        print(0)\n    elif n == 9:\n        print(1)\n    else:\n        print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nt = int(input())\nwhile t>0:\n\tn = int(input())\n\tprint(int(n\/\/10))\n\tt-=1\n\n\n\t# x1, y1 = [int(x) for x in input().split()]\n\n\t# c = list(map(int, input().split()))\n\t# print(*ans,sep='\\n')\n\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(0,int(input())):\n    a=int(input())\n    if a<9:\n        print(0)\n    elif a==9:\n        print(1)\n    else:\n        print(a\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nwhile t > 0:\n    n = int(input())\n\n    print(n \/\/ 10 if n + 1 % 10 else (n\/\/10) + 1)\n    t -= 1\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# import sys\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\ndef read_line():\n    return [int(x) for x in input().split()]\n\ndef read_int():\n    return int(input())\n\ndef solve():\n    n = read_int()\n    \n    if n < 9:\n        print(0)\n    elif n == 9:\n        print(1)\n    else:\n        print(int(n\/\/10))\n\nt = read_int()\n# t = 1\nwhile t > 0:\n    solve()\n    t -= 1"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    i = input()\n    if int(i) < 9: print(0)\n    if i == 9: print(1)\n    else: print(i[:len(i)-1])"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"#  author:  violist\n#  created: 22.07.2021 16:36:08\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = str(n)[:-1]\n    if (len(s) == 0 and n < 9):\n        print(0)\n    elif (n == 9):\n        print(1)\n    else:\n        print(s)\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    print(int((int(input())-1)\/10))"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve2(num):\n    if num<9:\n        return 0\n    elif num==9:\n        return 1\n\n    return num\/\/10\ndef digits_sum():\n    t=int(input())\n    for i in range(t):\n        num=int(input())\n        print(solve2(num))\ndigits_sum()\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    if(n==1):\n        print(0)\n    elif(n<10):\n        print(1)\n    else:\n        n=str(n)\n        print(n[:len(n)-1])\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    print(n\/\/10)\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nwhile(t>0):\n    t=t-1\n    n=int(input())\n    if n==1:\n        print(\"0\")\n    elif n>1 and n<=10:\n        print(\"1\")\n    else:\n        print(n\/\/10)\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    if n<9:\n        print(0)\n    elif n ==9:\n        print(1)\n    else:\n        print(n\/\/10)\n        \n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\n# arr=list(map(int,input().split()))\nmod=10**9+7\nwhile(t):\n    t-=1\n    n=int(input())\n    if(n==9):\n        print(1)\n    else:\n        print(0 if n<9 else int(n\/10))"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in [0]*int(input()): print((int(input())+1)\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\nt = int(input())\n\n\nfor i in range(t):\n    \n    n = int(input())\n    count = 0\n    \n    if n == 9:\n        count = 1\n    else:\n        count = n\/\/10\n      \n    print(count)\n\t"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\n\n\ndef S(num):\n\tadd = 0;\n\twhile(num > 0):\n\t\tadd = add+  num%10;\n\t\tnum = int(num\/10);\n\t\n\treturn add;\n\t\ndef check_interest(num):\n\t#print(str(S(num)) + \"  \"+ str(S(num+1)));\n\tif(S(num) > S(num+1)):\n\t\treturn True;\n\treturn False;\t\n\t\ndef compute(num):\n\ttotal = 0;\n\tfor i in range(1,num+1):\n\t\tif(check_interest(i)):\n\t\t\ttotal +=1;\n\n\treturn total;\n\nx=  int(input(\"\"));\nprint(compute(x));\t\n\t\t\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(0,int(input())):\n    a=int(input())\n    if a==1:\n        print(0)\n    elif a<10:\n        print(0)\n    else:\n        print(a\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    if(n < 9):\n        print(0)\n    elif(n == 9):\n        print(1)\n    else:\n        s = str(n)\n        print(s[0:len(s)-1])"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n      n=int(input())\n      if(n<9):\n            print(0)\n      elif(n==9):\n            print(1)\n      else:\n            print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    if(n==1):\n        print(0)\n    elif(n<10):\n        print(1)\n    else:\n        n=str(n)\n        if(n[len(n)-1]==\"9\"):\n            print(int(n[:len(n)-1])+1)\n        else:\n            print(n[:len(n)-1])\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nfor _ in range(int(input())):\n    n=int(input())\n    if n<9:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        n=n-9\n        n=math.ceil(n\/10)\n        print(n)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nwhile(t>0):\n    t=t-1\n    n=int(input())\n    if n>=1 and n<9:\n        print(\"0\")\n    elif n==9:\n        print(\"1\")\n    else:\n        print(n\/\/10)\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    a = int(input())\n    print(a\/\/10+ (a%9 ==0))"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# def numbers_sum(number):\n#     result = 0\n#     for digit in str(number):\n#         result += int(digit)\n#     return result\n#\n#\n# t = int(input())\n# n = []\n# for _ in range(t):\n#     n.append(int(input()))\n# for max_number in n:\n#     counter = 0\n#     for i in range(1, max_number + 1):\n#         if numbers_sum(i + 1) < numbers_sum(i):\n#             counter += 1\n#     print(counter)\nt = int(input())\nn = []\nfor _ in range(t):\n    n.append(int(input()))\nfor number in n:\n    if len(str(number)) < 2:\n        counter = number \/\/ 9\n    else:\n        counter = number \/\/ 10\n    print(counter)\n\n\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\n# arr=list(map(int,input().split()))\nmod=10**9+7\nwhile(t):\n    t-=1\n    n=int(input())\n    print(0 if n<9 else int(n\/10))"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range((int(input()))):\n    num=int(input())\n    if(num<9):\n        print(0)\n    elif(num==9):\n        print(1)\n    else:\n        print(num\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from collections import Counter\ninput()\nv = Counter(list(map(int, input().split())))\nprint(max(v.values()))\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\nt = int(input())\n\nfor z in range(t):\n    # n = int(input())\n    ar = []\n    for n in range(18,22):\n        ans = 0\n        if (n < 10 and n == 9):\n            print(1)\n        else:\n            if(n%10 == 9):\n                ans = n\/\/10 + 1\n            else:\n                ans = n\/\/10\n            print(ans)\n\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\t\ndef compute(num):\n\ttotal = int(num\/10);\n\n\treturn total;\n\nn = int(input());\nfor i in range(0,n):\n\t\n\n\tx=  int(input());\n\tprint(compute(x));\t\n\t\t\n#dwadwa"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\n\ndef get_string(): return sys.stdin.readline().strip()\n\n\ndef get_array(): return list(map(int, sys.stdin.readline().rstrip().split()))\n\n\ndef get_num(): return int(sys.stdin.readline())\n\n\nt = get_num()\nfor i in range(t):\n    count = 0\n    x = get_num()\n    if x % 10 == 9:\n        count += 1 + x \/\/ 10\n    else:\n        count += x \/\/ 10"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def digitSum(n):\n    if n < 9:\n        return 0\n    elif n == 9:\n        return 1\n    else:\n        return n \/\/ 10\n\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    print(digitSum(k))"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(0,int(input())):\n    a=int(input())\n    if a==1:\n        print(0)\n    elif a<10:\n        print(1)\n    else:\n        print(a\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile t>0:\n\tt-=1\n\tn=int(input())\n\tif n<9:\n\t\tprint(0)\n\telif n==9:\n\t\tprint(1)\n\telse:\n\t\tprint(n\/\/10)\n\t"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nlst = []\n\nfor i in range(t):\n    q = int(input())\n    if q==9:\n        lst.append(1)\n    else:\n        y = q\/\/10\n        lst.append(y)\n\nfor b in lst:\n    print(b)\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile t:\n    n=int(input())\n    print(int(n\/\/10))\n    t-=1"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    i = input()\n    if int(i) < 9: print(0)\n    elif int(i) == 9: print(1)\n    else: print(i[:len(i)-1])"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor c in range(0, t):\n    n = int(input())\n    print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\n\n\ndef S(num):\n\tadd = 0;\n\twhile(num > 0):\n\t\tadd = add+  num%10;\n\t\tnum = int(num\/10);\n\t\n\treturn add;\n\t\ndef check_interest(num):\n\t#print(str(S(num)) + \"  \"+ str(S(num+1)));\n\tif(S(num) > S(num+1)):\n\t\treturn True;\n\treturn False;\t\n\t\ndef compute(num):\n\ttotal = 0;\n\tfor i in range(1,num+1):\n\t\tif(check_interest(i)):\n\t\t\ttotal +=1;\n\n\treturn total;\n\nx=  input(\"\");\n\t\nprint(x);\t\t\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nlst = []\n\nfor i in range(t):\n    q = int(input())\n    if q>=9:\n        y = q\/\/10+1\n        lst.append(y)\n    else:\n        y = q\/\/10\n        lst.append(y)\n\nfor b in lst:\n    print(b)\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def digitSum(n):\n    if n < 9:\n        return 0\n    else:\n        return 1 + n % 10\n\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    print(digitSum(k))"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=(input())\n    if int(n)<1 or int(n)==1:\n        print(0)\n    elif int(n)>1 and int(n)<10:\n        print(1)\n    else:\n        print(n[:-1])"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range((int(input()))):\n    num=int(input())\n    if(num<10):\n        print(1)\n    else:\n        print(num\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n\tn=int(input())\n\tif n<=8:\n\t\tprint(0)\n\telif n>=10:\n\t\tprint(n\/\/10)\n\telse:\n\t\tprint(1)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n<9:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        s=str(n)\n        s=s[0:len(s)-1]\n        print(int(s))\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n\n\ndef solve():\n    n = int(input())\n    if n == 9:\n        return 1\n    else:\n        return n \/\/ 10\n\n\nif __name__ == '__main__':\n    t = int(input())\n    while t > 0:\n        t -= 1\n        print(solve())\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n\n    if n < 9:\n        print(0)\n        continue\n\n    if n == 9:\n        print(1)\n        continue\n\n    print(n \/\/ 10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"number = int(input().strip())\nfor i in range(number):\n    a = int(input().strip())\n    print(int(a\/10))\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    res =0\n\n    if n < 9:\n        res=0\n    elif n==9:\n        res=1\n    else:\n        res = str(n)[:-1]\n    print(res)\n\n\n\n\n\n\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile t>0:\n    n=int(input())\n    if n<9:\n        print(0)\n    elif n==9:\n        print(1)\n    else:\n        print(n\/\/10)\n    t=t-1"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    # l = list(map(int, input().split()))\n    print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import stdin\ninput=stdin.readline\nfrom math import gcd\n# from collections import defaultdict\nfor _ in range(int(input().strip())):\n    n=int(input())\n    print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n=int(input())\n    if n<9:\n        print(0)\n    if n==9:\n        print(1)\n    if n>=10:\n        print(str(n)[:-1])"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\n# s(5) = 5\n# s(10) = 1\n# s(322) = 7\n# s(5) > s(10)\n\nfor _ in range(t):\n\tn = int(input())\n\tif n == 9:\n\t\tprint(1)\n\telif n < 9:\n\t\tprint(0)\n\telse:\n\t\tprint(n \/\/ 10)\n\n"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\nfor i in range(T):\n    n = int(input())\n    if(n==9):\n        print(1)\n        continue\n    print(n\/\/10)"},{"Name":"1553_A. Digits Sum","Difficulty":"A","Description":"Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 \u2264 x \u2264 n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 \u2264 n \u2264 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n=int(input())\n    print(n\/\/10)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"\nfor testis in range(int(input())):\n    n = int(input())\n    if (n == 1):\n        print('a')\n    else:\n        s = 'a' * (n \/\/ 2)\n        if (n & 1):\n            s += 'bc'\n        else:\n            s += 'b'\n        s += 'a' * (n \/\/ 2 - 1)\n        print(s)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):n=int(input());print('a'*(n\/\/2)+'b'+'a'*max(0,(n\/\/2-1)) if n%2==0 or n==1 else 'a'*(n\/\/2)+'bc'+'a'*(n\/\/2-1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    print('a' if n==1 else 'a'*(n\/\/2)+('bc' if n%2 else 'b')+'a'*(n\/\/2-1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"__T = int(input())\n\nfor _ in range(__T):\n    n = int(input())\n    k = n \/\/ 2\n    if n == 1:\n        print('a')\n    elif n % 2 == 0:\n        print('a'*k + 'b' + 'a'*(k-1))\n    else:\n        print('a'*k + 'bc' + 'a'*(k-1))\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(\"a\" * (n \/\/ 2 - 1) + \"b\" + (\"c\" if n % 2 else \"\") + \"a\" * (n \/\/ 2) if n > 1 else \"a\")\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor tt in range(t):\n\tn = int(input())\n\tif n == 1:\n\t\tprint('a')\n\telif n % 2 == 0:\n\t\tprint('a' * (n \/\/ 2) + 'b' + 'a' * (n \/\/ 2 - 1))\n\telse:\n\t\tprint('a' * (n \/\/ 2) + 'b' + 'a' * (n \/\/ 2 - 1) + 'c')\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print('a')\n    else:\n        s = ''\n        s += 'a' * (n \/\/ 2)\n        if (n & 1):\n            s += 'bc'\n        else:\n            s += 'b'\n        s += 'a' * (n \/\/ 2 - 1)\n        print(s)\n\n\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.buffer.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n\n    if n == 1:\n        print(\"a\")\n    elif n == 2:\n        print(\"ab\")\n    elif n % 2:\n        print(\"a\"*(n\/\/2)+\"bc\" + \"a\"*(n\/\/2-1))\n    else:\n        print(\"a\"*(n\/\/2) + \"b\" + \"a\"*(n\/\/2-1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor laskjkljfsd in range(t):\n\tn=int(input())\n\tif(n%2):\n\t\tif(n==1):\n\t\t\tprint(\"a\")\n\t\telse:\n\t\t\tprint(\"a\"*(n\/\/2)+\"bc\"+\"a\"*(n\/\/2-1))\n\telse:\n\t\tprint(\"a\"*(n\/\/2)+\"b\"+\"a\"*(n\/\/2-1))\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('a')\n    else:\n        print('a'*(n\/\/2) + 'b' + 'a'*(n\/\/2-1) + 'c'*(n%2))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n  n = int(input())\n  if (n == 1):\n    print('a')\n  else:\n    s = 'a' * (n \/\/ 2)\n    if (n & 1):\n      s += 'bc'\n    else:\n      s += 'b'\n    s += 'a' * (n \/\/ 2 - 1)\n    print(s)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput= sys.stdin.buffer.readline\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    if(n == 1):ans = 'a'\n    elif(n%2 == 0):\n        k = n\/\/2\n        ans = \"a\"*k + 'b' + 'a'*(k-1)\n    else:\n        k = (n-1)\/\/2\n        ans = 'a'*k + 'bc' + 'a'*(k-1)\n    \n    print(ans)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput=sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n  n=int(input())\n  if n==1:\n    print(\"a\")\n    continue\n  if n%2==0:\n    print(\"a\"*(n\/\/2-1)+\"b\"+\"a\"*(n\/\/2))\n  else:\n    print(\"a\"*(n\/\/2-1)+\"b\"+\"c\"+\"a\"*(n\/\/2))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print('a')\n    elif n == 2:\n        print('ab')\n    elif n == 3:\n        print('abc')\n    elif n % 2 == 0:\n        print('a' * (n\/\/2) + 'b' + 'a' * (n\/\/2 - 1))\n    else:\n        print('a' * (n\/\/2) + 'bc' + 'a' * (n\/\/2 - 1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(\"z\")\n    elif n % 2:\n        print(\"a\" * (n \/\/ 2) + \"yz\" + \"a\" * (n \/\/ 2 - 1))\n    else:\n        print(\"a\" * (n \/\/ 2) + \"z\" + \"a\" * (n \/\/ 2 - 1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n==1:\n        print('a')\n    else:\n        check=True\n        if (n-1)%2==0:\n            check=False\n        q = (n-2)\/\/2\n        s = 'a'*q\n        s += 'b'\n        w = 'a'*(q+1)\n        if check == False:\n            s += 'c'\n        s += w\n        print(s)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"def solve(n):\n    if n == 1:\n        print(\"a\")\n        return\n    print(\"a\"*(n\/\/2) + \"b\" + \"a\"*((n\/\/2)-1) + \"c\" * (n%2))\n    return\n\nfor _ in range((int(input()))):\n    solve(int(input()))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    if n == 1:\n        ans = 'a'\n\n    elif n % 2 == 0:\n        ans += 'a' * (n\/\/2-1)\n        ans += 'b'\n        ans += 'a' * (n\/\/2)\n    \n    else:\n        ans += 'a' * (n\/\/2-1)\n        ans += 'bc'\n        ans += 'a' * (n\/\/2)\n\n    print(ans)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if(n == 1):\n        print('a')\n        continue\n    s = 'a'*(n\/\/2)\n    if n & 1:\n        s += 'bc'\n    else:\n        s += 'b'\n    s += 'a'*(n\/\/2-1)\n    print(s)\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\n\ndef oddStr():\n    n = int(input())\n    if(n > 1):\n        s = \"a\"*(int(n\/2))\n        s += \"b\"\n        s += \"a\"*(int(n\/2)-1)\n        if(n % 2 != 0):\n            s += \"c\"\n    else:\n        s = \"a\"\n    print(s)\n\n\nfor i in range(t):\n    oddStr()\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if (n == 1):\n        print('a')\n    else:\n        if (n % 2):\n            print('a' * (n \/\/ 2 - 1) + 'b' + 'a' * (n \/\/ 2) + 'c')\n        else:\n            print('a' * (n \/\/ 2 - 1) + 'b' + 'a' * (n \/\/ 2))\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"def sol():\n    n = int(input())\n\n    if n == 1:\n        print('x')\n    elif n % 2:\n        print('x'*(n \/\/ 2) + 'yz' + 'x'*(n \/\/ 2 - 1))\n    else:\n        print('x'*(n \/\/ 2) + 'y' + 'x'*(n \/\/ 2 - 1))\n\nt = int(input())\n\nfor i in range(t):\n    sol()","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    if n%2==1:\n        ans+='c'\n        n-=1\n    ans+='a'*(n\/\/2)\n    ans+='b'\n    ans+='a'*(n\/\/2-1)\n    if n==0:\n        print(\"a\")\n        continue\n    print(ans)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for i in' '*int(input()):\n    n=int(input())\n    c=n%2\n    n=n-n%2\n    print('a'*(n\/\/2)+'b'*[0,1][n>0]+'a'*(n\/\/2-1)+'c'*c)\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    k = n \/\/ 2\n    if n == 1:\n        ans = 'a'\n    elif not n % 2:\n        ans = \"a\" * k + 'b' + 'a' * (k - 1)\n    else:\n        ans = 'a' * k + 'bc' + 'a' * (k - 1)\n    print(ans)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('a')\n    elif n % 2 == 0:\n        m = 'a' * ((n - 2) \/\/ 2)\n        print(f'a{m}b{m}')\n    else:\n        m = 'a' * ((n - 3) \/\/ 2)\n        print(f'a{m}bc{m}')","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    ext = n%2+1\n    lw=(n-ext)\/\/2\n    if n<5:\n        print(\"abcde\"[:n])\n        continue\n    print(\"a\"*lw+\"bc\"[:ext]+\"a\"*(lw+1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print('a')\n    else:\n        if x % 2 == 0:\n            print('a' * (x \/\/ 2) + 'b' + 'a' * ((x \/\/ 2) - 1))\n        else:\n            print('a' * (x \/\/ 2) + 'b' + 'a' * ((x \/\/ 2) - 1) + 'c')\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"T=int(input())\nfor _ in range(T):\n    n=int(input())\n    A=[]\n    if n==1:\n        print(\"a\")\n        continue\n    A.append(\"a\"*(n\/\/2))\n    if n%2==0:\n        A.append(\"b\")\n    else:\n        A.append(\"bc\")\n    A.append(\"a\"*(n\/\/2 -1))\n    print(''.join(A))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"te = int(input())\nwhile te:\n    te -= 1\n    t = int(input())\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    if t <= 26:\n        print(s[:t])\n    else:\n        ans = 'a' * (t \/\/ 2) + 'b' + 'a' * ((t \/\/ 2) - 1)\n        ans = ans + 'c' * (t % 2)\n        print(ans)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"def TestCase() :\n  n = int(input())\n  if (n == 1):\n    print('a')\n  else:\n    s = 'a' * (n \/\/ 2)\n    if (n & 1):\n      s += 'bc'\n    else:\n      s += 'b'\n    s += 'a' * (n \/\/ 2 - 1)\n    print(s)\nif __name__ == \"__main__\" :\n    t = int(input())\n    for _ in range(t):\n        TestCase()","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n=int(input())\n    if n==1:\n        print('a')\n        continue\n    if n%2==0:\n        x=(n-1)\/\/2\n        y=x+1\n        print('a'*y+'b'+'a'*x)\n    else:\n        n-=1\n        x=(n-1)\/\/2\n        y=x+1\n        print('a'*y+'b'+'a'*x+'c')","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    x='cde'; n=int(input());\n    if(n<4): print(x[:n])\n    else:\n        print('a'*(n\/\/2-1)+'b'+'a'*(n\/\/2)+(n%2)*'c')\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if n <= 26:\n        print(\"abcdefghijklmnopqrstuvwxyz\"[:n])\n        continue\n    x = n - 1 - (n % 2 == 1)\n    print('a'*(x \/\/ 2) + 'bc'[:1+(n%2)] + 'a' * ((x \/\/ 2) + 1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print('a')\n        continue\n    ans = 'a' * (n\/\/2)\n    if n % 2 == 1:\n        ans += 'bc'\n    else:\n        ans += 'b'\n    ans += 'a' * (n\/\/2 - 1)\n    print(ans)\n    ","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    if (n == 1):\n        print('a')\n        continue\n    if (n % 2 == 0):\n        print('a'*(n\/\/2) + 'b' + 'a'*(n\/\/2 - 1))\n    else:\n        print('a'*(n\/\/2) + 'bc' + 'a'*(n\/\/2 - 1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"T=int(input())\nfor _ in range(T):\n    n=int(input())\n    if (n==1):\n        print(\"a\")\n        \n    elif (n%2==0):\n        x=n\/\/2\n        ans=[\"a\"]*x+ [\"b\"]+[\"a\"]*(x-1)\n        print(*ans,sep=\"\")\n    else:\n        x=n\/\/2\n        ans=[\"a\"]*x+ [\"b\",\"c\"]+[\"a\"]*(x-1)\n        print(*ans,sep=\"\")\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"T=int(input())\nfor t in range(T) :\n    n=int(input())\n    x=n\/\/2\n    print('a'*x+'bc'[:n-x-max(0,x-1)]+'a'*max(0,x-1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n=int(input())\n    if(n==1):\n        print('a')\n    elif(n==2):\n        print('ab')\n    else:\n        if(n%2==0):\n            xx=n\/\/2\n            print('a'*xx+'b'+'a'*(xx-1))\n        else:\n            n-=1\n            xx=n\/\/2\n            print('a'*xx+'b'+'a'*(xx-1)+'c')","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor tc in range(t):\n\n    n = int(input())\n\n    if n == 1:\n        print('a')\n        continue\n\n    m = n\/\/2\n\n    res = []\n\n    for i in range(m):\n        res.append('a')\n\n    res.append('y')\n\n    if n % 2:\n        res.append('x')\n\n    for i in range(m-1):\n        res.append('a')\n\n    print(''.join(res))\n\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    if n==1:\n        print(\"x\")\n    elif n%2==0:\n        print(\"a\"*(n\/\/2)+\"x\"+\"a\"*(n\/\/2-1))\n    else:\n        print(\"a\"*(n\/\/2)+\"xy\"+\"a\"*(n\/\/2-1))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nwhile t>0:\n    n = int(input())\n    ans = 'a'*int(n\/2)+'b'+'a'*int(n\/2-1)\n    if n % 2 == 1:\n        ans+='c'\n    if n==1:\n        ans='a'\n    print(ans)\n    t-=1","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput = stdin.buffer.readline\n\ndef func():\n    if n == 1:\n        print('a')\n\n    else:\n        s = 'a' * (n\/\/2)\n        if n & 1:\n            s += 'bc'\n        else:\n            s += 'b'\n        s += 'a' * (n\/\/2-1)\n        print(s)\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    func()\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t):\n n=int(input())\n s=\"\"\n if(n==1):\n  print('a')\n  t-=1\n  continue\n if(n%2==0):\n  s+=int(n\/2)*'a'+'b'+int((n\/2-1))*'a'\n else:\n  s+=int(n\/2)*'a'+'bc'+int((n\/2-1))*'a'\n print(s)\n t-=1\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in [0]*t:\n    n = int(input())\n    if n%2:\n        print('c'*int(n>1) + 'a'*(n\/\/2-1) + 'b' + 'a'*(n\/\/2))\n    else:\n        print('a'*(n\/\/2-1) + 'b' + 'a'*(n\/\/2))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"\n\n\nif __name__ == '__main__':\n    T = int(input())\n    for t in range(T):\n        N = int(input())\n        ans = 'a'*(N\/\/2)+'b'+'a'*((N\/\/2)-1)\n        if N&1 and N != 1:\n            ans+='c'\n        print(ans)\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\nfor t in range(T):\n    n = int(input())\n    k = n\/\/2\n    if n==1:\n        print('a')\n        continue\n    elif n%2:\n        s='a'*(k)+'bc'+'a'*(k-1)\n    else:\n        s='a'*(k)+'b'+'a'*(k-1)\n    print(s)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    s = int(input())\n    if s%2 == 0:\n        n = (s-2)\/\/2\n        ans = 'b'*n + 'a' + 'b'*(n+1)\n    else:\n        if s == 1:\n            ans = 'a'\n        else:\n            n = (s-3)\/\/2\n            ans = 'b'*n + 'a' + 'c' + 'b'*(n+1)\n    print(ans)","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"\nt=int(input())\n\nfor _ in range(t):\n    n=int(input())\n\n    if n<=3:\n        print([\"\",\"a\",\"ab\",\"abc\"][n])\n        continue\n\n    m = n \/\/ 2\n    if n%2==0:\n        print(\"a\"*m+\"b\"+\"a\"*(m-1))\n    else:\n        print(\"a\"*m+\"bc\"+\"a\"*(n-m-2))\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('a')\n        continue\n    elif n == 2:\n        print('ab')\n        continue\n    half = n\/\/2\n    if n % 2:\n        print('a'*(half-1)+'b'+'a'*half+'c')\n    else:\n        print('a'*(half-1)+'b'+'a'*half)\n        ","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n  n = int(input())\n  if n==1:\n    print(\"a\")\n  else:\n    k = n\/\/2\n    print(\"a\"*k + \"b\" + \"a\"*(k-1) + (\"c\" if n%2!=0 else \"\"))\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"I=input\nfor i in' '*int(I()):n=int(I());c=n%2;n-=n%2;print('a'*(n\/\/2)+'b'*+(n>0)+'a'*(n\/\/2-1)+'c'*c)\n","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n n=int(input())\n if n <= 5:\n  print('abcde'[:n])\n else:\n  print('a'*(n\/\/2-1)+'bc'[:1+(n%2)]+'a'*(n\/\/2))","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\ninput = sys.stdin.readline\n\nt = int(input())\n\nwhile(t>0):\n    n = int(input())\n    \n    if n==1:\n        s = 'a'\n    else:\n        s = 'a' * (n\/\/2)\n        if n%2!=0:\n            s += 'bc'\n        else:\n            s += 'b'\n        s += 'a' * (n\/\/2-1)\n    \n    print(s)\n    \n    t-=1","Incorrect Solution":null},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n  n = int(input())\n  k = n\/\/2\n  print(\"a\"*k + \"b\" + \"a\"*(k-1) + (\"c\" if n%2!=0 else \"\"))\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\n\ndef oddStr():\n    n = int(input())\n    s = \"a\"*(int(n\/2))\n    s += \"b\"\n    s += \"a\"*(int(n\/2)-1)\n    if(n % 2 != 0):\n        s += \"c\"\n    print(s)\n\n\nfor i in range(t):\n    oddStr()\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\nfor t in range(T):\n    n = int(input())\n    k = n\/\/2\n    if n%2:\n        s='a'*(k)+'bc'+'a'*(k-1)\n    else:\n        s='a'*(k)+'b'+'a'*(k-1)\n    print(s)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    if (n % 2):\n        print('a' * (n \/\/ 2 - 1) + 'b' + 'a' * (n \/\/ 2) + 'c')\n    else:\n        print('a' * (n \/\/ 2 - 1) + 'b' + 'a' * (n \/\/ 2))\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\n\n\nif __name__ == '__main__':\n    T = int(input())\n    for t in range(T):\n        N = int(input())\n        ans = 'a'*(N\/\/2)+'b'+'a'*((N\/\/2)-1)\n        if N&1:\n            ans+='c'\n        print(ans)\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor tc in range(t):\n\n    n = int(input())\n\n    m = n\/\/2\n\n    res = []\n\n    if n % 2:\n        res.append('x')\n\n    for i in range(m):\n        res.append('a')\n\n    res.append('y')\n\n    for i in range(m-1):\n        res.append('a')\n\n    print(''.join(res))\n\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor m in range(int(input())) :\n    \n    #n, k = list(map(int, input().split()))                                   \n    #a.sort()\n    n = int(input())\n    #arr = {} \n\n    print(\"aab\")"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for m in range(int(input())) :\n    \n    #n, k = list(map(int, input().split()))                                   \n    #a.sort()\n    n = int(input())\n    #arr = {} \n   # a = list(map(int, input().split()))                                   \n    s = \"a\" * (n\/\/2)\n    if not( n&1) :\n        s+= \"bc\"\n    else:\n        s+= \"b\"\n    s+= \"a\" * (n\/\/2) \n    print(s)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor m in range(int(input())) :\n    \n    #n, k = list(map(int, input().split()))                                   \n    #a.sort()\n    n = int(input())\n    #arr = {} \n   # a = list(map(int, input().split()))                                   \n    s = \"a\" * (n\/\/2)\n    if n&1 :\n        s+= \"bc\"\n    else:\n        s+= \"b\"\n    s+= \"a\" * (n\/\/2) \n    print(s)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    s = 'a'*(n\/\/2)\n    if n & 1:\n        s += 'bc'\n    else:\n        s += 'b'\n    s += 'a'*(n\/\/2-1)\n    print(s)\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor m in range(int(input())) :\n    \n    #n, k = list(map(int, input().split()))                                   \n    #a.sort()\n    n = int(input())\n    #arr = {} \n   # a = list(map(int, input().split()))                                   \n    s = \"\"\n    if n%2 ==0:\n        s = \"a\" * (n-1) + \"b\"\n    else:\n        s = \"a\" * n\n    print(s)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    if n%2==1:\n        ans+='c'\n        n-=1\n    ans+='a'*(n\/\/2)\n    ans+='b'\n    ans+='a'*(n\/\/2-1)\n    if n==1:\n        print(\"a\")\n        continue\n    print(ans)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    y=\"\"\n    n=int(input())\n    if(n==1):\n        print(\"a\")\n    elif(n==2):\n        print(\"ab\")\n    else:\n        for i in range(n-1):\n            if(i==n\/\/2):\n                y=y+'bc'\n            else:\n                y=y+'a'\n        print(y)\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    if n%2==1:\n        print('a'*n)\n    else:\n        print('a'*(n-1)+'b')"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile(t):\n n=int(input())\n s=\"\"\n if(n%2==0):\n  s+=int(n\/2)*'a'+'b'+int((n\/2-1))*'a'\n else:\n  s+=int(n\/2)*'a'+'bc'+int((n\/2-1))*'a'\n print(s)\n t-=1\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput = sys.stdin.buffer.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n\n    if n == 1:\n        print(\"a\")\n    elif n == 2:\n        print(\"ab\")\n    elif n % 2:\n        print(\"a\"*(n\/\/2)+\"bc\" + \"a\"*(n\/\/2-1))\n    else:\n        print(\"a\"*(n\/\/2) + \"b\" + \"a\"*(n\/\/2))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\ndef TestCase() :\n  n = int(input())\n  if (n == 1):\n    print('a')\n  else:\n    s = 'a' * (n \/\/ 2)\n    if (n & 1):\n      s += 'bc'\n    else:\n      s += 'b'\n    s += 'a' * (n \/\/ 2 - 1)\n    print(s)\nif __name__ == \"__main__\" :\n    t = int(input())\n    for _ in range(t):\n        TestCase()"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def sol():\n    n = int(input())\n\n    if n == 1:\n        print('x')\n    if n % 2:\n        print('x'*(n \/\/ 2) + 'yz' + 'x'*(n \/\/ 2 - 1))\n    else:\n        print('x'*(n \/\/ 2) + 'y' + 'x'*(n \/\/ 2 - 1))\n\nt = int(input())\n\nfor i in range(t):\n    sol()"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n n=int(input())\n if n <= 5:\n  print('abcde'[:n])\n else:\n  print('a'*(n\/\/2-1)+('b'*(1+(n%2)))+'a'*(n\/\/2))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\ninput = sys.stdin.readline\n\nt = int(input())\n\nwhile(t>0):\n    n = int(input())\n    \n    if n%2==0:\n        s = 'a'*(n-1) + 'b'\n    else:\n        s = 'a'*n\n    \n    print(s)\n    \n    t-=1"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput=sys.stdin.readline\nt=int(input())\nal=\"abcdefghijklmnopqrstuvwxyz\"\nfor _ in range(t):\n  n=int(input())\n  if n%2==0:\n    print(\"a\"*(n\/\/2-1)+\"b\"+\"a\"*(n\/\/2))\n  else:\n    print(\"a\"*(n\/\/2-1)+\"b\"+\"c\"+\"a\"*(n\/\/2))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T=int(input())\nfor _ in range(T):\n    n=int(input())\n    A=[]\n    A.append(\"a\"*(n\/\/2))\n    if n%2==0:\n        A.append(\"b\")\n    else:\n        A.append(\"bc\")\n    A.append(\"a\"*(n\/\/2 -1))\n    print(''.join(A))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\ninput= sys.stdin.buffer.readline\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    if(n%2 == 0):\n        k = n\/\/2\n        ans = \"a\"*k + 'b' + 'a'*(k-1)\n    else:\n        k = (n-1)\/\/2\n        ans = 'a'*k + 'bc' + 'a'*(k-1)\n    \n    print(ans)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor tt in range(t):\n\tn = int(input())\n\tif n % 2 == 0:\n\t\tprint('a' * (n \/\/ 2) + 'b' + 'a' * (n \/\/ 2 - 1))\n\telse:\n\t\tprint('a' * (n \/\/ 2) + 'b' + 'a' * (n \/\/ 2 - 1) + 'c')\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nimport math\nimport collections\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\n\nr = sys.stdin.readline\n\nfor _ in range(int(r())):\n    N = int(r())\n    if N%2 == 0:\n        print(\"a\"*(N\/\/2)+\"b\"+\"a\"*(N\/\/2-1))\n    else:\n        print(\"a\"*(N\/\/2)+\"b\"+\"a\"*(N\/\/2-1)+\"c\")"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor tc in range(t):\n\n    n = int(input())\n\n    m = n\/\/2\n\n    res = []\n\n    for i in range(m):\n        res.append('a')\n\n    res.append('y')\n\n    if n % 2:\n        res.append('x')\n\n    for i in range(m-1):\n        res.append('a')\n\n    print(''.join(res))\n\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    if n%2==1:\n        ans+='c'\n        n-=1\n    x = n\/\/2 + 1\n    ans+='a'*(x-1)\n    ans+='b'\n    ans+='a'*(x-2)\n    if n==1:\n        print(\"a\")\n        continue\n    print(ans)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in [0]*t:\n    n = int(input())\n    if n%2:\n        print('c' + 'a'*(n\/\/2-1) + 'b' + 'a'*(n\/\/2))\n    else:\n        print('a'*(n\/\/2-1) + 'b' + 'a'*(n\/\/2))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for t in range(int(input())):\n    n = int(input())\n    half = n\/\/2\n    if n % 2:\n        print('a'*(half-1)+'b'+'a'*half+'c')\n    else:\n        print('a'*(half-1)+'b'+'a'*half)\n        "},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    x = int(input())\n    if x % 2 == 0:\n        print('a' * (x \/\/ 2) + 'b' + 'a' * ((x \/\/ 2) - 1))\n    else:\n        print('a' * (x \/\/ 2) + 'b' + 'a' * ((x \/\/ 2) - 1) + 'c')\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n  n = int(input())\n  if (n == 1):\n    print('a')\n  else:\n    s = 'a' * (n \/\/ 2)\n   \n    s += 'a' * (n \/\/ 2 - 1)\n    if (n & 1):\n      s += 'bc'\n    else:\n      s += 'b'\n    print(s)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor _ in range(int(input())):\n    n=int(input())\n    print('a' if n==1 else 'a'*(n\/\/2)+('bc' if n%2==0 else 'b')+'a'*(n\/\/2-1))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"cases = int(input())\ndef solve(length):\n    if length % 2 == 0:\n        print('a', end='')\n        for i in range(length - 1):\n            print('b', end='')\n        print()\n    else:\n        for i in range(length):\n            print('a', end='')\n        print()\nwhile cases:\n    length = int(input())\n    solve(length)\n    cases -= 1\n\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    print(\"a\" * (n \/\/ 2 - 1) + \"b\" + (\"c\" if n % 2 else \"\") + \"a\" * (n \/\/ 2))\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    y=\"\"\n    n=int(input())\n    if(n==1):\n        print(\"a\")\n    else:\n        for i in range(n-1):\n            if(i==n\/\/2):\n                y=y+'bc'\n            else:\n                y=y+'a'\n        print(y)\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    x='aab'; xx='cdefgh'; n=int(input()); k=(2*((n+2)\/\/6)-1); ans=(max(k,0)*x)+((k>0)*'a'); ans+=xx[:n-len(ans)]; print(ans)\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from collections import defaultdict\nimport math\nfor cases in range(int(input())):\n    n=int(input())\n    ans=\"\"\n    if(n%2!=0):\n        n=n-2\n        ans=\"a\"*((n\/\/2)+1)+\"bc\"+\"a\"*(n\/\/2)\n    else:\n        n=n-1\n        ans=\"a\"*((n\/\/2)+1)+\"b\"+\"a\"*(n\/\/2)\n    print(ans)\n        \n\n    \n\n\n    \n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T=int(input())\nfor _ in range(T):\n    n=int(input())\n    if (n%2==0):\n        x=n\/\/2\n        ans=[\"a\"]*x+ [\"b\"]+[\"a\"]*(x-1)\n        print(*ans,sep=\"\")\n    else:\n        x=n\/\/2\n        ans=[\"a\"]*x+ [\"b\",\"c\"]+[\"a\"]*(x-1)\n        print(*ans,sep=\"\")\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print('a')\n        continue\n    ans = 'a' * (n\/\/2)\n    if n % 2 == 0:\n        ans += 'bc'\n    else:\n        ans += 'b'\n    ans += 'a' * (n\/\/2 + 1)\n    print(ans)\n    "},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\nfor m in range(int(input())) :\n    \n    #n, k = list(map(int, input().split()))                                   \n    #a.sort()\n    n = int(input())\n    #arr = {} \n   # a = list(map(int, input().split()))                                   \n    s = \"a\" * (n\/\/2)\n    if( n&1) :\n        s+= \"bc\"\n    else:\n        s+= \"b\"\n    s+= \"a\" * (n\/\/2) \n    print(s)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        print(\"a\" * (n \/\/ 2) + \"yz\" + \"a\" * (n \/\/ 2 + 1))\n    else:\n        print(\"a\" * (n \/\/ 2) + \"z\" + \"a\" * (n \/\/ 2 + 1))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"te = int(input())\nwhile te:\n    te -= 1\n    t = int(input())\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    if t <= 26:\n        print(s[:t])\n    else:\n        ans = 'a' * (t \/\/ 2) + 'b' + 'a' * ((t \/\/ 2) - 1)\n        ans = ans + 'c' * (t % 2)\n"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    if n%2==1:\n        ans+='c'\n        n-=1\n    x = n\/\/2 + 1\n    ans+='a'*(x-1)\n    ans+='b'\n    ans+='a'*(x-2)\n    print(ans)"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    if n%2==1:\n        ans+='c'\n        n-=1\n    x = n\/\/2 + 1\n    ans+='a'*(x-1)\n    ans+='b'\n    ans+='a'*(x-2)\n    if n==1:\n        print(\"a\")\n        continue\n    print(ans,len(ans))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    if n%2==0:\n        print(\"a\"*(n\/\/2)+\"x\"+\"a\"*(n\/\/2-1))\n    else:\n        print(\"a\"*(n\/\/2)+\"xy\"+\"a\"*(n\/\/2-1))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    ext = n%2+1\n    lw=(n-ext)\/\/2\n    print(\"a\"*lw+\"bc\"[:ext]+\"a\"*(lw+1))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        print(\"a\" * (n \/\/ 2 - 1) + \"yz\" + \"a\" * (n \/\/ 2))\n    else:\n        print(\"a\" * (n \/\/ 2 - 1) + \"z\" + \"a\" * (n \/\/ 2))"},{"Name":"1554_D. Diane","Difficulty":"D","Description":"You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):n=int(input());print('a'*(n\/\/2)+'b'+'a'*(n\/\/2-1) if n%2==0 else 'a'*(n\/\/2)+'bc'+'a'*(n\/\/2-1))"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"if __name__ == '__main__':\n    arr = []\n    for i in range(1, 2000):\n        if i % 3 == 0 or i % 10 == 3:\n            continue\n        arr.append(i)\n\n    t = int(input())\n    for _ in range(t):\n        k = int(input())\n        print(arr[k - 1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"kth = [0]\n \nfor i in range(1,1667):\n    if not (i%3 == 0 or str(i)[-1] == '3'):\n        kth.append(i)\n    \n \nt = int(input())\nfor i in range(t):\n    k = int(input())\n \n    print(kth[k])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"ls=[]\n# stroe all the value a list without divisible by 3 or lest digit 3.\nfor i in range(10000):\n    if((i % 3 != 0) and (i % 10 != 3)):\n        ls.append(i)\n\nt=int(input())\nfor _ in range(t):\n    k=int(input())\n    print(ls[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"test_case = int(input())\nnumber = []\n\nfor j in range(0, test_case):\n    num = int(input())\n    number.append(num)\n\nlargest_number = max(number)\nfirst_sequence = []\nx = 1\nfor i in range(0, largest_number + 1):\n    if x % 10 != 3 and x % 3 != 0:\n        first_sequence.append(x)\n        x += 1\n    else:\n        x += 1\n        if x % 10 != 3 and x % 3 != 0:\n            first_sequence.append(x)\n            x += 1\n        else:\n            x += 1\n            if x % 10 != 3 and x % 3 != 0:\n                first_sequence.append(x)\n                x += 1\n\nfor j in range(0, test_case):\n    numbers = int(number[j]-1)\n    print(first_sequence[numbers])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"ans=[0]\nfor i in range(1667):\n    if i%3==0 or i%10==3:\n        continue\n    ans.append(i)\n_t=int(input())\nfor _c in range(_t):\n    n=int(input())\n    print(ans[n])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    k = int(input())\n    count = 0\n    ans = 0\n    while count < k:\n        ans += 1\n        if ans % 3 != 0 and int(str(ans)[-1]) != 3:\n            count += 1\n    print(ans)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"from typing import DefaultDict\n\n\nt = int(input())\nans = [0 for _ in range(t)]\nmx = -1\ns = set()\nd = DefaultDict(list)\n\nfor i in range(t):\n    k = int(input())\n    d[k].append(i)\n    if k > mx:\n        mx = k\n\ni = 1\nc = 0\n\nwhile c <= mx:\n    if i % 3 != 0 and i % 10 != 3:\n        c += 1\n        if c in d:\n            for idx in d[c]:\n                ans[idx] = i\n    i += 1\n\nprint('\\n'.join(map(str, ans)))","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor q in range(t):\n    k = int(input())\n    l = [i for i in range(1,int(3*(k+1))) if i%3 != 0 and i%10 != 3]\n    l.insert(1,1)\n    print(l[k])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"l=[]\nt=1\nwhile len(l)!=1000:\n    if list(str(t))[len(list(str(t)))-1]!=\"3\" and t%3!=0:\n        #print(\"k\")\n        l.append(t)\n    t+=1\n#print(l)\nfor _ in range(0,int(input())):\n    a=int(input())\n    #b=list(map(int,input().split()))\n    print(l[a-1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"T=int(input())\n\nfor t_itr in range(T):\n    N=int(input())\n\n    i=1\n    count=1\n\n    while(count<=N):\n        string=str(i)\n        length=len(string)\n\n        if(i%3==0 or string[length-1]=='3'):\n            pass\n        else:\n            count+=1\n        i+=1\n\n    print(i-1)\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"if __name__ == '__main__':\n    t = int(input())\n    for k in range(t):\n        number = int(input())\n        res = []\n        i = 1\n        while len(res) < number:\n            if (i%3) != 0 and str(i)[-1] != '3':\n                res.append(i)\n            i += 1\n        print(res[number - 1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"def find(a):\n    maxi=max(a)\n    p=[0]*(maxi+1)\n    j=1\n    i=1\n    while(i<maxi+1):\n        if j%10==3 or j%3==0:\n            j+=1\n        else:\n            p[i]=j\n            i+=1\n            j+=1\n    return p\n       \n        \n\n\n\nt=int(input())\na=[]\nfor i in range(t):\n    a.append(int(input()))\np=find(a)\nfor i in a:\n    print(p[i])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"lst=[]\nfor i in range(0,100000):\n        if i%3!=0 and i%10!=3:\n            lst.append(i)\nfor _ in range(int(input())):\n    n=int(input())\n    print(lst[n-1])        \n    ","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"import math as M\nimport collections as C\nimport sys\nIP = lambda: list(map(int, input().split()))\nip = lambda: input()\nINF = sys.maxsize\nMAX = 10**9+7\n\nret = []\nfor i in range(1, INF):\n    if len(ret) == 1000:\n        break \n    if i % 3 != 0 and i % 10 != 3:\n        ret.append(i)\nfor _ in range(int(ip())):\n    n = int(ip())\n    print(ret[n-1])\n\n\n\n\n\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:\n    r=i=0\n    while i<int(s):r+=1;i+=r%10!=3and r%3>0\n    print(r)\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    num = 0\n    while n:\n        num += 1\n        while num % 3 == 0 or str(num)[-1] == '3':\n            num += 1\n        n -= 1\n    print(num)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nmas=[1,2,4,5,7,8,10,11,14,16]\ncount=16\nwhile len(mas)<1000:\n    count+=1\n    if count%10!=3 and count%3!=0:\n        mas.append(count)\n\nfor i in range(t):\n    n=int(input())\n    n-=1\n    print(mas[n])\n    \n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"#code goes here\ntc=int(input())\nfor _ in range(tc):\n    k=int(input())\n    likes=[]\n    i,cnt=1,1\n    while cnt<=k:\n        if i%3!=0 and i%10!=3:\n            likes.append(i)\n            cnt+=1\n        i+=1\n    print(likes[-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nquery = []\nmax_query = 0\nfor _ in range(n):\n    q = int(input())\n    query.append(q)\n    if q > max_query:\n        max_query = q\n\n\ndef is_dislike(x):\n    return (x % 3 == 0) | (str(x)[-1] == '3')\n\n\nlength = 1\ncur = 0\narr = [0] + [None] * max_query\nwhile True:\n    if not is_dislike(cur):\n        arr[length] = cur\n        length += 1\n    cur += 1\n    if length == max_query + 1:\n        break\n\nfor i in query:\n    print(arr[i])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n= int(input())\n    k = 1\n    for i in range(1,n):\n        k+=1\n        if(k%3==0):\n           k+=1\n        if(k%10==3):\n            k+=1\n        if(k%3==0):\n           k+=1\n    print(k)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    K=int(input())\n    i=1\n    out=0\n    while out<K:\n        if i%3==0 or i%10==3:\n            i+=1\n            continue\n        out+=1\n        if out==K:\n            break\n        i+=1\n    print(i)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    lst=[]\n    i=1\n    while(len(lst)<=n):\n        if i%10!=3 and i%3!=0:\n            lst.append(i)\n        i=i+1\n    print(lst[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"test = int(input())\n\nlimit = 0\ninputs = []\n\nfor i in range(test):\n    val = int(input())\n    limit = max(limit,val)\n    inputs.append(val)\n    \nres = []\ni = 1\n\nwhile len(res) < limit:\n    if i % 3 != 0 and i % 10 != 3:\n        res.append(i)\n        \n    i += 1\n    \nfor num in inputs:\n    print(res[num-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"count=1\nseq=[]\nfor i in range(1000):\n    if count%3==0 or int(str(count)[-1])==3:\n        count+=1\n        if count%3==0 or  int(str(count)[-1])==3:\n            count+=1\n            seq.append(count)\n        else:\n            seq.append(count)\n    else:\n        seq.append(count)\n    count+=1\nfor _ in range(int(input())):\n    print(seq[int(input())-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"def series():\n    ls = []\n    j = 0\n    while len(ls) <= 1000:\n        if j % 3 != 0 and j % 10 != 3:\n            ls.append(j)\n        j += 1\n    return ls\n\n\nn = int(input())\nlst1 = []\nfor i in range(n):\n    k = int(input())\n    lst1.append(k)\nlis = series()\nfor i in range(n):\n    m = lis[lst1[i]-1]\n    print(m)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"z=[]\nfor i in range(1,100001):\n    if(i%3!=0):\n        i=str(i)\n        if i[len(i)-1]!='3':\n            z.append(i)\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    print(z[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    a=[]\n    cnt,i =1,1\n    while(cnt<=n):\n        if(i%3!=0 and i%10!=3):\n            a.append(i)\n            cnt+=1\n        i+=1\n    print(a[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t):\n    n=0\n    m=int(input())\n    while(m):\n        n+=1\n        s=str(n)\n        if(s[-1]=='3' or n%3==0):\n            continue\n        m-=1\n    print(n)\n    t-=1","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"\n\n\narr = [0 for i in range(1001)]\n\ncount = 0\nn = 1 \n\ndef ok(n):\n\n\tif(n%10 == 3):\n\t\treturn False\n\n\tif(n%3==0):\n\t\treturn False\n\n\treturn True\n\nwhile(count<1000):\n\n\tif(ok(n)):\n\t\tarr[count] = n \n\t\tcount +=1\n\tn+=1\n\n\n\n\n\nt = int(input())\nfor _ in range(t):\n\t\n\tk = int(input())\n\n\tprint(arr[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"out = 1001*[0]\ni = 1\nn=1\nwhile i<=1000:\n    out[i]=n\n    n+=1\n    while n%3==0 or n%10==3:\n        n+=1\n\n    i+=1\n\nt = int(input())\nfor _ in range(t):\n    print(out[int(input())])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"ans = []\nfor n in range(50000):\n    if n%3 == 0 or str(n)[-1] == '3':\n        continue\n    ans.append(n)\n\nt=input()\nfor _ in range(int(t)):\n    k = int(input())\n    print(ans[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a=[]\nfor i in range(1,1667):\n    if i%3==0:\n        continue\n    elif i%10==3:\n        continue\n    else:\n        a+=[i]\n# print(a)\nfor _ in range(int(input())):\n    n=int(input())\n    print(a[n-1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\nt=int(input())\nl=[]\nfor i in range(1,2000):\n    \n    if i%3!=0 and i%10!=3:\n        l.append(i)\nfor _ in range(t):\n\tn=int(input())\n\tprint(l[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\nt=int(input())\nfor _ in range(t):\n    k=int(input())\n    i=1\n    while k>0:\n        if i%3==0 or i%10==3:\n            i=i+1\n        else:\n            i=i+1\n            k=k-1\n    print(i-1)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"arr=[]\nfor i in range(1,2500):\n    x=str(i)\n    b=1\n    # for j in x:\n    #     if j==\"3\":\n    #         b=0\n    #         break\n    if x[-1]==\"3\":\n        b=0\n    if i%3==0:\n        b=0\n    if b==1:\n        arr.append(i)\n# print(len(arr))\n# print(arr)\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    print(arr[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    k=int(input())\n    num=1\n    l=[]\n    i=0\n    while(i<k):\n        if(num%3==0 or num%10==3):\n            num=num+1\n        else:\n            l.append(num)\n            num=num+1\n            i+=1\n    print(l[-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"from sys import flags, stdin\nimport math\nimport re\nimport queue\nimport typing\ninput = stdin.readline\n\nMOD = 1000000007\nINF = 122337203685477580\n\n\ndef solve_part():\n    vec = []\n    n = int(input().rstrip())   \n    for x in range(1,2010):\n        if str(x)[-1] != '3' and x%3 != 0:\n            vec.append(x)\n    \n    # print(len(vec))\n    print(vec[n-1])\n        \n    return\n\ndef solve():\n    n = int(input().rstrip()) \n    for x in range(0,n):\n        solve_part()\n\n    return\n\n\nif __name__ == '__main__':\n    solve()\n ","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"count=0\nli=[]\nfor i in range(5000):\n    \n    if i%3!=0 and i%10!=3:\n        count+=1\n        li.append(i)\n\nt=int(input())\nfor t in range(t):\n    k=int(input())\n    print(li[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"def dislike_three(k):\n    i, n, l = 0, 0, 0\n    while n != k:\n        i += 1\n        if i % 3 and str(i)[-1] != \"3\":\n            n += 1\n            l = i\n    return l\n\nt = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    print(dislike_three(k))\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"import math\nt=int(input());\nl=list();\nk=1;\ni=1;\nwhile k<=1001:\n    if(i%3!=0 and (i%10!=3)):\n        l.append(i);\n        k=k+1;\n    i=i+1;\n\nwhile t>0:\n    a=int(input());\n    print(l[a-1]);\n    t=t-1;\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"arr = []\ni = 0\nwhile len(arr)<=1000:\n    for i in range(0,2000):\n        if i%3!=0 and i%10!=3:\n            arr.append(i)\n        \ntest_case = int(input())\nfor _ in range(test_case):\n    n = int(input())\n    print(arr[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod=10**9+7\nsys.setrecursionlimit(10**5)\nT=int(input())\nfor _ in range(T):\n    k=int(input())\n    i=1\n    c=0\n    while c<k:\n        if i%3==0 or i%10==3:\n            i+=1\n        else:\n            i+=1\n            c+=1\n    print(i-1)\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c,v = 1,n\n    for i in range(1,2*n):\n        if v == 0:\n            break\n        if i%3 == 0 or i%10 == 3 :\n            continue\n        else:\n            c = i\n            v -= 1\n    print(c)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n      n = int(input())\n      m = []\n      for i in range(1,3001):\n            if i%3!=0 and i%10!=3:\n                  m.append(i)\n      print(m[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"x=1\ni=0\nList=[]\nwhile(True):\n    if x%3==0:\n        x+=1\n        continue\n    elif x%10==3:\n        x+=1\n        continue\n    elif x%3==0 and x%10==0:\n        x+=1\n        continue\n    else:\n        List.append(x)\n        i+=1\n        x+=1\n    if i==1000:\n        break\n        \ntest=int(input())\nwhile(test):\n    k=int(input())\n    print(List[k-1])\n    test-=1\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"ser = []\nfor i in range(1, 4000):\n    if i%3 == 0 or i%10==3:\n        continue\n    ser.append(i)\n\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    print(ser[n-1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"count = int(input())\nk_list = []\nseries_list = []\nfor i in range(count):\n    k_list.append(int(input()))\na = 1\nwhile len(series_list) != 1000:\n    a_end = int(str(a)[len(str(a)) - 1]) \n    if (a % 3 != 0 and a_end != 3) and a % 3 != 0 and a_end != 3:\n        series_list.append(a)\n    a += 1\nfor i in k_list:\n    print(series_list[i - 1])\n\n    \n\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    i = 1\n    while n>1:\n        i+=1\n        if i%10 ==3:\n            i+=1\n        if i%3 ==0:\n            i+=1\n        if i%10 ==3:\n            i+=1\n        n-=1\n\n    print(i)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"x=int(input())\ni=0\nlist1=[]\nlist2=[]\nfor p in range(1,1700):\n    if p%3==0:\n        pass\n    elif p%10==3:\n        pass\n    else:\n        list2.append(p)    \nwhile(i<x):\n    n=int(input())\n    list1.append(list2[n-1])\n    i+=1\nfor h in list1:\n    print(h)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a=[]\nfor i in range(1,1667):\n    if (i%3!=0) and (i%10!=3):\n        a.append(i)\ntest=int(input())\nfor i in range(test):\n    print(a[int(input())-1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"def dislike():\n    count = int(input())\n    ip = []\n\n    for x in range(count):\n        ip.append(int(input()))\n\n    series = []\n    tmp = ''\n\n    for i in range(1670):\n        tmp = str(i)\n        if i%3 !=0 and int(tmp[-1]) != 3 and i != 0:\n            series.append(i)\n\n    for k in ip:\n        print(*series[k-1:k], sep='\\n')\n\ndislike()","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"import sys\nimport math\nimport bisect\nt=int(input())\nfor a0 in range(t):\n    n=int(input())\n    c=1 \n    k=1\n    while(c<=n):\n        if((k%3==0 or str(k)[-1]=='3')):\n                k+=1 \n            \n            \n        else:\n            k+=1 \n            c+=1 \n    print(k-1)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\nT = int(input())\narr = [None]*1000\nc = 0\ni = 1\nwhile c != 1000:\n    if i%3 == 0 or i%10 == 3:\n        i += 1\n    else:\n        arr[c] = i\n        c += 1\n        i += 1\n\nfor  _ in range(T):\n    k = int(input())\n    print(arr[k-1])\n    ","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=int(input())\n    i=0\n    c=1\n    l=[]\n    while True:\n        if c%10==3 or c%3==0:\n            c+=1\n        else:\n            i+=1\n            if i==n:\n                print(c)\n                break\n            c+=1\n   \n        \n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"ans = []\nfor i in range(1,2000):\n    if i%3 != 0 and i%10 != 3:\n        ans.append(i)\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    print(ans[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"test = int(input())\n\nfor i in range(test):\n    val = int(input())\n    num = 1\n    \n    while True:\n        if num % 3 != 0 and num % 10 != 3:\n            val -= 1\n            \n        if val == 0:\n            print(num)\n            break\n        \n        num += 1\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a=[]\nc=1\nwhile(len(a) <= 1001):\n    if c%3==0 or c%10 == 3:\n        c+=1\n    else:\n        a.append(c)\n        c+=1\n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    print(a[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"MAX_V = 1000\n\ndef read_data():\n    n = int(input())\n    values = []\n    for _ in range(n):\n        values.append(int(input()))\n    return n, values\n\n\ndef main():\n    n, values = read_data()\n    polycarp_values = []\n    current_value = 0\n    for _ in range(MAX_V):\n        while 1:\n            current_value += 1\n            if current_value % 3 == 0 or str(current_value)[-1] == \"3\":\n                continue\n            else:\n                polycarp_values.append(current_value)\n                break\n    for v in values:\n        print(polycarp_values[v - 1])\n\n    \nif __name__ == \"__main__\":\n    main()\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    k=int(input())\n    i=1\n    while k>0:\n        if i%3==0 or i%10==3:\n            i=i+1\n        else:\n            i=i+1\n            k=k-1\n    print(i-1)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"import sys\nzz=not __debug__\nif not zz:\n\tinput=sys.stdin.readline\nelse:\t\n\tsys.stdin=open('input.txt', 'r')\n\tsys.stdout=open('output.txt','w')\n\nt = int(input())\narr = []\narr.append(0)\nfor i in range(10001):\n\tif (i%3 == 0 or str(i)[-1] == '3'):\n\t\tcontinue\n\telse:\n\t\tarr.append(i)\n\nfor j in range(t):\n\tx = int(input())\n\tprint(arr[x])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    arr = 0\n    i=1\n    while(arr<n):\n        if (i%3!=0)&(i%10!=3):\n            arr+=1\n        i+=1\n    print(i-1)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"tot = int(input())\nfor i in range(tot):\n    \n    num = int(input())\n\n    lst = []\n    count = 0\n\n    for i in range (3*num):\n    \n        lst.append(str(i))\n        i += 1\n    \n    for i in range (3*num):\n    \n        if lst[i][len(lst[i])-1] == \"3\" or int(lst[i])%3 == 0 :\n        \n            lst[i] = 0\n        \n    for i in range (3*num):    \n    \n        if lst[i] != 0:\n        \n            count +=1\n# =============================================================================\n#             print(f'count is {count}, i is {i}')\n#         \n# =============================================================================\n        if count == num:\n        \n            print(i)\n            break\n    \n\n    \n    ","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"lst = []\nfor i  in range(1,31):\n    if (i%3 != 0) and (str(i)[-1]!= \"3\"):\n        lst.append(i)\n\nt = int(input())\n\nfor _ in range(t):\n    ith = int(input())\n    if(ith%18 == 0):\n         print(((ith\/\/18-1)*30)+lst[(ith%18-1)])\n    else:\n        print(((ith\/\/18)*30)+lst[(ith%18-1)])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor j in range(t):\n  k = int(input())\n  lyst = []\n  for i in range(1,1667):\n    if(i%3 != 0 and i%10!=3):\n        lyst.append(i)\n  print(lyst[k-1])\n    ","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"N = 10010\nt = int(input())\nnums = []\n\ndef check(x):\n    if x%3==0 or x%10==3:\n        return False\n    return True\n\ndef init():\n    for i in range(1,N):\n        if check(i):\n            nums.append(i)\ninit()\nfor _ in range(t):\n    k = int(input())\n    print(nums[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\n\ninput = lambda: stdin.readline().strip()\nlinput = lambda: [*map(int, input().split())]\noutput = []\n\n\ndef lprint(*x):\n    output.append(' '.join(map(str, x)))\n\n\na = []\n\nfor i in range(1, 1000000):\n    if len(a) > 1000:\n        break\n    if i % 3 and i % 10 != 3:\n        a.append(i)\n\n\ndef main():\n    lprint(a[int(input()) - 1])\n\n\nif __name__ == '__main__':\n    for _ in ' ' * int(input()):\n        main()\n    print(*output, sep='\\n')\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"ans = [0]\nfor i in range(1, 4000):\n    if (i % 3) != 0 and (i % 10) != 3:\n        ans.append(i)\n\nfor _ in range(int(input())):\n    print(ans[int(input())])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t>0):\n    #your code goes here\n    demo=[]\n    n=int(input())\n    i=1\n    count=1\n    while(count<=n):\n        if i%3!=0 and i%10!=3:\n            demo.append(i)\n            count=count+1\n        i=i+1\n    print(demo[-1])\n    t=t-1","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nr = []\nfor i in range(t):\n    r.append(int(input()))\nfor i in range(t):\n    ch = 1\n    zn = 1\n    while ch!=r[i]:\n        zn+=1\n        if zn%3 != 0 and zn%10 != 3:\n            ch+=1\n    print(zn)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\ncases = []\ncounter = 1\nn = 0\nwhile t > 0:\n    cases.append(int(input()))\n    t -= 1\n\nfor case in cases:\n    if case == 1:\n        print(1)\n    else:\n        while counter <= case:\n            n += 1\n            if n % 3 != 0 and n.__str__()[-1] != '3':\n                counter += 1\n        print(n)\n        counter = 1\n        n = 0\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(0,t):\n\tans={}\n\tk=int(input())\n\ts=1\n\tfor j in range(1,1670):\n\t\t\tif(j%3==0 or j%10==3):\n\t\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\t\tans[s]=j\n\t\t\ts=s+1\n\tprint(int(ans[k]))","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"arr=[]\ni=0\nwhile len(arr)<=1000:\n    i+=1\n    if i%3==0 or i%10==3:\n        continue\n    else:\n        arr.append(i)\nn=int(input())\nfor j in range(n):\n    x=int(input())\n    print(arr[x-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nneeded = {}\ncount = 0\nnumbers = []\nj = 0\nfor i in range(t):\n    needed[i] = int(input())\nwhile count < 1666:\n    count += 1\n    if count % 3 != 0 and count % 10 != 3:\n        numbers.insert(j, count)\n        j += 1\nfor value in needed.values():\n    print(numbers[value - 1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"# CF\n\ndef seq_checker(n):\n    if n % 3 != 0 and n % 10 != 3:\n        return True\n    else:\n        False\n\nans_string = \"\"\n\nt = int(input())\n\nfor i in range(t):\n\n    k = int(input())\n    loop_var = 1\n    count = 0\n\n    while True:\n        if seq_checker(loop_var) == True:\n            count += 1\n        elif seq_checker(loop_var) == False:\n            pass\n\n        if count == k:\n            ans = loop_var\n            break\n\n        loop_var += 1\n\n    ans_string += str(ans) + \"\\n\"\n\nprint(ans_string)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"def find_loc_dislike_3(loc):\n    num = 0\n    i = 0\n    while i < loc:\n        num += 1\n        # print(i+1,num)\n        if num%3 == 0:\n            continue\n        if num%10 == 3:\n            continue\n        i += 1\n    return num\n \nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(find_loc_dislike_3(k))","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor tt in range(t):\n    k=int(input())\n    curr=0\n    counted=0\n    ans=0\n    while(counted<k):\n        curr+=1\n        if curr%3 and curr%10-3 :\n            ans=curr\n            counted+=1\n    \n    print(ans)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"tests = int(input())\n\nfor i in range(tests):\n    k = int(input())\n    i = 0\n    x = 1\n    while True:\n        if x % 3 != 0 and x % 10 != 3:\n            i += 1\n        if i == k:\n            break\n        x += 1\n    print(x)\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"loop=int(input())\nfor i in range(loop):\n    storage=[]\n    num=int(input())\n    i=1\n    const=1\n    while const<=num:\n        if i%3!=0 and i%10!=3:\n            storage.append(int(i))\n            const+=1\n        i+=1\n    print(storage[-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"lis = []\nfor i in range(1, 2000):\n    if i % 3 != 0 and str(i)[-1] != \"3\":\n        lis.append(i)\n\nfor _ in range(int(input())):\n    x = int(input())\n    print(lis[x-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor t in range(n):\n\tpo=int(input())\n\tcount=0\n\ta=0\n\twhile count<po:\n\t\tif a%3!=0 and a%10!=3: count+=1\n\t\ta+=1\n\tprint(a-1)\n\t\t\n\n\n\n\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    q=int(input())\n    l=list(range(1,q+q))\n    l2=list(range(1,q+q))\n    for i in l:\n        if i%3==0:\n            l2.remove(i)\n            continue\n        elif i%10==3:\n            l2.remove(i)\n    print(l2[q-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"dp = []\nn = 1\nwhile len(dp) != 1000:\n\twhile n % 10 == 3 or n % 3 == 0:\n\t\tn += 1\n\tdp.append(n)\n\tn += 1\n\nt = int(input())\nfor i in range(t):\n\tprint(dp[int(input()) - 1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    \n    k= int(input())\n    c=1\n    while k>0:\n        \n        if c%3 !=0 and str(c)[-1] !='3':\n            k-=1\n        if k>0:\n            c+=1\n    print(c)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\ns=[]\nfor i in range(1,1667):\n    if (i%3!=0) and (i%10!=3):\n        s.append(i)\n\n\n\nfor i in range(t):\n    n=int(input())\n    print(s[n-1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\ncache = []\nfor x in range(1, 10001):\n\tif x % 3 == 0 or str(x)[-1] == '3':\n\t\tcontinue\n\tcache.append(x)\n\nfor _ in range(t):\n\tprint(cache[int(input())-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"def div3():\n    div = []\n    for i in range(1,1700):\n        if (i%3!=0) and (i%10!=3):\n            div.append(i)\n    return div \n\nt = int(input())\ndiv = div3()\nfor i in range(t):\n    k = int(input())\n    print(div[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int (input())\nfor i in range(t):\n  k = int (input())\n  c, d = 1, 0\n  while d < k:\n    if c%3 != 0 and c%10 != 3:\n      d += 1\n      if d == k:\n        break\n    c += 1\n  print(c)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\nc = []\nfor y in range(1667):\n    d = y%10\n    if y%3!=0 and d!=3:\n        c.append(y)\nfor x in range(a):\n    b = int(input())\n    print(c[b-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a=[i for i in range(1700)]\nb=[]\nfor i in range(len(a)):\n    if a[i]%3!=0 and a[i]%10!=3:\n        b.append(a[i])\nT=int(input())\nfor i in range(T):\n    x=int(input())\n    print(b[x-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    k = int(input())\n    c = 0\n\n    j = 1\n    while True:\n        if j % 3 != 0 and j % 10 != 3:\n            k -= 1\n        \n        if k == 0:\n            print(j)\n            break\n    \n        j += 1","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"l=[i for i in range(10000) if(i%3!=0)and(i%10)!=3]\nt=int(input())\nfor _ in range(t):\n    k=int(input())\n    print(l[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nl=[]\nfor _ in range(t):\n    l.append(int(input()))\nm=max(l)\nans=[]\ni=1\nwhile(len(ans)<=m):\n    if(i%3!=0 and i%10!=3):\n        ans.append(i)\n    i+=1\nfor i in l:\n    print(ans[i-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n\tn=int(input())\n\tc=[]\n\tfor j in range(1,1700):\n\t\tif not(j%3==0 or j%10==3):\n\t\t\tc.append(j)\n\tprint(c[n-1])\n\t\t\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"\ndef chack(data):\n    count=0\n    i=0\n    for i in range(10000):\n        if((i%3!=0) and (i%10!=3)):\n            count+=1\n        if(count==data):\n            return i\n\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        k = int(input())\n        x= chack(k)\n        print(x)\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\nd = {}\nc = 1\nfor i in range(1,1001):\n    d[i] = c\n    c+=1\n    if (c%3==0 or str(c)[len(str(c))-1]=='3'):\n        c+=1\n    if (c%3==0 or str(c)[len(str(c))-1]=='3'):\n        c+=1\nfor _ in range(int(input())):\n    n = int(stdin.readline())\n    print(d[n])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"x=int(input())\nwhile(x):\n    k=int(input())\n    j=0\n    a=1 \n    res=0\n    while(j<k):\n        if(a%3!=0 and a%10!=3):\n            res=a \n            j=j+1\n        a=a+1\n        \n    print(res)\n    x=x-1","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nm = []\nans = [1]\nfor y in range(t):\n    m.append(int(input()))\ncount = 1\ni = 1\nwhile i != 1667:\n    i += 1\n    if i % 3 != 0:\n        if i % 10 != 3:\n            ans.append(i)\nfor x in m:\n    print(ans[x - 1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\narr = [i for i in range(0,1667)]\nans = []\nfor i in range(0,len(arr)):\n    c = str(arr[i])\n    if(arr[i]%3!=0 and c[len(c)-1]!='3'):\n        ans.append(arr[i])\nfor _ in range(t):\n    n = int(input())\n    print(ans[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"\nfor _ in range(int(input())):\n      n = int(input())\n      \n      ans = 0\n      while(n):\n            ans+=1\n            if ans % 10 != 3 and ans % 3 != 0:\n                  n-=1\n      print(ans)\n                  \n            \n            \n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a = [ i for i in range(1,2000) if i%3 != 0 and str(i)[-1] != '3']\nfor i in [*open(0)][1::]:print(a[int(i.strip())-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"k = int(input())\nfor i in range(k):\n    list = []\n    a = int(input())\n    i = 1\n    count = 1\n    while count <= a:\n        if i % 3 != 0 and i % 10 != 3:\n            list.append(i)\n            count += 1\n        i += 1\n    print(list[-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"from collections import deque, defaultdict, Counter\nfrom itertools import product, groupby, permutations, combinations, accumulate, zip_longest, \\\n    combinations_with_replacement\nfrom math import gcd, floor, inf, log2, sqrt, log10, factorial\nfrom bisect import bisect_right, bisect_left\nfrom statistics import mode\nfrom string import ascii_lowercase, ascii_uppercase\nfrom heapq import heapify, heappop, heappush, heappushpop, heapreplace, nlargest, nsmallest, \\\n    merge\n\narr = []\nfor i in range(1, 2000):\n    if i % 3 != 0 and i%10 != 3:\n        arr.append(i)\n\ncases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    print(arr[num-1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a=[]\nfor i in range(1,10000):\n    if i%3!=0 and i%10!=3:\n        a.append(i)\nn=int(input())\nfor i in range(n):\n    x=int(input())\n    print(a[x-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for __ in range(int(input())):\n    k=int(input())\n    \n    ans=0\n    while k:\n        ans += 1\n        if ans%3==0 or ans%10==3:\n            continue\n        k -= 1\n        \n    print(ans)\n\n     \n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 1\n    j = 1\n    while i <= n:\n        if j % 10 == 3 or j % 3 == 0:\n            j += 1\n        else:\n            j += 1\n            i += 1\n    print(j - 1)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a=[i for i in range(9001) if i%3 and i%10!=3]\nprint(*[a[int(input())-1] for _ in range(int(input()))])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"mass = [1]\nfor i in range(1,10000):\n    if i % 10 != 3 and i % 3 != 0 :\n        mass.append(i)\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    print(mass[k])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"try:\n    lis = []\n    for i in range(5000):\n        if i % 3 == 0 and str(i)[-1] == \"3\":\n            pass\n        elif i % 3 == 0:\n            pass\n        elif str(i)[-1] == \"3\":\n            pass\n        else:\n            lis.append(i)\n    t = int(input())\n    for i in range(t):\n        k = int(input())\n        print(lis[k-1])\n\nexcept:\n    pass","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    k=int(input())\n    l=[]\n    i=1\n    while (len(l)<1000):\n        if((i%3!=0) and (i%10!=3)):\n            l.append(i)\n        i+=1\n    print(l[k-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"l=[]\nfor i in range(1,1667):\n    if i%3!=0 and i%10!=3:\n        l.append(i)\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print(l[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"l=[]\nl.append(0)\nfor i in range(1,1000000):\n    if i%3!=0 and i%10!=3:\n        l.append(i)\nfor t in range(int(input())):\n    k=int(input())\n    print(l[k])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a = [ i for i in range(1,1667) if i%3 != 0 and str(i)[-1] != '3']\nfor i in [*open(0)][1::]:print(a[int(i.strip())-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"M = 5000\ngood_numbers = []\nfor i in range(1, M):\n\tif i % 3 == 0:\n\t\tpass\n\telif i % 10 == 3:\n\t\tpass\n\telse:\n\t\tgood_numbers.append(i)\n\nt = int(input())\nfor i in range(t):\n\tk = int(input())\n\tprint(good_numbers[k - 1])\n\t\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    k = 1\n    c = 0\n    ans = 0\n    while c<n:\n        if k%3!=0 and k%10!=3:\n            c += 1\n            if c==n:\n                ans = k\n        k += 1\n    print(ans)\n\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nm = []\nwhile t != 0:\n    k = int(input())\n    x = 1\n    while k != 0:\n        if (x % 3 != 0)and(x % 10 != 3):\n            m.append(x)\n            k = k - 1\n        x = x + 1\n    print(m[-1])\n    m.clear()\n    t = t - 1","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"\nt = int(input())\n\nfor u in range(t):\n    k = int(input())\n    \n    n = 0\n    count = 0\n    while count < k:\n        n = n + 1\n        if n%3 != 0 and n%10 != 3:\n            #print(\"In at n = \"+str(n))\n            count  = count + 1\n        #print(count)\n         \n    print(n)\n    ","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    arr =[]\n    for i in range(1,2000): \n        if(i%3!=0 and i%10!=3):\n            arr.append(i)\n        if(len(arr)>=1001):\n            break\n    print(arr[n-1],end='\\n')","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a = []\nfor i in range(1,2000):\n    if i%3 == 0 or (str(i))[-1] == '3': continue\n    a.append(i)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(a[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"from typing import List\n\n\ndef create_array(length: int=1000) -> List[int]:\n    array = []\n\n    num = 1\n    while len(array) < length:\n        if not (num % 3 == 0 or str(num)[-1] == '3'):\n            array.append(num)\n        num += 1\n\n    return array\n\ndef main():\n    array = create_array()\n    t = int(input())\n\n    for _ in range(t):\n        k = int(input())\n        print(array[k - 1])\n\n\nif __name__ == \"__main__\":\n    main()\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"x = []\na = 0\ni = 1\n\nwhile a <= 1000:\n    if i % 3 != 0 and i % 10 != 3:\n        a += 1\n        x.append(i)\n        i += 1\n    else:\n        i += 1\n\nfor _ in range(int(input())):\n    n = int(input())\n    print(x[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"tt = int(input())\nl = [x for x in range(1700) if (x % 3 != 0 and x % 10 != 3)]\nfor _ in range(tt):\n    n = int(input())\n    print(l[n - 1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ntest = int(stdin.readline())\n\nwhile test:\n    arr=[]\n    n = int(stdin.readline())\n    i=1\n    while len(arr)<n:\n        if i%3!=0:\n            if i%10!=3:\n                arr.append(i)\n        i+=1\n    \n    print(arr[-1])\n    test-=1\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"arr = []\nn = 1\nwhile len(arr) !=1000:\n    if not (n%3 == 0 or n%10 == 3):\n        arr.append(n)\n    n += 1\n\nfor i in range(int(input())):\n        j = int(input())\n        print(arr[j-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    lis = []\n    n = int(input())\n    i = 1\n    count = 1\n    while count <= n:\n        if i%3!=0 and i%10!=3:\n            lis.append(i)\n            count += 1\n        i += 1\n    print(lis[-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n = int(input())\n    k = 0\n    while n > 0:\n        k += 1\n        if k % 3 != 0 and k % 10 != 3:\n            n -= 1\n    print(k)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"import math as mt\nimport sys, string\nfrom collections import Counter, defaultdict\ninput = sys.stdin.readline\n \nMOD = 1000000007\nPI = 3.14159265358979323\n \nI = lambda : int(input())\nS = lambda : input()\nM = lambda : map(int, input().split())\nMs = lambda : map(str, input().split()) \nARR = lambda : list(map(int, input().split()))\n\ndp = []\ndef precalculate():\n\tdef isValid(n):\n\t\tif n%3==0 or n%10==3: return False\n\t\treturn True\n\tnum = 1\n\twhile len(dp) != 1000:\n\t\tif isValid(num): dp.append(num)\n\t\tnum += 1\n\ndef solve():\n\tk = I()\n\tprint(dp[k-1])\n\nprecalculate()\ntc = I()\nfor _ in range(tc):\n\tsolve()","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"import math\n\nfor _ in range(int(input())):\n    n=int(input())\n    \n    ans =0\n    i=1 \n    \n    arr=[]\n    while i<3000:\n        if i%3!=0 and i%10!=3:\n            arr.append(i)\n        i=i+1\n            \n    print(arr[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\ns = []\nfor i in range(a):\n    s.append(int(input()))\nd = [i for i in range(1, max(s)*2)]\ndel d[2::3]\nz = 0\nfor elem in d:\n    if elem%10 == 3:\n        del d[z]\n    z+=1\nfor elem in s:\n    print(d[elem-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"p=int(input())\nfor i in range(p):\n    n=int(input())\n    k=0\n    if n%18==0:\n        k=int(n\/18)-1\n    else:\n        k=int(n\/18)\n    k = k * 30\n    r=n%18\n\n    val=[1,2,4,5,7,8,10,11,14,16,17,19,20,22,25,26,28,29]\n    print(k+val[r-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nl = []\nfor _ in range(t):\n    n = int(input())\n    l.append(n)\n\nr = [*range(max(l)*2)]\nr = [i for i in r if i%3 != 0]\nr = [i for i in r if i%10 != 3]\nfor x in l:\n    print(r[x-1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for q in range(int(input())):\n k=int(input())\n i=0\n while k>0:\n  k-=1\n  i+=1\n  while i%3==0 or i%10==3:\n   i+=1\n print(i)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nlst = []\nfor i in range(1, 10000):\n\n    if i % 10 != 3 and i % 3 != 0:\n        lst.append(i)\n\n\nfor _ in range(t):\n    n = int(input())\n    print(lst[n-1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"def func() :\n    a = []\n    for i in range(10001) :\n        if i%3==0 or i%10==3 :\n            continue\n        else :\n            a.append(i)\n    return a\n    \nl = []    \nl = func() \nt = int(input())\nfor tt in range(t) :\n    x = int(input())\n    print(l[x-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a = []\nfor k in range(1,2000):\n    if (k % 3 != 0):\n        if (k % 10 != 3):\n            a.append(k)\n\nt =int(input())\nfor z in range(t):\n    n = int(input())\n    for l in range(len(a)):\n        if n == l:\n            print(a[l-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"X = 1\nKth = []\nKth.append(1)\nwhile (len(Kth) < 1010):\n    if not (X%3 == 0 or X%10 == 3):\n        Kth.append(X)\n    X += 1\n# print(Kth)\ntC = int(input())\nfor __ in range(tC):\n    K = int(input())\n    print(Kth[K])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a = []\ni = 1\nwhile len(a) < 1000:\n    if i % 10 != 3 and i % 3 != 0:\n        a.append(i)\n    i += 1\nt = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    print(a[k - 1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n      n = int(input())\n      k = list()\n      for i in range(1,3001):\n            if i%3!=0 and i%10!=3:\n                  k.append(i)\n      print(k[n-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"# cook your dish here\nt=int(input())\nfor i in range(t):\n    list=[]\n    n=int(input())\n    i=1\n    x=1 \n    while x<=n:\n        if i%3!=0 and i%10!=3:\n          list.append(i)\n          x=x+1\n        i=i+1\n    print(list[-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nl=[]\nfor i in range(1,1667):\n    if i%3!=0 and i%10!=3:\n        l.append(i)\nfor _ in range(n):\n    s=int(input())\n    print(l[s-1])","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"def solve(n):\n    likes = []\n    i = 0\n    num = 1\n    while i < 1000:\n        if (num % 3 != 0) and (str(num)[-1] != \"3\"):\n            likes.append(num)\n            i += 1\n        num += 1\n\n    return likes[k - 1]\n\ntest_cases = int(input())\nfor _ in range(test_cases):\n    k = int(input())\n    print(solve(k))","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"\nc = [1]\nk = 1\nn = int(input())\nwhile len(c) != 2000:\n    k += 1\n    if k % 10  != 3 and k % 3 > 0:\n        c.append(k)\nfor i in range(n):\n    y = int(input())\n    print(c[y - 1])\n","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"Answers , i = [] , 0\nfor x in range(1,1001) :\n    if not (str(x+int(i)).endswith('3') and (x+int(i))%3) :\n        Answers.append(x+int(i))\n        i+=0.5\n    elif str(x+int(i)).endswith('3') :\n        i+=1.5\n        Answers.append(x+int(i))\n        i+=0.5\nTogether = list(zip(range(1,1001),Answers))\nn = int(input())\nwhile n>0 :\n    inp = int(input())\n    for i , j in Together :\n        if inp==i :\n            print(j)\n            break\n    n-=1","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n\tk=int(input())\n\tc1=0\n\tcurrent_num=3\n\tj=2\n\tif k<3:\n\t\tprint(k)\n\t\tcontinue\n\twhile j<k:\n\t\tif c1%10!=0 and current_num%3!=0:\n\t\t\tj+=1\n\t\tcurrent_num+=1\n\t\tc1+=1\n\tprint(current_num-1)","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":"a=int(input())\nb=0\nwhile b<a:\n    c=int(input())\n    d=0\n    f=[]\n    while d<10000:\n        e=0\n        if str(d)[-1]=='3':\n            e=1\n        if d%3==0:\n            e=1\n        if e==0:\n            f.append(d)\n        d=d+1\n    print(f[c-1])\n    b=b+1","Incorrect Solution":null},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(0,t):\n\tans={}\n\tk=int(input())\n\ts=1\n\tfor j in range(1,2000):\n\t\tif(j%3==0 or j%10==3):\n\t\t\tcontinue\n\t\telse:\n\t\t\tans[s]=j\n\t\ts=s+1\nprint(int(ans[k]))"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a=[i for i in range(1700)]\nb=[]\nfor i in range(len(a)):\n    if a[i]%3!=0 and a[i]%10!=3:\n        b.append(a[i])\nT=int(input())\nfor i in range(T):\n    x=int(input())\n    print(b[x])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    a=[]\n    cnt,i =1,1\n    while(cnt<=n):\n        if(i%3!=0 and i%10!=0):\n            a.append(i)\n            cnt+=1\n        i+=1\n    print(a[-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    num = 0\n    while n:\n        if (num+1) % 3 == 0:\n            num += 1\n        else:\n            n -= 1\n            num += 1\n    print(num)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 1000:\n        print(1666)\n        continue\n    num = 0\n    while n:\n        if ((num+1) % 3 == 0) or str(num)[-1] == '3':\n            num += 1\n        else:\n            n -= 1\n            num += 1\n    print(num)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nans = {}\nfor i in range(t):\n    k = int(input())\n    ans[k] = 0\n    for j in range(k):\n        ans[k] += 1\n        if (ans[k]) % 3 == 0 or (ans[k]) % 10 == 3:\n            ans[k] += 1\n        if (ans[k]) % 3 == 0 or (ans[k]) % 10 == 3:\n            ans[k] += 1\n\nfor value in ans.values():\n    print(value)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"p=int(input())\nfor i in range(p):\n    n=int(input())\n    k=int(n\/18)\n    r=n%18\n    k=k*30\n    val=[1,2,4,5,7,8,10,11,14,16,17,19,20,22,25,26,28,29]\n    print(k+val[r-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = 1\n    for i in range(1,n+1):\n        if i%3 != 0 and i%10 != 3 :\n            i -= 1\n        else:\n            c = i\n    print(c)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nlst=[]\nfor i in range(t):\n    n=int(input())\n    s=str(n)\n    if n%3==0 or s[len(s)-1]==\"3\":\n        continue\n    lst.append(n)\n\nfor j in lst:\n\n    print(j)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nlst = []\nfor i in range(1, 10000):\n\n    if i % 10 != 3 and i % 3 != 0:\n        lst.append(i)\n\n\nfor i in input().split():\n    n = int(i)\n    print(lst[n-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nmas=[1,2,4,5,7,8,10,11,14,16]\ncount=16\nwhile len(mas)<1000:\n    count+=1\n    if count%10!=0 and count%3!=0:\n        mas.append(count)\nfor i in range(t):\n    n=int(input())\n    n-=1\n    print(mas[n])\n    \n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor i in range(0,n):\n    t=int(input())\n    if t%3!=0 and t%10!=3:\n        print(t)\n    else:\n        pass\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c,v = 1,n\n    for i in range(1,2*n):\n        if v == 0:\n            break\n        if i%3 == 0 and i%10 == 3 :\n            continue\n        else:\n            c = i\n            v -= 1\n    print(c)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = []\n    x = 1 \n    while len(a) < k: \n        if str(x)[-1] != 3 and x%3 != 0:\n            a.append(x)\n        x += 1\n        print(a)\n    print(a[k-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    K=int(input())\n    i=1\n    out=0\n    while out<=K:\n        if i%3==0 or i%10==3:\n            i+=1\n            continue\n        out+=1\n        i+=1\n    print(i)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nans = {}\nfor i in range(t):\n    k = int(input())\n    ans[k] = 0\n    for j in range(k):\n        if (ans[k] + 1) % 3 == 0 or (ans[k] + 1) % 10 == 3:\n            ans[k] += 2\n        else:\n            ans[k] += 1\n        if (ans[k]) % 3 == 0 or (ans[k]) % 10 == 3:\n            ans[k] += 1\n\nfor value in ans.values():\n    print(value)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"arr=[]\nfor i in range(1,2500):\n    x=str(i)\n    b=1\n    for j in x:\n        if j==\"3\":\n            b=0\n            break\n    if i%3==0:\n        b=0\n        \n    if b==1:\n        arr.append(i)\n# print(len(arr))\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    print(arr[n-1])\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def poly(n):\n    arr =[]\n    i=0\n    j=0\n    while j<=n:\n        if i%3==0 or i%10==3:\n            \n            i += 1\n            \n        else:\n            arr.append(i)\n            i +=1\n            j += 1\n            \n    return arr[-1]\n            \ntest_case = int(input())\nfor _ in range(test_case):\n    n = int(input())\n    res = poly(n)\n    print(res)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\ncases = []\ncounter = 1\nn = 0\nwhile t > 0:\n    cases.append(int(input()))\n    t -= 1\n\nfor case in cases:\n    if case == 1:\n        print(1)\n    else:\n        while counter <= case:\n            n += 1\n            if n % 3 != 0 and n.__str__()[-1] != '3':\n                counter += 1\n        print(n)\n        counter = 1\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def series():\n    ls = []\n    j = 0\n    while len(ls) <= 1000:\n        if j % 3 != 0 and j % 10 != 3:\n            ls.append(j)\n        j += 1\n    return ls\n\n\nn = int(input())\nlst1 = []\nfor i in range(n):\n    k = int(input())\n    lst1.append(k)\nlis = series()\nfor i in range(n):\n    m = lis[lst1[i-1]]\n    print(m)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input()) + 1\n    noten = n\/\/10\n    noofthree = n\/\/3\n    n +=noofthree\n    if(n)%3==0:\n        n+=1\n    noofthirty = (n\/\/30)+1\n    n = n+noofthirty\n    if(n)%10==3:\n        n += 1\n        if(n%3)==0:\n            n += 1\n    print(n)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = []\n    x = 1 \n    while len(a) < k: \n        if str(x)[-1] != 3 or x%3 != 0:\n            a.append(x)\n        x += 1\n    print(a[k-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"test_case = int(input())\nloop_is_on = True\nwhile loop_is_on:\n    number = int(input())\n    if number % 10 != 3 and number % 3 != 0:\n        print(number)\n    test_case -= 1\n    if test_case <= 0:\n        loop_is_on = False"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"\ncount=0\nli=[]\nfor i in range(5000):\n    \n    if i%3!=0 and i%10!=3:\n        count+=1\n        li.append(i)\n\n\nprint(count)\n\n\nt=int(input())\nfor t in range(t):\n    k=int(input())\n    print(li[k-1])\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for q in range(int(input())):\n k=int(input())\n i=1\n while k>0:\n  k-=1\n  i+=1\n  while i%3==0 or i%10==3:\n   i+=1\n print(i)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"c=0\nfor _ in range(int(input())):\n    q=int(input())\n    l=list(range(1,q+q))\n    #print(l)\n    l2=l\n    for i in l:\n        if i%3==0:\n            l2.remove(i)\n        elif i%10==3:\n            l2.remove(i)\n        #print(i)\n    #print(l)\n    print(l2[q-1])\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    k = int(input())\n    c = 0\n    res = 0\n\n    if k >= 1000:\n        print(1666)\n    else:\n        j = 1\n        while True:\n            if j % 3 != 0 and '3' not in str(j):\n                c += 1\n            \n            if c == k:\n                res = j\n                break\n        \n            j += 1\n\n        print(res)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"arr=[]\ni=0\nwhile len(arr)<=1000:\n    i+=1\n    if i%3==0 or i%10==3:\n        continue\n    else:\n        arr.append(i)\nprint(\"Enter beta:\")\nn=int(input())\nfor j in range(n):\n    x=int(input())\n    print(arr[x-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nfor _ in range(int(input())):\n      n = int(input())\n      ans = ((n-1)\/\/2) + n\n      if (ans\/10 - ans\/\/10) < 0.3 :\n            a = ans\/\/10            \n      else:\n            a = math.ceil(ans\/10)\n      xtra = a - math.ceil(a\/3)\n      while(xtra):\n            ans+=1\n            if ans % 10 != 3 and ans % 3 != 0:\n                  xtra-=1\n      print(ans)\n                  \n            \n            \n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"tot = int(input())\nfor i in range(tot):\n    \n    num = int(input())\n\n    lst = []\n    count = 0\n\n    for i in range (3*num):\n    \n        lst.append(str(i))\n        i += 1\n    \n    for i in range (3*num):\n    \n        if \"3\" in str(lst[i]) or int(lst[i])%3 == 0 :\n        \n            lst[i] = 0\n        \n    for i in range (3*num):    \n    \n        if lst[i] != 0:\n        \n            count +=1\n        \n        if count == num:\n        \n            print(i)\n            break\n    \n\n    \n    "},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor i in range(n):\n    s=int(input())\n    if s%3==0 or s%10==3:\n        pass\n    else:\n        print(s)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile(t):\n    n=1\n    m=int(input())\n    while(m):\n        s=str(n)\n        if(s[-1]=='3' or n%3==0):\n            n+=1\n            continue\n        m-=1\n        n+=1\n    print(n)\n    t-=1"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    k = int(input())\n    c = 0\n    res = 0\n\n    j = 1\n    while True:\n        if j % 3 != 0 and '3' not in str(j):\n            c += 1\n        \n        if c == k:\n            res = j\n            break\n    \n        j += 1\n\n    print(res)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def poly(n):\n    arr =[]\n    i=0\n    j=0\n    while j<n:\n        if i%3!=0 or i%10!=3:\n            arr.append(i)\n            i += 1\n            j += 1\n        else:\n            i +=1\n            \n    return i\n            \ntest_case = int(input())\nfor _ in range(test_case):\n    n = int(input())\n    res = poly(n)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nquery = []\nmax_query = 0\nfor _ in range(n):\n    q = int(input())\n    query.append(q)\n    if q > max_query:\n        max_query = q\n\n\ndef is_dislike(x):\n    return (x % 3 == 0) | (str(x)[-1] == '3')\n\n\nlength = 1\ncur = 0\narr = [0] + [None] * max_query\nwhile True:\n    if not is_dislike(cur):\n        arr[length] = cur\n        length += 1\n    cur += 1\n    if length == max_query + 1:\n        break\n\nprint(arr)\nfor i in query:\n    print(arr[i])\n\n\n\n\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def div3():\n    div = []\n    for i in range(1,1700):\n        if (i%3!=0) and (i%10!=3):\n            div.append(i)\n    return div \n\nt = int(input())\ndiv = div3()\nfor i in range(t):\n    k = int(input())\n    print('res: ',div[k-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nmsg = \"\".join(sys.stdin.readlines())\nx = [int(i) for i in msg.splitlines()]\nnx = []\nfor i in x[1:]:\n    f = [int(q) for q in str(i)]\n    if int(\"\".join(str(p) for p in f)) % 3 != 0 and f[-1] != 0: \n        print(x.index(int(\"\".join(str(p) for p in f))))"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c,v = 1,n\n    for i in range(1,2*n):\n        if v == 0:\n            break\n        elif i%3 == 0 and i%10 == 3 :\n            continue\n        else:\n            c = i\n            v -= 1\n    print(c)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    x = n+n\/\/3\n    if x%3 == 0:\n        print(x+1)\n    else:\n        print(x)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import stdin\ntest = int(stdin.readline())\ncount=0\nfor i in range(1,test+1):\n    n = input()\n    if int(n)%3!=0:\n        if n[-1]!='3':\n            print(int(n))\n    if int(n)%3==0:\n        print('4')\n    if n[-1]=='3':\n        print('2')"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"test = int(input())\n\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\ncache = []\nfor x in range(1, 10001):\n\tif x % 3 or str(x)[-1] == '3':\n\t\tcontinue\n\tcache.append(x)\n\nfor _ in range(t):\n\tprint(cache[int(input())])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def find_loc_dislike_3(loc):\n    num = 0\n    for i in range(1,loc+1):\n        if i%3 == 0:\n            continue\n        if i%10 == 3:\n            continue\n        num += 1\n    return num\n \nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(find_loc_dislike_3(k))"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"if __name__ == '__main__':\n    arr = []\n    for i in range(1, 2000):\n        if i % 3 == 0 or i % 10 == 3:\n            continue\n        arr.append(i)\n\n    t = int(input())\n    for _ in range(t):\n        k = int(input())\n        print(arr[k + 1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"lst = []\nfor i  in range(1,31):\n    if (i%3 != 0) and (str(i)[-1]!= \"3\"):\n        lst.append(i)\n\nt = int(input())\nfor _ in range(t):\n    ith = int(input())\n    print((ith\/\/18)*30+lst[(ith%18)-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"ans = []\nfor i in range(1, 4000):\n    if i % 3 != 0 and i % 10 != 3:\n        ans.append(i)\n\nfor _ in range(int(input())):\n    print(ans[int(input())])\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"k = int(input())\nfor i in range(0, k):\n    a = int(input())\nfor j in range(0, a):\n    if j % 3 == 0 or j % 10 == 3:\n        print(\" \")\n    else:\n        print(j)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n%3==0:\n        print(n\/\/3, n\/\/3)\n    elif n%3==1:\n        print(n\/\/3+1,n\/\/3)\n    else:\n        print(n\/\/3,n\/\/3+1)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def poly(n,arr):\n    #arr =[]\n    i=0\n    j=0\n    while j<n:\n        if i%3==0 or i%10==3:\n            #arr.append(i)\n            i += 1\n            #j += 1\n        else:\n            arr.append(i)\n            i +=1\n            j += 1\n    return arr[-1]\n            \ntest_case = int(input())\narr = []\nfor _ in range(test_case):\n    n = int(input())\n    if len(arr)<n:\n        res = poly(n,arr)\n        print(res)\n\n    else:\n        print(arr[n-1])\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"loop=int(input())\nfor i in range(loop):\n    num=int(input())\n    ans=num+(2*int(num\/3))\n    if ans%3==0 or num%3==0:\n        ans-=1\n    if (num\/3)%2==0:\n        ans+=1\n    print(ans)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = []\n    x = 1 \n    while len(a) <= k: \n        if str(x)[-1] != 3 or x%3 != 0:\n            a.append(x)\n        x += 1\n    print(a[k-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 1\n    j = 1\n    while i <= n:\n        if str(j)[-1] == 3 or j % 3 == 0:\n            j += 1\n        else:\n            j += 1\n            i += 1\n    print(j)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    K=int(input())\n    i=1\n    out=0\n    while out<=K:\n        if i%3==0 or i%10==3:\n            i+=1\n            continue\n        out+=1\n        i+=1\n    print(out)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def func() :\n    a = []\n    for i in range(10001) :\n        s = str(i)\n        if i%3!=0 or s[-1]!='3' :\n            a.append(i)\n    return a\n    \nl = []    \nl = func() \n#print(l)\nt = int(input())\nfor tt in range(t) :\n    x = int(input())\n    print(l[x])\n    \n    "},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = 1\n    for i in range(1,n+1):\n        if i%3 == 0 and i%10 == 3 :\n            i -= 1\n        else:\n            c = i\n    print(c)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"l=[i for i in range(10000) if(i%3!=0)and(i%10)!=3]\nt=int(input())\nfor _ in range(t):\n    k=int(input())\n    print(l[k+1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a=[i for i in range(1700)]\nb=[]\nfor i in range(len(a)):\n    if a[i]%3!=0 or a[i]%10!=3:\n        b.append(a[i])\nT=int(input())\nfor i in range(T):\n    x=int(input())\n    print(b[x])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=1\narr=[]\nj=0\nwhile (j<=1000):\n        if (n%3 != 0 and n%10!=3):\n            arr.append(n)\n        j+=1\n        n+=1\nt = int(input())\nwhile(j<t):\n    i=int(input())\n    print(arr[i-1])\n    j+=1"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = []\nfor i in range(1,2000):\n    if i%3 == 0 or (str(i))[-1] == '3': continue\n    a.append(i)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(a[n])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"list1 = []\nfor _ in range(int(input())):\n    n = int(input())\n    i = 1\n    for i in range(1, 1667):\n        if i % 3 != 0:\n            list1.append(i)\n    print(list1[n-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\ncases = []\ncounter = 1\nn = 0\nwhile t > 0:\n    cases.append(int(input()))\n    t -= 1\n\nfor case in cases:\n    if case == 1:\n        print(1)\n    else:\n        while counter <= case:\n            n += 1\n            if n % 3 != 0 and n.__str__()[-1] != '3':\n                counter += 1\n        print(n)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"tests = int(input())\n\nfor i in range(tests):\n    k = int(input())\n    i = 0\n    x = 1\n    while True:\n        if x % 3 != 0 or x % 10 != 3:\n            i += 1\n        if i == k:\n            break\n        x += 1\n    print(x)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from sys import flags, stdin\nimport math\nimport re\nimport queue\nimport typing\ninput = stdin.readline\n\nMOD = 1000000007\nINF = 122337203685477580\n\n\ndef solve_part():\n    vec = []\n    n = int(input().rstrip())   \n    for x in range(1,2010):\n        if str(x)[-1] != '3' and x%3 != 0:\n            vec.append(x)\n    \n    print(len(vec))\n    print(vec[n-1])\n        \n    return\n\ndef solve():\n    n = int(input().rstrip()) \n    for x in range(0,n):\n        solve_part()\n\n    return\n\n\nif __name__ == '__main__':\n    solve()\n "},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"x=int(input())\nfor i in range(x):\n    k=int(input())\n    if(k%3!=0):\n        print(k)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c,v = 1,n\n    for i in range(1,2*n):\n        if v == 0:\n            break;\n        if i%3 == 0 and i%10 == 3 :\n            continue;\n        else:\n            c = i\n            v -= 1\n    print(c)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def find(a):\n    maxi=max(a)\n    p=[0]*(maxi+1)\n    j=1\n    i=1\n    while(i<maxi+1):\n        if j%10==3 or j%3==0:\n            j+=1\n        else:\n            p[i]=j\n            i+=1\n            j+=1\n    return p\n       \n        \n\n\n\nt=int(input())\n\nfor i in range(t):\n    a=[]\n\n\n    a.append(int(input()))\np=find(a)\nfor i in a:\n    print(p[i])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor _ in range(n):\n    k = int(input())\n    if((k % 3 != 0) and (k % 10 != 3)):\n        print(k)\n\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a= int(input(\"enter a integer between 1 and 1000 : \"))\nif(a>0 and a<1001):\n    b=0\n    j=0\n    for c in range(1, a+1):\n        if((c%3==0) or (c%10)==3):\n            b+=1\n            while((a+b)%3==0 or (a+b)%10==3):\n                b+=1\n    print(a+b+j)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"x=1\ni=0\nList=[]\nwhile(True):\n    if x%3==0:\n        x+=1\n        continue\n    elif x%10==3:\n        x+=1\n        continue\n    elif x%3==0 and x%10==0:\n        x+=1\n        continue\n    else:\n        List.append(x)\n        i+=1\n        x+=1\n    if i==1000:\n        break\nk=int(input())\nprint(List[k-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def poly(n):\n    arr =[]\n    i=0\n    j=0\n    while j<=n:\n        if i%3==0 or i%10==3:\n            \n            i += 1\n            \n        else:\n            arr.append(i)\n            i +=1\n            j += 1\n            \n    return i\n            \ntest_case = int(input())\nfor _ in range(test_case):\n    n = int(input())\n    res = poly(n)\n    print(res)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"p=int(input())\nfor i in range(p):\n    n=int(input())\n    k=int(n\/19)\n    r=n%18\n    k=k*30\n    val=[1,2,4,5,7,8,10,11,14,16,17,19,20,22,25,26,28,29]\n    print(k+val[r-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 1\n    while i <= n:\n        if i % (10 ** (len(str(i)) - 1)) == 3 or i % 3 == 0:\n            n += 1\n        i += 1\n    print(i - 1)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(1,1667):\n        \n        if(i%3!=0 and i%10!=3):\n            print(i)\n        "},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nans = [0 for _ in range(t)]\nd = {}\nmx = -1\n\nfor i in range(t):\n    k = int(input())\n    d[k] = i\n    if k > mx:\n        mx = k\n\ni = 1\nc = 0\n\nwhile c <= mx:\n    if i % 3 != 0 and i % 10 != 3:\n        c += 1\n        if c in d:\n            ans[d[c]] = i\n    i += 1\n\nprint('\\n'.join(map(str, ans)))"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = []\na.append(0)\nfor i in range(1,10001):\n    if (i % 10 != 3):\n        if (i % 3 != 0):\n            a.append(i)\nt = int(input())\nfor l in range(t):\n    n = int(input())\n    for z in range(len(a)):\n        if n == a[z]:\n            print(z)\n\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a=int(input())\nl=[]\nfor _ in range(a):\n         e=int(input())\n         l.append(e)\nt=0\nfor i in l:\n         t=i%10\n         if(i%3==0 or t==3):\n                  l.remove(i)\n         print(l)\n         \n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def dislike_three(k):\n    i, n, l = 0, 0, 0\n    while n != k:\n        i += 1\n        if i % 3 and str(i)[-1] != \"3\":\n            n += 1\n            l = 1\n    return l\n\nt = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    print(dislike_three(k))\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"l=[]\nt=1\nwhile len(l)!=1000:\n    if list(str(t))[len(list(str(t)))-1]!=\"3\" and t%3!=0:\n        #print(\"k\")\n        l.append(t)\n    t+=1\nprint(l)\nfor _ in range(0,int(input())):\n    a=int(input())\n    #b=list(map(int,input().split()))\n    print(l[a-1])\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nwhile(t):\n    n=0\n    m=int(input())\n    while(m):\n        n+=1\n        s=str(n)\n        if(s[-1]=='3' or n%3==0):\n            continue\n        m-=1\n    print(n,end=\"*\\n\")\n    t-=1"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    K=int(input())\n    i=1\n    out=1\n    while out<=K:\n        if i%3==0 or i%10==3:\n            i+=1\n            continue\n        out+=1\n        i+=1\n    print(i)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"a = [ i for i in range(1,2000) if i%3 != 0 and str(i)[-1] != '3']\nfor i in [*open(0)]:print(a[int(i.strip())-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"try:\n    lis = []\n    for i in range(1, 5000):\n        if i % 3 == 0 and str(i)[-1] == \"3\":\n            pass\n        elif i % 3 == 0:\n            pass\n        elif str(i)[-1] == \"3\":\n            pass\n        else:\n            lis.append(i)\n    t = int(input())\n    for i in range(t):\n        k = int(input())\n        print(lis[k])\n\nexcept:\n    pass"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def func() :\n    a = []\n    for i in range(10001) :\n        s = str(i)\n        if (i%3==0) or (s[-1]=='3') :\n            continue\n        else :\n            a.append(i)\n    return a\n    \nl = []    \nl = func() \nt = int(input())\nfor tt in range(t) :\n    x = int(input())\n    print(l[x])\n    \n    "},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def get_not_3(max_num):\n    for num in range(max_num + 1):\n        if num % 10 != 3 and num % 3 != 0:\n            yield num\n\ndef get_result(t):\n    for idx, elem in enumerate(get_not_3(k)):\n        print(idx + 1, elem)\n        if idx + 1 == t:\n            return elem\n\nnum_list = []\nt = int(input())\nfor _ in range(t):\n    num_list.append(int(input()))\n\nfor k in num_list:\n    print(get_result(k))\nfor elem in get_not_3(10):\n    print(elem)\nprint(num_list)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(0,t):\n\tans={}\n\tk=int(input())\n\ts=1\n\tfor j in range(1,1670):\n\t\tif(j%3==0 or j%10==3):\n\t\t\tcontinue\n\t\telse:\n\t\t\tans[s]=j\n\t\ts=s+1\nprint(ans[k])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"p=int(input())\nfor i in range(p):\n    n=int(input())\n    k=0\n    if n%18==0:\n        k=int(n\/18)-1\n    else:\n        k=int(n\/18)\n        k = k * 30\n    r=n%18\n\n    val=[1,2,4,5,7,8,10,11,14,16,17,19,20,22,25,26,28,29]\n    print(k+val[r-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n= int(input())\n    k = n\n    for i in range(n):\n        if(k%3==0):\n           k+=1\n        if(k%10==3):\n            k+=1\n        if(k%3==0):\n           k+=1\n    print(k)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    K=int(input())\n    i=1\n    out=0\n    while out<K:\n        if i%3==0 or i%10==3:\n            i+=1\n            continue\n        out+=1\n        i+=1\n    print(i)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n = int(input())\n    noten = n\/\/10\n    noofthree = n\/\/3\n    n +=noofthree\n    if(n)%3==0:\n        n+=1\n    noofthirty = (n\/\/30)+1\n    n = n+noofthirty\n    if(n)%10==3:\n        n += 1\n        if(n%3)==0:\n            n += 1\n    print(n)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"s=input()\nt=int(s)\neliminated=0\ncheck=0\nj=1\n    \nwhile eliminated+t>=j:\n    \n      for k in range(len(str(j))):\n        \n          if str(j)[k]==3:\n             j+=1\n             eliminated+=1\n             check+=1\n             break\n    \n      if check==0:\n        \n          if int(j\/3)*3==j:\n              j+=1\n              eliminated+=1\n\n          else:\n              j+=1\n        \n      check=0 \n        \nprint(j-1)\n        \n    \n\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n=int(input())\nfor i in range(0,n):\n    t=int(input())\n    if t%3!=0 or t%10!=3:\n        print(t)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = []\n    x = 1 \n    while len(a) < k: \n        if str(x)[-1] != 3 and x%3 != 0:\n            a.append(x)\n        x += 1\n    print(a[k-1])"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    i = 1\n    while n>1:\n        i+=1\n        if i%3 ==0 and i%10 ==3:\n            i+=1\n        n-=1\n    print(i)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    k = int(input())\n    c = 0\n    res = 0\n\n    if k == 1000:\n        print(1666)\n    else:\n        j = 1\n        while True:\n            if j % 3 != 0 and '3' not in str(j):\n                c += 1\n            \n            if c == k:\n                res = j\n                break\n        \n            j += 1\n\n        print(res)\n"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\n# cook your dish here\ndef check(n):\n    sum=0\n    for i in str(n):\n        if int(i)==3:\n            return False\n        sum=sum+int(i)\n    if sum%3==0:\n        return False\n    return True\nfor _ in range(int(input())):\n    n=int(input())\n    \n    ans =0\n    itea = math.ceil(n*1.666)\n    for i in range(1,itea+1):\n        if check(i):\n            ans=i\n    print(ans)\n            \n        \n        "},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    n = int(input())\n    for i in range(1,1000):\n        \n        if(i%3!=0 and i%10!=3):\n            print(i)\n        "},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 0\n    while i != n:\n        if i % len(str(i)) == 3 or i % 3 == 0:\n            n += 1\n        i += 1\n    print(i)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 0\n    while i != n:\n        if i % len(str(i)) == 3 or i % 3 == 0:\n            n += 1\n        i += 1\n    print(i - 1)"},{"Name":"1560_A. Dislike of Threes","Difficulty":"A","Description":"Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 \u2264 k \u2264 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x \u2014 the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    n= int(input())\n    k = 1\n    for i in range(n):\n        k+=1\n        if(k%3==0):\n           k+=1\n        if(k%10==3):\n            k+=1\n        if(k%3==0):\n           k+=1\n    print(k)"},{"Name":"1560_F1. Nearest Beautiful Number (easy version)","Difficulty":"F","Description":"It is a simplified version of problem F2. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 2).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n4\n1 1\n221 2\n177890 2\n998244353 1\n\n\nOutput\n\n\n1\n221\n181111\n999999999","Solution Language":"PYTHON3","Correct Solution":"for nt in range(int(input())):\n    n, k = map(int,input().split())\n    m = n\n    while len(set(str(n))) > k:\n        if n%10==0:\n            n = n\/\/10\n        else:\n            n += 1\n    end = str(min(str(n))) * (len(str(m))-len(str(n)))\n    print (int(str(n)+end))","Incorrect Solution":null},{"Name":"1560_F1. Nearest Beautiful Number (easy version)","Difficulty":"F","Description":"It is a simplified version of problem F2. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 2).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n4\n1 1\n221 2\n177890 2\n998244353 1\n\n\nOutput\n\n\n1\n221\n181111\n999999999","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import sys\nt = int(input())\nfor i in range(t):\n    n,k = sys.stdin.readline().split()\n    k = int(k)\n    L = [n[0]]\n    for s in n:\n        if s not in L:\n            L.append(s)\n    if len(L)<=k:\n        print(n)\n    elif k == 1:\n        if max(L) == L[0]: print (L[0]*len(n))\n        else: print (str(int(L[0])+1)*len(n))\n    else:\n        x,y = L[0],L[1]\n        \n        "},{"Name":"1560_F1. Nearest Beautiful Number (easy version)","Difficulty":"F","Description":"It is a simplified version of problem F2. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 2).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n4\n1 1\n221 2\n177890 2\n998244353 1\n\n\nOutput\n\n\n1\n221\n181111\n999999999","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for s in [*open(0)][1:]:\n    n,k = s.split()\n    x = int(n)\n    while(1):\n        if len(set(str(x))) == int(k):\n            print(x)\n            break\n        x += 1\n        "},{"Name":"1560_F2. Nearest Beautiful Number (hard version)","Difficulty":"F","Description":"It is a complicated version of problem F1. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 10).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10\n\n\nOutput\n\n\n2021\n181111\n34533\n724542\n999999999\n12345678","Solution Language":"PYTHON3","Correct Solution":"l=len\n_,*t=open(0)\nfor p in t:\n x,k=p.split();k=int(k);n=x\n while l(set(x))>k:x=str(int(x)+1).strip('0')\n print(x+(l(n)-l(x))*min(x+'0'*(l(set(x))<k)))","Incorrect Solution":null},{"Name":"1560_F2. Nearest Beautiful Number (hard version)","Difficulty":"F","Description":"It is a complicated version of problem F1. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 10).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10\n\n\nOutput\n\n\n2021\n181111\n34533\n724542\n999999999\n12345678","Solution Language":"PYTHON3","Correct Solution":"_,*t=open(0)\nfor s in t:\n x,k=s.split();k=int(k);n=x\n while len(set(x))>k:x=str(int(x)+1).strip('0')\n print(x+(len(n)-len(x))*min(x+'0'*(len(set(x))<k)))","Incorrect Solution":null},{"Name":"1560_F2. Nearest Beautiful Number (hard version)","Difficulty":"F","Description":"It is a complicated version of problem F1. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 10).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10\n\n\nOutput\n\n\n2021\n181111\n34533\n724542\n999999999\n12345678","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,k=map(int,input().split())\n    tmp = n\n    while len(set(str(tmp))) > k:\n        if tmp%10 == 0:\n            tmp \/\/= 10\n        else:\n            tmp += 1\n            \n    if len(set(str(tmp)))<k:\n        print(str(tmp)+'0'*(len(str(n))-len(str(tmp))))\n    else:\n        print(str(tmp)+min(str(tmp))*(len(str(n))-len(str(tmp))))\n        \n\n","Incorrect Solution":null},{"Name":"1560_F2. Nearest Beautiful Number (hard version)","Difficulty":"F","Description":"It is a complicated version of problem F1. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 10).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10\n\n\nOutput\n\n\n2021\n181111\n34533\n724542\n999999999\n12345678","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n, k = map(int, input().split())\n    x = n\n    while len(set(str(x))) > k:\n        x = x \/\/ 10 if x % 10 == 0 else x + 1\n    p = str(x)\n    d = '0' if len(set(p)) < k else min(p)\n    print(p + d * (len(str(n)) - len(p)))\n","Incorrect Solution":null},{"Name":"1560_F2. Nearest Beautiful Number (hard version)","Difficulty":"F","Description":"It is a complicated version of problem F1. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 10).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10\n\n\nOutput\n\n\n2021\n181111\n34533\n724542\n999999999\n12345678","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    n, k, x, tt = map(int, input().split()*2)\n    while len(set(str(x))) > k: x = x \/\/ 10 if not (x % 10) else x + 1\n    print(str(x) + ('0' if len(set(str(x))) < k else min(str(x))) * (len(str(n)) - len(str(x))))\n","Incorrect Solution":null},{"Name":"1560_F2. Nearest Beautiful Number (hard version)","Difficulty":"F","Description":"It is a complicated version of problem F1. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 10).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10\n\n\nOutput\n\n\n2021\n181111\n34533\n724542\n999999999\n12345678","Solution Language":"PYTHON3","Correct Solution":"for nt in range(int(input())):\n    n, k = map(int,input().split())\n    m = n\n    while len(set(str(n))) > k:\n        if n%10==0:\n            n = n\/\/10\n        else:\n            n += 1\n    end = str(min(str(n))) * (len(str(m))-len(str(n)))\n    print (int(str(n)+end))","Incorrect Solution":null},{"Name":"1560_F2. Nearest Beautiful Number (hard version)","Difficulty":"F","Description":"It is a complicated version of problem F1. The difference between them is the constraints (F1: k \u2264 2, F2: k \u2264 10).\n\nYou are given an integer n. Find the minimum integer x such that x \u2265 n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 10).\n\nOutput\n\nFor each test case output on a separate line x \u2014 the minimum k-beautiful integer such that x \u2265 n.\n\nExample\n\nInput\n\n\n6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10\n\n\nOutput\n\n\n2021\n181111\n34533\n724542\n999999999\n12345678","Solution Language":"PYTHON3","Correct Solution":"times = int(input())\nfor _ in range(times):\n    n, k = map(int, input().split())\n    num = n\n    while len(set(str(num))) > k:\n        if num % 10 == 0:\n            num = num \/\/ 10\n        else:\n            num += 1\n    last = str(min(str(num))) * (len(str(n)) - len((str(num))))\n    print(str(num) + last)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"# l,r = list(map(int,input().split()))\n\n\n# l<=r\n\nt = int(input())\n\nfor i in range(t):\n    l,r = list(map(int,input().split()))\n    \n    if l == r:\n        print(0)\n    elif int(r\/2)+1 >l:\n        print(r%(int(r\/2)+1))\n    else:\n        print(r%l)\n\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"try:\n    lst=[]\n    t=int(input())\n    for _ in range(t):\n        l, r = map(int, input().split(\" \"))\n        mid=r\/\/2\n        if l> mid:\n            print(r%l)\n        else:\n            print(r%((r\/\/2)+1))\nexcept:pass  ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    z = (r+1)\/\/2\n    if z>=l: print(z-1)\n    else: print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input()) \nfor i in range(t):\n    a, b=(int(n) for n in input().split())\n    c=(b>>1)+1\n    if(c<=a):\n        print(b%a)\n    else:\n        print(b%c)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a, b = [int(x) for x in input().split()]\n    print(b%max(b \/\/ 2+1, a))\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"_ = 1\n_ = int(input())\nwhile _ > 0:\n    _ -= 1\n\n    x, y = map(int, input().split())\n    if x == y:\n        print(0)\n        continue\n\n    print(y % max(y\/\/2+1, x))\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"# cook your dish heref\nfor i in range(int(input())):\n    a,b=map(int,input().split())\n    if(a==b):\n        print(0)\n    elif((b\/\/2)>=a):\n       \n        c=b\/\/2\n        print(b-c-1)\n        \n    else:\n        print(b-a)\n        ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def solve(l,r):\n    if r%2==0:\n        if l<=(r\/\/2):\n            return (r\/\/2)-1\n        else:\n            return (r-l)\n    else:\n        if l<=(r\/\/2):\n            return r\/\/2\n        else:\n            return (r-l)\n    \nfor _ in range(int(input())):\n    l,r=map(int,input().split())\n    print(solve(l,r))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n\nn = int(input())\nfor _ in range(n):\n    l, r = map(int, input().split(\" \"))\n\n    if l == r:\n        print(0)\n    else:\n        m = math.ceil(r % ((r \/ 2) + 1))\n        if l <= ((r \/ 2) + 1):\n            print(m)\n        else:\n            print(r - l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    l,r=map(int,input().split())\n    k=r\/\/2+1\n    if(k>=l):\n        print(r%k)\n    else:\n        print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    else:\n        k=r\/\/2+1\n        if k>=l:\n            print(r%k)\n        else:\n            print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile t:\n    t-=1\n    l,r=[int(x) for x in input().split()]\n    if l>r\/\/2:\n        print(r%l)\n    else:\n        print(r%(r\/\/2+1))\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    l,r=map(int,input().split())\n    if l<=r\/\/2:\n        print(r%(r\/\/2+1))\n    else:\n        print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n \ndef main():\n    l, r = map(int, input().split())\n    max_ = (r - 1) \/\/ 2\n    if r - max_ >= l:\n        print(max_)\n    else:\n        print(r - l)\n    \nfor _ in range(int(input())):\n    main()","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    a,b=map(int, input().split())\n    ans=0\n    if int(b\/2)>=a:\n        if int(b\/2)==b\/2:\n            ans=int(b\/2)-1\n            print(ans)\n        else:\n            ans=math.floor(b\/2)\n            print(ans)\n    else:\n        ans=b%a\n        print(ans)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l, r = map(int, input().split())\n    m = max(l, r \/\/ 2 + 1)\n    print(r % m)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a, b = map(int, input().split())\n    m = b\/\/2 + 1\n    if m >= a:\n        print(b % m)\n    else:\n        print(b % a)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    l,r=map(int,input().split())\n    a=r\n    b=max(l,r\/\/2+1)\n    ans=a%b\n    print(ans)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"if __name__ == \"__main__\":\n    test_cases = int(input())\n    for t in range(test_cases):\n        l, r = list(map(int, input().split()))\n        if r % 2 == 0:\n            max_nr = min((r\/2 - 1), r - l)\n        else:\n            max_nr = min((r - 1)\/2, r - l)\n        print(int(max_nr))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a = input().split()\n    b = int(a[1])\n    a = int(a[0])\n    print(b - max(a, b \/\/ 2 + 1))\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def f(l, r):\n    if l <= r \/\/ 2:\n        return r % (r \/\/ 2 + 1)\n    else:\n        return r % l\n    \nn = int(input())\nlst = []\nfor item in range(n):\n    lst.append(f(*[int(item) for item in input().split()]))\nprint(*lst, sep='\\n')\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    elif r%l==r-l:\n        print(r%l)\n    else:\n        x=r%((r\/\/2)+1)\n        print(x)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())  \nfor _ in range(t):\n    l, r = [int(i) for i in input().split()] \n    a = r \n    b = a \/\/ 2 + 1 if a % 2 == 0 else a \/\/ 2\n    if b < l : \n        print(r - l) \n    else :\n        if a % 2 == 0 :\n            print(a - b)\n        else : \n            print(a - b - 1)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    l,r=map(int,input().split())\n    t=0\n    if l>r\/\/2:\n        print(r%l)\n    else:\n        print((r)%((r\/\/2)+1))\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    l, r = map(int, input().split())\n    print(r % max((r\/\/2 + 1), l))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def main():\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        if n > (m + 1) \/\/ 2:\n            print(m % n)\n        else:\n            x = (m + 1) \/\/ 2\n            print(m % x if m % x > m % (x + 1) or x + 1 > m else m % (x + 1))\n\n\nmain()\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def main():\n\tt  = input()\n\tfor _ in range(int(t)):\n\t\tl, r = input().split(\" \")\n\t\tl, r = int(l), int(r)\n\t\ta = r\n\t\tif 2 * l > r:\n\t\t\tb = l\n\t\telse:\n\t\t\tb = a \/\/ 2 + 1\n\t\tprint(a-b)\n\n\n\n\n\nif __name__ == '__main__':\n\tmain()","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for iii in range(int(input())):\n    #n=int(input())\n    q,w=list(map(int,input().split()))\n    #for i in range(w,q-1,-1):\n        #for j in range(q,i):\n            #print(i,j,i%j)\n    \n    if w-q>((w-1)\/\/2):\n        print((w-1)\/\/2)\n    else:\n        print(w-q)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    l, r = list(map(int, input().split()))\n    if r\/\/2 + 1 >= l:\n        print((r-1)\/\/2)\n    else:\n        print(r % l)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\nfor x in range(a):\n    b,c = map(int,input().split())\n    d = c\/\/2\n    if d>=b:\n        e = c%(d+1)\n        print(e)\n    else:\n        print(c%b)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n    n, m = map(int, input().split())\n    k = max(m \/\/ 2 + 1, n)\n    #k = min(m, k)\n    print(m % k)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _t in range(int(input())):\n    l, r = map(int, input().split())\n    if l<=r\/\/2:\n        ans = r%(r\/\/2+1)\n    else:\n        ans = r%l\n    print(ans)\n    ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split())\n    if l<=r\/\/2<=r:\n        print(r%(r\/\/2+1))\n    else:\n        print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r=list(map(int,input().split()))\n    d=(r\/\/2)+1\n    if d>l:\n        print(r%d)\n    else:\n        print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n a,b=map(int,input().split())\n if a==b:print(0)\n elif b\/\/2+1>a:\n  print(b%(b\/\/2+1))\n else:\n  print(b%a)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def solve():\n    l, r = map(int, input().split())\n    if r < l*2:\n        print(r-l)\n    else:\n        print((r-1)\/\/2)\n\n\nif __name__== \"__main__\":\n    t = int(input())\n\n    for _ in range(t):\n        solve()","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n      r,l= input().split()\n      r= int(r)\n      l=int(l)     \n      print(l%max(r,l\/\/2+1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for t in range(int(input())):\n  l,r=list(map(int,input().split()))\n  b=(r+1)\/\/2\n  if(b>=l):\n    print(b-1)\n  else:\n    print(r-l)\n  \n  ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    print(min(r - l, (r - 1) \/\/ 2))\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"read = lambda: map(int, input().split())\nt = int(input())\nfor i in range(t):\n    l, r = read()\n    a = r - (r % 2 == 0)\n    b = max(l, ((a + 1) \/\/ 2))\n    if a < l: a = l\n    res1 = max(a % b, r % l)\n    print(res1)\n    \"\"\"\n    res2 = 0\n    for b in range(l, r + 1):\n        for a in range(b, r + 1):\n            res2 = max(res2, a % b)\n    print(res1, res2, res1==res2)\n    \"\"\"","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split())\n    print(r%max(l,r\/\/2+1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    if r < 2*l:\n        print(r - l)\n    else:\n        print(r - (int(r\/2) + 1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"# import sys\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\n\nn = int(input())\n\nfor x in range(n):\n    a,b=map(int,input().split())\n\n    if a==b:\n        print(\"0\")\n    else:\n        if a>(b\/2):\n            print(b%(a))\n        if a<=b\/2:\n            r=int(b\/2)\n            k=int(b%r)\n            t=int(b%(r+1))\n            print(int(max(k,t)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor _ in range(t):\n    l, r = map(int, input().split())\n    if l > r \/\/ 2:\n        print(r % l)\n    else:\n        print(r % (r \/\/ 2 + 1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input().strip())):\n    a,b = map(int,input().strip().split())\n    ans = 0\n    num = b\/\/2 + 1 \n    if(a==b):\n        ans = 0\n    else:\n        if(num>=a and num<=b):\n            ans = max(b%a, b%num)\n        else:\n            num = ((a+b)\/\/2) +1\n            ans = max(b%a, b%num)\n\n    print(ans)\n\n\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    best = (r + 2) \/\/ 2\n    if best >= l:\n        print(r % best)\n    else:\n        print(r % l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nloop=int(input())\nfor i in range(loop):\n    l,r=map(int,input().split())\n    if l>(r\/2):\n        print(r%l)\n    else:\n        print(r%(int(r\/2)+1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split());\n    if((r\/\/2+1)>=l):\n        print(r%(r\/\/2+1))\n    else:\n        print(r%l)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n \nfor i in range(t):\n    n, m = map(int, input().split())\n    k = max(m \/\/ 2 + 1, n)\n    k = min(m, k)\n    print(m % k)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l, r = map(int, input().split())\n    # maior b tal que (a mod b = b-1) e a,b in [l, r] e a>b\n    # para a = 2b-1, (b+b-1 mod b = b-1) => 2b-1 % b = b-1\n    # b = (a+1)\/\/2 e ans = b-1 se b >= l\n    ans = r % max(l, r\/\/2 + 1)\n    print(ans)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"T=int(input())\nfor t in range(0,T):\n    l,r=map(int,input().split(\" \"))\n    if l==r:\n        print(0)\n    else:\n        ans=r\/\/2 +1\n        \n        if ans>l:\n            print(r%ans)\n        else:\n            print(r%l)\n        ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n\tl, r = map(int, input().split())\n\tprint(r%max(l, r\/\/2 + 1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    a, b = input().split()\n    a = int(a)\n    b = int(b)\n    x = int((b\/2)) + 1\n    x = int(x)\n    if x >= a:\n        print(b % x)\n    else:\n        print(b % a)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    l , r = map(int,input().split())\n    a = r \/\/ 2 + 1\n    print(r - max(l , a))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split())\n    a=r\/\/2\n    ans=0\n    if a>=l and a!=0:\n        ans=max(ans,r%a)\n    if a-1>=l and a-1!=0:\n        ans=max(ans,r%(a-1)) \n    if a+1>=l and a+1 <=r:\n        ans=max(ans,r%(a+1))\n    ans=max(ans,r%l) \n    print(ans)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:a,b=map(int,s.split());print(b%max(a,b\/\/2+1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for s in[*open(0)][1:]:l,r=map(int,s.split());print(r%max(l,r\/\/2+1))\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n    l, r = map(int, input().split())\n    res = 0\n\n    if r == 1:\n        res = 0\n    elif r % 2 == 1:\n        if l > (r + 1) \/\/ 2:\n            res = r - l\n        else:\n            res = (r - 1) \/\/ 2\n    else:\n        if l > (r + 2) \/\/ 2:\n            res = r - l\n        else:\n            res = (r - 2) \/\/ 2\n\n    print(res)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split())\n    x=r\/\/2\n    if l>x:\n        print(r-l)\n    else:\n        if r%2:\n            print(r\/\/2)\n        else:\n            print((r\/\/2)-1)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin\ninput = stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    l, r = [int(x) for x in input().split()]\n    x = max(r \/\/ 2 + 1, l)\n    ans = r % x\n    print(ans)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r = map(int,input().split())\n    a = r\n    b = r\/\/2 + 1\n    if l <= b <= r:\n        print(a%b)\n    else:\n        print(a%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input(\"\"))\nl = []\nif (t>=1 and t<=10000):\n    for i in range(t):\n        a = 0\n        b = 0\n        c = 0\n        \n        p,q = map(int,input().split())\n        if (p>=1 and q<= 1000000000 and p<=q):\n            if ((q\/2) >= p):\n                a = q\/2\n                b = int(a)+1\n                c = q % b\n                l.append(int(c))\n            else:\n                c = q%p\n                l.append(c)\n        else:\n            break\n\n    for i in l:\n        print(i)\n\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def findAns():\n    t=int(input())\n    for i in range(t):\n        l,r=map(int,input().split())\n        if l<=(r)\/\/2:\n            print(r%(r\/\/2+1))\n        else:\n            print(r%l)\nfindAns()\n\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n\ndef find_result(l, r):\n    if math.floor(r \/ 2) >= l:\n        return r - (math.floor(r \/ 2) + 1);\n    return r - l;\n\ndef solve():\n    l,r = map(int, input().split());\n    result = find_result(l, r);\n    print(int(result))\n\nt = int(input());\nfor _ in range(t):\n    solve();","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(t):\n\tl, r = map(int, input().split())\n\tif(r % 2 == 0): ans = r \/ 2 + 1\n\telse: ans = (r + 1) \/ 2\n\tans = max(ans, l)\n\tprint(int(r - ans))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    [l, r] = list(map(int, input().split()))\n\n    divider = int(r\/2)+1\n    if int(r\/2) < l:\n        divider = l\n    elif int(r\/2) == l:\n        divider = l + 1\n    print(r % divider)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    a,b=map(int,input().split())\n    if ((b\/\/2)+(b%2))>=a:\n        ans=(b\/\/2)+1\n        print(b%ans)\n    else:\n        print(b%a)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    lo, hi = map(int, input().split())\n    if lo * 2 > hi:\n        print(hi - lo)\n    else:\n        if hi % 2 == 0:\n            hi -= 1\n        print(hi\/\/2)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    l,r=map(int,input().split())\n\n    ANS=r%l\n\n    for x in range(r\/\/2-1,r\/\/2+3):\n        if r>=x>=l:\n            ANS=max(ANS,r%x)\n    print(ANS)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys\nI = lambda x=' ':map(int,sys.stdin.readline().split(x))\npr = lambda *x, sep=' ', end = '\\n':sys.stdout.write(f'{sep.join(map(str, x))}{end}')\n\ndef solve():\n    l, r, = I()\n    a = r\n    b = max(l, r\/\/2 + 1)\n    pr(a % b)\n\ndef main():\n    t, = I()\n    for _ in range(t):\n        solve()\n\nmain()","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"testcase = int(input())\nfor i in range(testcase):\n    l,r = [int(i) for i in input().split()]\n    if int(r\/2)+1 >= l:\n        print(r%(int(r\/2)+1)) \n    else:\n        print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"test=int(input())\nfor i in range(test):\n    l1=list(map(int,input().split()))\n    l,r=l1[0],l1[1]\n    t=max(l,(r\/\/2)+1)\n    print(r-t)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input(\"\"))\nwhile t>0:\n    a,b=map(int,input().split())\n    if(b%2==1):\n        term2=((b+1)\/\/2)\n    else:\n        term2=((b\/\/2))\n    if(term2<a):\n        print(b%a)\n    else:\n        print(max((b%a),term2-1))\n    t-=1","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys\n# sys.stdin = open(\"input.txt\", \"r\")\ninput = sys.stdin.readline\n\nn = int(input())\nfor _ in range(n):\n    x, y = map(int, input().split())\n    x = max(x, y\/\/2+1)\n    lt, rt = x, y\n    answer = 0\n    while lt <= rt:\n        mid = (lt + rt) \/\/ 2\n        if y % mid > answer:\n            answer = y % mid\n            rt = mid - 1\n        else:\n            lt = mid + 1\n    print(answer)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    a,b=map(int,input().split())\n    if (abs(a-b)>=(b\/\/2)):\n        if b%2==0:\n            print((b-1)%(b\/\/2))\n        else:\n            print(b%((b+1)\/\/2))\n    else:\n        print(b%a)\n            ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def mex(L,R):\n    if L == R:\n        T = 0\n    elif L*2<R:\n        if R%2:\n            T = R\/\/2\n        else:\n            T = (R\/\/2)-1\n    else:\n        if R%L==0:\n            L+=1\n        T = R%L\n    return T\nN = int(input())\nZ = []\nfor q in range(N):\n    l, r = list(map(int, input().split()))\n    Z.append(mex(l,r))\nfor me in Z:\n    print(me)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r = list(map(int, input().split()))\n    quotient = r \/\/ 2\n    l = l if quotient < l else (quotient + 1)\n    print(r-l)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=input()\nt=int(t)\nfor i in range(0,t):\n    r,l=map(int,input().split())\n    if(r==l):\n        ans=0\n   \n    else:\n        if(l%2==0):\n            m=l\/2\n            m=int(m)\n            m=m+1\n            if(m in range(r,l+1)):\n                ans=l%m\n            else:\n                ans=l%r\n        else:\n            m=int(l\/2)\n            if(m in range(r,l+1)):\n                ans=m\n            else:\n                ans=l%r\n    print(ans)                            \n                \n    ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\nfor _ in range(T):\n    l,r = map(int,input().split())\n    x = r+1\n    if x%2:\n        x+=1\n    if x\/\/2 >=l:\n        print(r%(x\/\/2))\n    else:\n        print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    t = list(input().split())\n    t = [int(j) for j in t]\n    t = sorted(t)\n    if t[0] <= t[1]\/\/2:\n        res = t[1]%(t[1]\/\/2 + 1)\n    else:\n        res = t[1]%t[0]\n    print(res)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"\ntestcases=int(input())\nwhile testcases:\n    l,r=[int(i) for i in input().split()]\n    if l<=r\/\/2:\n        print(r%((r\/\/2)+1))\n    else:\n        print(r%l)\n    testcases-=1","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l, r = (int(i) for i in input().split())\n    b = r\/\/2\n    d = False\n    if l > b:\n        b = l\n        d = True\n    h = 0\n    #print(\"-----------\", b)\n    if not d:\n        #print(\"here\", b)\n        if r % 2 == 0:\n            h = b - 1\n        else:\n            h = b\n    else:\n        h = r % b\n    print(h)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nt = int(input())\nfor tc in range(t):\n    l,r = map(int,input().split())\n    if(l==r):\n        print(0)\n        continue\n    \n    x = math.ceil(r\/2)\n    if(x<l):\n        print(r%l)\n        continue\n    if(r%2==0):\n        r-=1\n    print(r%x)\n        ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor z in range(t):\n    l,r=map(int,input().split())\n    x=(r\/\/2)\n    if (x+1)<l:\n        print(r%l)\n    else:\n        x+=1\n        print(r%x)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\n\nfor iteration in range(t):\n    l, r = list(map(int, input().split()))\n    if r \/\/ 2 + 1 >= l:\n        print(r % ((r\/\/2)+1))\n    else:\n        print(r % l)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split(\" \"))\n    if l<=(r\/\/2):\n        print((r%(r\/\/2+1)))\n    else:\n        print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n\nt = int(input())\n\nfor _ in range(t):\n    l, r = map(int, input().split())\n    b = max(l, math.ceil((r + 1) \/ 2))\n    print(r % b)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nans = []\nfor i in range(t):\n    inp = input().split()\n    l = int(inp[0])\n    r = int(inp[1])\n    a = (r \/\/ 2) + 1\n    if l <= a:\n      ans.append(int(r - a))\n    else:\n      ans.append(int(r - l))\n    i += 1\nfor b in range(len(ans)):\n    print(ans[b])\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nfrom collections import Counter,defaultdict\ndef get_ints():return map(int, sys.stdin.readline().strip().split())\ndef get_list():return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string():return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    l,r=get_ints()\n    #if r%2==0:\n    #    print(r\/\/2-1)\n    if 2*l<=r:\n        print(math.ceil(r\/2)-1)\n    else:print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"from sys import stdin, setrecursionlimit, maxsize\nfrom collections import deque\nfrom heapq import *\nfrom math import sqrt, gcd\n\n\ninput = stdin.readline\nsetrecursionlimit(10**5)\n\nfor _ in range(int(input())):\n    l, r = map(int, input().split())\n    \n    if r<l*2:\n        print(r-l)\n    else:\n        print((r-1)\/\/2)\n        ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n      l,r = map(int,input().split())\n      a = max(l,r)\n      b = min(l,r)\n      if l==1 and r==1:\n            print(0)\n      else:\n            if a%2==0:\n                  t = a\/\/2\n                  if t>=l:\n                        print(t-1)\n                  else:\n                        print(a%b)\n            else:\n                  t = (a-1)\/\/2\n                  if t>=l:\n                        print(t)\n                  else:\n                        print(a%b)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\n\nfor t in range(T):\n    l,r = map(int, input().split())\n    if ((r+1)\/\/2)>= l and ((r+1)\/\/2)<= r:\n        print(((r+1)\/\/2)-1)\n    else:\n        print(r-l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def solve(l, r):\n    b = (r + 1) \/\/ 2\n\n    if l <= b:\n        return b - 1\n    else:\n        return r - l\n\nt = int(input())\n\nfor i in range(t):\n    a, b = map(int, input().split())\n    print(solve(a, b))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    l, r = map(int, input().split())\n    if l <= (r+2)\/\/2:\n        print((r+1)\/\/2 - 1)\n    else:\n        print(r - l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor tt in range(t):\n    l,r=map(int,input().split())\n    l=max(l,(r+1)\/\/2+int(r%2==0))\n    print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def main():\n    test=int(input())\n    i=0\n    while i<test:\n        l,r=map(int,input().split(\" \"))\n        rem=max_mod(l,r)\n        print(rem)\n        i+=1\n\ndef max_mod(min,max):\n    if (max\/\/2)>=min:\n        max_rem=(max-1)-(max\/\/2)\n    else:\n        max_rem=(max-min)\n    return max_rem\n\nif __name__==\"__main__\":\n    main()","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\n\nfor i in range(0, t):\n    l, r = map(int, input().split())\n\n    max = 0\n    q = r\/\/l\n    if l==r:\n        max = 0\n    elif r < l*2:\n        max = r-l\n    else:\n        max = (r-1)\/\/2\n    print(max)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n\tl, r = map(int, input().split())\n\tif r%2:\n\t\tdiv = (r+1)\/\/2\n\telse:\n\t\tdiv = r\/\/2 + 1\n\tif l > div:\n\t\tdiv = l\n\tprint(r-div)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    l, r = [int(i) for i in input().split()]\n    a = r\n    b = r \/\/ 2 + 1\n    if b >= l:\n        print(a % b)\n    else:\n        print(a % l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nwhile(t):\n    l,r=map(int,input().split())\n    max=0\n    if(r\/\/2 +1>=l):\n        l=r\/\/2 +1\n    print(r%l)\n    t-=1\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import math\n# import sys\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w+')\n\n\nfor t in range(int(input())):\n    l,r = map(int,input().split())\n    if r\/\/2>=l:\n        print(r- (r\/\/2) -1)\n    else:\n        print(r%l)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l,r=input().split()\n    l,r=int(l),int(r)\n    x=r\/\/2+1\n    if x>r\/\/2:\n        x=r\/\/2+1\n    x=max(l,x)\n    print(r%x)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"\nt = int(input())\n\nfor _ in range(t):\n    l, r = tuple(map(int, input().split()))\n\n    half = r \/\/ 2\n    g = max(half + 1, l)\n    print(r - g)\n\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"a = int(input())\nimport math\ni = 0\nwhile i<a:\n    b = input().split(\" \")\n    c = int(b[0])\n    e = int(b[1])\n    if e%2==0:\n        if math.floor(e\/\/2)+1>=c:\n            print(math.floor(e\/\/2)-1)\n        else:\n            print(e-c)\n    if (e%2==1):\n        if math.floor(e\/\/2)>=c:\n            print(math.floor(e\/\/2))\n        else:\n            print(e-c)\n    i=i+1","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):a, b = map(int, input().split());print(b % max(a, b \/\/ 2 + 1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"\ndef f(a,b):\n\tif a<=(b\/\/2):\n\t\treturn max(b%(b\/\/2),b%((b\/\/2)+1))\n\treturn b%a\n\nfor i in range(int(input())):\n\ta,b=map(int,input().split())\n\tprint(f(a,b))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    ans = r % max(l, r \/\/ 2 + 1)\n    print(ans)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys\n\nfor i in range(int(input())):\n    t = list(map(int, input().split()))\n    l = t[0]\n    r = t[1]\n    if l <= r\/2:\n        if r % 2 == 0:\n            ans = r \/ 2 - 1\n        else:\n            ans = (r - 1) \/ 2\n    else:\n        ans = r-l\n    print(int(ans))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor k in range(t):\n\tl,r=map(int,input().split())\n\tif l<= r\/\/2:\n\t\tx=r%(r\/\/2+1)\n\telse:\n\t\tx=r%(l)\n\tprint(x)\n","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    l, r = map(int, input().split())\n    maxi = max(l, r\/\/2 + 1)\n    print(r % maxi)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(0, int(input())):\n    l, r = map(int, input().split())\n    if l == r :\n        print(0)\n    elif r \/\/ 2 + 1 >= l:\n        tmp = (r \/\/ 2 + 1)\n        print( r % tmp )\n    else:\n       print(r % l )","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    x = list(map(int, input().split()))\n    x.sort(reverse = True)\n    a = x[0]\n    b = x[1]\n    if a\/\/2 < b:\n        print(a%b)\n    else:\n        print(a%((a\/\/2)+1))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for c in range(int(input())):\n    l,n=map(int,input().split())\n    k=0\n    if l==n:\n        print(0)\n        continue\n    if n%2==0:\n        k=n\/2-1\n    else:\n        k=int(n\/2)\n    if l>k:\n        while n%l==0 and n!=l:\n            l+=1\n        print(n%l)\n    else:\n        print(int(k))","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"#from math import ceil\nt=int(input())\nfor _ in range(t):\n    l,r=[int(x) for x  in input().split()]\n    j=max(r\/\/2,l)\n    while r\/\/j!=1:\n        j+=1\n    print(r%j)\n    ","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"import sys\nimport math\nfor t in range(int(input())):\n    l,r = map(int,sys.stdin.readline().split())\n    if l <= math.ceil(r\/2):\n        print(math.ceil(r\/2)-1)\n    else:\n        print(r%l)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for i in range(int(input())):\n    l,r = tuple(map(int,input().split()))\n    if r%2==0:\n        if r\/\/2 <l:\n            print(r%l)\n        else:\n            print(r\/\/2 -1)\n    else:\n        if r\/\/2 <l:\n            print(r%l)\n        else:\n            print(r\/\/2)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l, r = map(int, input().split())\n    a = r\n    b = r\/\/2+1\n    if b<l:\n        b = l\n    print(a%b)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    l,r=map(int,input().split())\n    ans=0\n    a=max(l,(r+1)\/\/2)\n    for j in range(max(l,r-1),r+1):\n        ans=max(ans,j%a)\n    print(ans)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"# your code goes here\nfor i in range(int(input())):\n\tl,r=map(int,input().split())\n\tt=r\/\/2\n\tif(t>=l):\n\t\tprint(r%(t+1))\n\telse:\n\t\tprint(r%l)\n\t","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    l, r = map(int, input().split())\n    a = r\n    b = r\/\/2+1\n    if b<l:\n        b = l\n    print(a%b)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    l, r = [int(x) for x in input().split()]\n    ans = r % l\n    x = (r + 1) \/\/ 2\n    if r >= x >= l:\n        ans = max(x-1, ans)\n    print(ans)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"\nt = int(input())\n\nfor i in range(t):\n    l, r = map(int, input().split())\n    if r < 2 * l:\n        print(r - l)\n    else:\n        print((r - 1) \/\/ 2)","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":"def solve():\n    l, r = map(int, input().split())\n    if r <= 2*l-1:\n        return r-l\n    return (r-1)\/\/2\n\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor i in range(t):\n    print(solve())","Incorrect Solution":null},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    le,r=map(int,input().split())\n    t=0\n    if r-le==0:\n        t=0\n    elif r-le==1:\n        t=1\n    elif r\/\/2>=le:\n        t=r%(r\/\/2+1)\n    else:\n        t=le\n    print(t)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l, r = map(int, input().split())\n    b = (r+1)\/\/2 # ceil of r\/2\n    b = max(b, l) # check b inside range\n    a = r\n    if (a-1)%b > a%b:\n        a = r-1\n    print(a%b)\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for iii in range(int(input())):\n    #n=int(input())\n    q,w=list(map(int,input().split()))\n    #for i in range(w,q-1,-1):\n        #for j in range(q,i):\n            #print(i,j,i%j)\n    if w==q:\n        print(0)\n        continue\n    if w-1==q:\n        print(1)\n        continue\n    if w-q>((w-1)\/\/2):\n        print((w-1)\/\/2)\n    else:\n        print(w-q)\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split())\n    # if l==r:\n    #     print(l)\n    if (r-l)<=1:\n        print(r%l)\n    else:\n        print(r%((r\/\/2)+1))\n        # if (((r - 1) % r) > ((r - 2) % (r - 1))):\n        #     print((r - 1) % r)\n        # else:\n        #     print((r - 2) % (r - 1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=input()\nt=int(t)\nfor i in range(0,t):\n    r,l=map(int,input().split())\n    if(r==l):\n        ans=0\n   \n    else:\n        if(l%2==0):\n            m=l\/2\n            m=int(m)\n            m-=1\n            if(m in range(r,l+1)):\n                ans=m\n            else:\n                ans=l%r\n        else:\n            m=int(l\/2)\n            if(m in range(r,l+1)):\n                ans=m\n            else:\n                ans=l%r\n    print(ans)                            \n                \n    "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    else:\n        x=r%((r\/\/2)+1)\n        if l<=x<=r:\n            print(x)\n        else:\n            print(r%l)\n\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=input()\nt=int(t)\nfor i in range(0,t):\n    r,l=map(int,input().split())\n    if(r==l):\n        ans=0\n   \n    else:\n        if(l%2==0):\n            m=l\/2\n            m=int(m)\n            m=m+1\n            if(m in range(r,l+1)):\n                ans=l%m\n            else:\n                ans=l%r\n        else:\n            m=int(l\/2)\n            if(m in range(r,l+1)):\n                ans=m%r\n            else:\n                ans=l%r\n    print(ans)                            \n                \n    "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"loop=int(input())\nfor i in range(loop):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    elif r-l==1:\n        print(1)\n    else:\n        print((r-int((r\/2))-1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for c in range(int(input())):\n\tl,n=map(int,input().split())\n\tk=0\n\tif n%2==0:\n\t\tk=n\/2-1\n\telse:\n\t\tk=int(n\/2)\n\tif l>k:\n\t\tprint(n%l)\n\telse:\n\t\tprint(int(k))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nt=int(input())\nfor i in range(t):\n    l,r = [int(i) for i in input().split()]\n    if(r-l==1):\n        print(1)\n        continue\n    if(r%2==0):\n        a=r-1\n    else:\n        a=r\n    b=math.ceil(r\/2)\n    print(int(a%b))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input(\"\"))\nb = 0\n\nif (t>=1 and t<=100000000):\n    for i in range(t):\n        p,q = map(int,input().split())\n        if (p>=1 and q<= 1000000000 and p<=q):\n            if ((q\/2) > p):\n                a = q\/2\n                b = int(a)+1\n                c = q % b\n                print(int(c))\n            else:\n                c = q%p\n                print(c)\n        else:\n            break\n\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    l, r = map(int, input().split())\n    print(r % (r\/\/2 + 1))\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    le,r=map(int,input().split())\n    t=0\n    if r-le==0:\n        t=0\n    elif r-le==1:\n        t=1\n    elif r\/\/2>le:\n        t=r%(r\/\/2+1)\n    else:\n        t=le\n    print(t)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    if r - l == 1:\n        print(\"1\")\n    else:\n        print(r - (int(r\/2) + 1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve():\n    l, r = map(int, input().split())\n    return min(l-1, r-l)\n\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor i in range(t):\n    print(solve())\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a,b=map(int, input().split())\n    if int(b\/2)>a:\n        if int(b\/2)==b\/2:\n            ans=int(b\/2)-1\n            print(ans)\n        else:\n            ans=int(b\/2)\n            print(ans)\n    else:\n        ans=b%a\n        print(ans)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nloop=int(input())\nfor i in range(loop):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    elif r-l==1:\n        print(1)\n    elif (r%l)%2!=0:\n        print(math.ceil(r-(r\/2)+1))\n    else:\n        print(math.ceil(r-(r\/2)-1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"try:\n    lst=[]\n    t=int(input())\n    for _ in range(t):\n        l, r = map(int, input().split(\" \"))\n        mid=r\/\/2\n        if l == r :\n            print(0)\n        elif r-l == 1:\n            print(1)\n        elif (r%l)%2 != 0 :\n            print((r-mid)+1)\n        else :\n            print((r-mid)-1)\nexcept:pass "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\n\nfor _ in range(n):\n    l, r = map(int, input().split(' '))\n    if l == r:\n        print (0)\n    else:\n        diff = r - l\n        if diff \/\/ 2 == 0:\n            print (1)\n        else:\n            a = r \/\/ 2            \n            while ((a * 2) >= r):\n                a -= 1\n\n            print (a)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    else:\n        k=r%2+1\n        if k>=l:\n            print(r%k)\n        else:\n            print(r%l)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    le,r=map(int,input().split())\n    t=0\n    if r-le==0:\n        t=0\n    elif r-le==1:\n        t=1\n    elif r\/\/2>=le:\n        t=r%((r\/\/2)+1)\n    else:\n        t=r%le\n    \n        \n    print(t)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\n \nfor _ in range(n):\n    l, r = map(int, input().split(' '))\n    if l == r:\n        print (0)\n    else:\n        diff = r - l\n        if diff \/\/ 2 == 0:\n            if l == 1:\n                print (0)\n            else:\n                print (1)\n        else:\n            a = r \/\/ 2            \n            while ((a * 2) >= r and a >= l):\n                a -= 1\n \n            print (a)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def mex(L,R):\n    if L == R:\n        T = 0\n    elif L*2<R:\n        if R%2:\n            T = R\/\/2\n        else:\n            T = (R\/\/2)-1\n    else:\n        while R%L==0:\n            L+=1\n        T = R%L\n    return T\nN = int(input())\nZ = []\nfor q in range(N):\n    l, r = list(map(int, input().split()))\n    Z.append(mex(l,r))\nfor me in Z:\n    print(me)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split())\n    # if l==r:\n    #     print(l)\n    if (r-l)<=1:\n        print(r%l)\n    else:\n        print((r-1)\/\/2)\n        # if (((r - 1) % r) > ((r - 2) % (r - 1))):\n        #     print((r - 1) % r)\n        # else:\n        #     print((r - 2) % (r - 1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(t):\n    l, r = map(int, input().split())\n    if r == 1 or l == r:\n        print(0)\n    elif r % 2 == 1:\n        if l > (r - 1) \/\/ 2:\n            print(r - l)\n        else:\n            print((r - 1) \/\/ 2)\n    else:\n        if l > (r - 2) \/\/ 2:\n            print(r - l)\n        else:\n            print((r - 2) \/\/ 2)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    r,l= input().split()\n    r=int(r)\n    l=int(l)\n    if(r==1 and l>1): print(1)\n    elif(l-r==0 or l-r==1): print(l-r)\n    else: print(int(l\/2)-1+(l%2)) "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nans = []\nfor i in range(t):\n    inp = input().split()\n    l = int(inp[0])\n    r = int(inp[1])\n    a = (r \/\/ 2) + 1\n    if  r == 2 and l == 1:\n        ans.append(1)\n    elif l <= a:\n      ans.append(int(r - a))\n    else:\n      ans.append(int(r - l))\n    i += 1\nfor b in range(len(ans)):\n    print(ans[b])"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor i in range(t):\n    l,r=map(int,input().split( ))\n    if(l==r):\n        print(0)\n        continue\n    elif r-l==1:\n        print(1)\n        continue\n    elif((r%l)%2!=0):\n        print((r-(r\/\/2))+1)\n        continue\n    else:\n        print((r-(r\/\/2))-1)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    elif r%l==0:\n        if r%2==0:\n            print((r\/\/2)+1)\n        else:\n            print(r\/\/2)\n    else:\n        x=r%l\n        r=r-x\n        y=r\/\/2\n        if l<=y<=r:\n            print(y)\n        else:\n            print(x)\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nloop=int(input())\nfor i in range(loop):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    elif r-l==1:\n        print(1)\n    else:\n        print(math.ceil(r-(r\/2)-1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split())\n    a=r\/\/2\n    if a>=l:\n     if r%a==0:\n        a-=1\n     print(a)\n    else:\n        print(r%l)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    if r==l: print(0)\n    else: print(l-1)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(0, int(input())):\n    l, r = map(int, input().split())\n    if r \/ 2 + 1 >= l:\n        tmp = (r \/ 2 + 1)\n        print( r % tmp )\n    else:\n       print(r % l )"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for iii in range(int(input())):\n    #n=int(input())\n    q,w=list(map(int,input().split()))\n    #for i in range(w,q-1,-1):\n        #for j in range(q,i):\n            #print(i,j,i%j)\n    if w==q:\n        print(0)\n        continue\n    if w-1==q:\n        print(1)\n        continue\n    if w-q>((w\/\/2)-1):\n        print(w\/\/2-1)\n    else:\n        print(w-q)\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    r,l= input().split()\n    r=int(r)\n    l=int(l)\n    if(l-r==0 or l-r==1): print(l-r)\n    else: print(int(l\/2)-1) "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nfrom collections import Counter,defaultdict\ndef get_ints():return map(int, sys.stdin.readline().strip().split())\ndef get_list():return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string():return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    l,r=get_ints()\n    if r==l:\n        ans=0\n        print(ans)\n    elif l+1==r:print(1)\n    else:\n        ans=(r%((r\/2)+1))\n        print(math.ceil(ans))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r=input().split()\n    l,r=int(l),int(r)\n    x=r\/\/2\n    x=max(l,x)\n    print(r%x)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    a,b=map(int,input().split())\n    if (abs(a-b)>(b\/\/2)):\n        if b%2==0:\n            print((b-1)%(b\/\/2))\n        else:\n            print(b%((b+1)\/\/2))\n    else:\n        print(b%a)\n            "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input(\"\"))\nb = 0\n\nfor i in range(t):\n    p,q = map(int,input().split())\n\n    if ((q\/2) > p):\n        a = q\/2\n        b = int(a)+1\n        c = q % b\n        print(int(c))\n    else:\n        c = q%p\n        print(c)\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def main():\n    test=int(input())\n    i=0\n    while i<test:\n        l,r=map(int,input().split(\" \"))\n        rem=max_mod(l,r)\n        print(rem)\n        i+=1\n\ndef max_mod(min,max):\n    if max\/\/2>=min:\n        max_rem=(max\/\/2)%(max-1)\n    else:\n        max_rem=(max-min)\n    return max_rem\n\nif __name__==\"__main__\":\n    main()"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for iii in range(int(input())):\n    #n=int(input())\n    q,w=list(map(int,input().split()))\n    #for i in range(w,q-1,-1):\n        #for j in range(q,i):\n            #print(i,j,i%j)\n    if w-q>((w\/\/2)-1):\n        print(w\/\/2-1)\n    else:\n        print(w-q)\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T = int(input())\n\nfor t in range(T):\n    l,r = map(int, input().split())\n    if ((r+1)\/\/2)-1>= l and ((r+1)\/\/2)-1<= r:\n        print(((r+1)\/\/2)-1)\n    else:\n        print(r%l)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n    l,r = tuple(map(int,input().split()))\n    if r%2==0:\n        if r\/\/2 -1 <l:\n            print(r%l)\n        else:\n            print(r\/\/2 -1)\n    else:\n        if r\/\/2 <l:\n            print(r%l)\n        else:\n            print(r\/\/2)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input(\"\"))\nl = []\nif (t>=1 and t<=10000):\n    for i in range(t):\n        a = 0\n        b = 0\n        c = 0\n        \n        p,q = map(int,input().split())\n        if (p>=1 and q<= 1000000000 and p<=q):\n            if ((q\/2) > p):\n                a = q\/2\n                b = int(a)+1\n                c = q % b\n                l.append(int(c))\n            else:\n                c = q%p\n                l.append(c)\n        else:\n            break\n\n    for i in l:\n        print(i)\n\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    z = (r+1)\/\/2\n    if z>=r: print(z-1)\n    else: print(r%l)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\n\nfor _ in range(n):\n    l, r = map(int, input().split(' '))\n    if l == r:\n        print (0)\n    else:\n        diff = r - l\n        if diff \/\/ 2 == 0:\n            print (1)\n        else:\n            a = r \/\/ 2            \n            while ((a * 2) >= r and a >= l):\n                a -= 1\n\n            print (a)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    if r - l == 1:\n        print(\"1\")\n    elif r%2 == 0:\n        print(int(r\/2) - 1)\n    else:\n        print(int(r\/2))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"n = int(input())\nfor i in range(n):\n    t = list(input().split())\n    t = [int(j) for j in t]\n    t = sorted(t)\n    if t[0] < t[1]\/\/2:\n        res = t[1]%(t[1]\/\/2 + 1)\n    else:\n        res = t[1]%t[0]\n    print(res)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l, r = map(int, input().split())\n    k = (r \/\/ 2) + 1\n    if k >= l:\n        print(r % k)\n    else:\n        num = ((r - l) \/ 2) + 1\n        print(int(r % num))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input())\nfor _ in range(t):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    else:\n        k=r\/2+1\n        if k>=l:\n            print(r%k)\n        else:\n            print(r%l)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for i in range(int(input())):\n      l,r = map(int,input().split())\n      a = max(l,r)\n      b = min(l,r)\n      if l==1 and r==1:\n            print(0)\n      else:\n            if a%2==0:\n                  t = a\/\/2\n                  if t>=l:\n                        print(t-1)\n                  else:\n                        print(a%b)\n            else:\n                  t = a-1\n                  if t>=l:\n                        print(t\/\/2)\n                  else:\n                        print(a%b)\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    if r - l == 0:\n        print(\"0\")\n        continue\n    if r - l == 1:\n        if l == 1:\n            print(\"0\")\n        else:\n            print(\"1\")\n    else:\n        print(r - (int(r\/2) + 1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    r,l= input().split()\n    r=int(r)\n    l=int(l)\n    if(l-r==0 or l-r==1): print(l-r)\n    else: print(int(l\/2)-1+(l%2)) "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(0, t):\n    l, r = map(int, input().split())\n\n    max = 0\n    if l==r:\n        max = 0\n    elif l == r-1:\n        max = 1\n    elif r%2:\n        max = r\/\/2\n    else:\n        max = r%(r\/\/2 + 1)\n    print(max)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    r,l= input().split()\n    r=int(r)\n    l=int(l)\n    if(r==1 and l-r==1): print(1)\n    elif(l-r==0 or l-r==1): print(l-r)\n    else: print(int(l\/2)-1+(l%2)) "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T=int(input())\nfor t in range(0,T):\n    l,r=map(int,input().split(\" \"))\n    if l==r:\n        print(0)\n    else:\n        if r%2==0 :\n            ans=int(r\/2 +1)\n        else:\n            ans=r\/\/2\n        \n        if ans>l:\n            print(ans)\n        else:\n            print(r%l)\n        "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    r,l= input().split()\n    r=int(r)\n    l=int(l)\n    if(r==1): print(1)\n    elif(l-r==0 or l-r==1): print(l-r)\n    else: print(int(l\/2)-1+(l%2)) "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"from math import ceil\nt=int(input())\nfor _ in range(t):\n    l,r=[int(x) for x  in input().split()]\n    \n    \n    \n    j=max(r\/\/2,l)\n    while r\/\/j!=1 and j<=r:\n        j+=1\n    if j==r:\n        print(max(r%j,ceil((r-l)\/2)))\n    else:\n        print(r%(j))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def main():\n    test=int(input())\n    i=0\n    while i<test:\n        l,r=map(int,input().split(\" \"))\n        rem=max_mod(l,r)\n        print(rem)\n        i+=1\n\ndef max_mod(min,max):\n    if (max\/\/2)>=min:\n        max_rem=(max-1)%(max\/\/2)\n    else:\n        max_rem=(max-min)\n    return max_rem\n\nif __name__==\"__main__\":\n    main()"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    if r - l == 1:\n        if l == 1:\n            print(\"0\")\n        else:\n            print(\"1\")\n    else:\n        print(r - (int(r\/2) + 1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    z = (l+1)\/\/2\n    if z>=r: print(z-1)\n    else: print(l%r)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def findAns():\n    t=int(input())\n    for i in range(t):\n        l,r=map(int,input().split())\n        if l<=(r-1)\/\/2:\n            print((r-1)\/\/2)\n        else:\n            print(r%l)\nfindAns()\n\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"try:\n    lst=[]\n    t=int(input())\n    for _ in range(t):\n        l, r = map(int, input().split(\" \"))\n        mid=r\/\/2\n        if l == r :\n            print(0)\n        elif r-l == 1:\n            print(1)\n        elif l> mid:\n            print(r%l)\n        else:\n            print(r%((r\/\/2)+1))\nexcept:pass    "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for ca in range(int(input())):\n    l,h=map(int,input().split())\n    mid=int((l+h)\/2)\n    if l-h==0:\n        print(0)\n        continue\n    if l-h==1:\n        print(1)\n        continue\n    f=4\n    ans=0\n    while f!=0:\n        f-=1\n        ans=max(h%mid,ans)\n        mid-=1\n    f=5\n    mid=mid+3\n    while f!=0:\n        f-=1\n        ans=max(h%mid,ans)\n        mid+=1\n    print(ans)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"T=int(input())\nfor t in range(0,T):\n    l,r=map(int,input().split(\" \"))\n    if r%2==0:\n        ans=int(r\/2 +1)\n    else:\n        ans=r\/\/2\n        \n    if ans>l:\n        print(ans)\n    else:\n        print(r%l)\n        "},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input(\"\"))\n\nif (t>=1 and t<=100000000):\n    for i in range(t):\n        a = 0\n        b = 0\n        c = 0\n        p,q = map(int,input().split())\n        if (p>=1 and q<= 1000000000 and p<=q):\n            if ((q\/2) > p):\n                a = q\/2\n                b = int(a)+1\n                c = q % b\n                print(int(c))\n            else:\n                c = q%p\n                print(c)\n        else:\n            break\n\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r=map(int,input().split())\n    d=abs(l-r)\n    if d<=1:\n        print(d)\n    else:\n        print((r-1)\/\/2)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"# import sys\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\n\nn = int(input())\n\nfor x in range(n):\n    a,b=map(int,input().split())\n\n    if a==b:\n        print(\"0\")\n    else:\n        if a>(b\/2):\n            print(b%a)\n        if a<=b\/2:\n            r=b\/2\n            k=b%r\n            t=b%(r+1)\n            print(max(k,t))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def solve(l,r):\n    if l==r:\n        return 0\n    if r-l==1:\n        return 1\n    while(l<r):\n        if r%2==0:\n            r-=1\n        else:\n            return r%((r\/\/2)+1)\nfor _ in range(int(input())):\n    l,r=map(int,input().split())\n    print(solve(l,r))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"read = lambda: map(int, input().split())\nt = int(input())\nfor i in range(t):\n    l, r = read()\n    a = r - (r % 2 == 0)\n    b = max(l, ((a + 1) \/\/ 2))\n    print(max(a % b, r % l))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nfor _ in range(int(input())):\n    l,r=map(int,input().split())\n    if(r%2==0):\n        print(r-(r\/\/2+1))\n    else:\n        print(r-(r\/\/2+1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t=int(input(\"\"))\nwhile t>0:\n    a,b=map(int,input().split())\n    term2=((b+1)\/\/2)- 1\n    if(term2<a):\n        print(b%a)\n    else:\n        print(max((b%a),term2))\n    t-=1"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"def mex(L,R):\n    if L == R:\n        T = 0\n    elif L*2<R:\n        if R%2:\n            T = R\/\/2\n        else:\n            T = (R\/\/2)-1\n    else:\n        T = R%L\n    return T\nN = int(input())\nZ = []\nfor q in range(N):\n    l, r = list(map(int, input().split()))\n    Z.append(mex(l,r))\nfor me in Z:\n    print(me)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\n\nfor i in range(0, t):\n    l, r = map(int, input().split())\n\n    max = 0\n    if l==r:\n        max = 0\n    elif l == r-1:\n        max = 1\n    elif r%2:\n        max = r\/\/2\n    else:\n        max = r\/\/2 - 1\n    print(max)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor i in range(t):\n    l, r = map(int, input().split())\n    print(r * (r\/\/2 + 1))\n"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input())\nfor _ in range(t):\n    l, r = list(map(int, input().split()))\n    if (r-1)\/\/2 >= l:\n        print((r-1)\/\/2)\n    else:\n        print (r % l)"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"for _ in range(int(input())):\n    l,r = map(int, input().split())\n    if r - l == 1:\n        if l == 1:\n            print(\"0\")\n        else:\n            print(\"1\")\n    else:\n        if r - l == 0:\n            print(\"0\")\n        else:\n            print(r - (int(r\/2) + 1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"import math\nloop=int(input())\nfor i in range(loop):\n    l,r=map(int,input().split())\n    if l==r:\n        print(0)\n    elif r-l==1:\n        print(1)\n    elif (r%l)%2!=0:\n        print(int(r-(r\/2)+1))\n    else:\n        print(math.ceil(r-(r\/2)-1))"},{"Name":"1562_A. The Miracle and the Sleeper","Difficulty":"A","Description":"You are given two integers l and r, l\u2264 r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1\u2264 t\u2264 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1\u2264 l \u2264 r \u2264 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r\u2265 a \u2265 b \u2265 l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.","Solution Language":"PYTHON3","Correct Solution":null,"Incorrect Solution":"t = int(input(\"\"))\nl = []\nif (t>=1 and t<=100000000):\n    for i in range(t):\n        a = 0\n        b = 0\n        c = 0\n        \n        p,q = map(int,input().split())\n        if (p>=1 and q<= 1000000000 and p<=q):\n            if ((q\/2) > p):\n                a = q\/2\n                b = int(a)+1\n                c = q % b\n                l.append(int(c))\n            else:\n                c = q%p\n                l.append(c)\n        else:\n            break\n\n    for i in l:\n        print(i)\n\n"},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(1, t + 1):\n    a, b = map(int, input().split())\n    n = a \/\/ 2 + 1\n    print(b \/\/ n)\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"T = int(input())\n\nwhile T:\n    T -= 1\n\n    n, s = map(int, input().split())\n\n    print(s\/\/(n\/\/2+1))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,s=map(int,input().split())\n    mid=(n>>1)+1\n    print(s\/\/mid)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor tt in range(t):\n    n,s= [int(i) for i in input().split(' ')]\n    ans= n\/\/2+1\n    ans = s \/\/ans\n    \n    print(ans)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"# cook your dish he\nimport math\ntestcases = int(input())\nfor i in range(testcases):\n    n,s = map(int,input().split())\n    z = n\/\/2 + 1 \n    print(s\/\/z)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor i in range(t):\n    n,s = map(int,input().split())\n    print(s\/\/(n\/\/2 + 1))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"l = int(input())\nfor i in range(l):\n    n, s = map(int, input().split())\n    print(s\/\/(n\/\/2+1))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n=list(map(int,input().strip().split()))[:2]\n    print(n[1]\/\/(n[0]\/\/2+1))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,s=map(int,input().split())\n    print(s\/\/(n-(n-1)\/\/2))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor i in range(t):\n    n,s=[int(x) for x in input().split()]\n    n=n\/\/2+1\n    print(s\/\/n)\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t=int(input())\nfor _ in range(t):\n    n,s=map(int,input().split())\n    x = n-n\/\/2+~n%2\n    print(s\/\/x)\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"\nimport  math\nfor _ in range (int(input())):\n    a,b=map(int,input().split())\n\n    x=math.ceil(a\/2)\n    z= a-x+1\n    n=b\/\/z\n    print(n)\n\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n,s = [int(i) for i in input().split()]\n    print(s \/\/ -(-(n+1)\/\/2))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"from math import floor, ceil\ndef sol():\n\tn, s = map(int,input().split())\n\tprint(floor(s\/(n - ceil(n\/2)+1)))\nfor i in range(int(input())):\n\tsol()","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    [n, s] = [int(d) for d in input(\"\").split(' ')]\n    print(s\/\/((n\/\/2)+1))\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"def median_maximize(n,s):\n  return s\/\/((n\/\/2)+1)\n\nt = int(input())\nfor i in range(t):\n  [n,s] = map(int,input().split())\n  print(median_maximize(n,s))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,s=map(int,input().split())\n    l=n\/\/2+n%2-1\n    r=n-l\n    print(s\/\/r)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"import math\nfor _ in range(int(input())):\n    n,s=map(int,input().split())\n    ans=s\/\/(n-math.ceil(n\/2)+1)\n    if n==1:\n        ans=s\n    print(ans)\n    ","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n, s = map(int, input().split())\n    print(s \/\/ (n - ((n+1)\/\/2) + 1))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"import math\n\nfor _ in range(int(input())):\n    n, s = (int(x) for x in input().strip().split())\n    print(math.floor(s \/ (n - math.ceil(n \/ 2) + 1)))\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"def function():\n    array=[]\n    n,sum=input().split()\n    n=int(n)\n    sum=int(sum)\n    print(sum\/\/(n\/\/2+1))\ni=input()\nfor j in range(int(i)):\n    function()","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n,s = map(int,input().split())\n    n-=(n-1)\/\/2\n    print(s\/\/n)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"import math\n\nn = int(input())\nfor i in range(n):\n    n, s = map(int, input().split())\n    x = math.ceil(n \/ 2)\n    kol = n - x + 1\n    print(s \/\/ kol)\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t=int(input());\nwhile(t):\n    t-=1;\n    n,s=map(int,input().split());\n    print(s\/\/(n\/\/2+1));","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"import math\nfor t in range(int(input())):\n\tlen, sum = map(int, input().split())\n\tmedian = math.floor(len\/2) + 1\n\tmaxMedian = math.floor(sum\/median)\n\tprint(maxMedian)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"n=int(input())\nfor i in range(n):\n    r = [int(x) for x in input().split()]\n    print(r[1]\/\/((r[0]+2)\/\/2))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor test in range(t):\n    n, s = map(int, input().split())\n    m = n \/\/ 2 + 1\n    print(s \/\/ m)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"n = int(input())\nfor i in range(n):\n    [a, b] = list(map(int, input().split()))\n    print(int(b\/(int(a\/2)+1)))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for __ in range(int(input())):\n    N, S = map(int,input().split())\n    print(S \/\/ (N\/\/2 + 1))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"from math import ceil\nfor _ in range(int(input())):\n    l,s=map(int,input().split())\n    if l%2==0:\n        l-=(l-1)\/\/2\n    else:\n        l-=(l)\/\/2\n    print(s\/\/l)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for x in range(int(input())):\n    s = input()\n    i = s.find(' ')\n    a = int(s[:i])\n    b = int(a\/2) + 1\n    c = int(s[i+1:])\n    print(c \/\/ b)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"import math\nfor i in range(int(input())):\n    n,s=map(int,input().split())\n    num=math.ceil((n+1)\/2)\n    print(s\/\/num)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"def parse_n_solve():\n    t = int(input())\n\n    for i in range(t):\n        n, s = map(int, input().split())\n        print(s \/\/ ((n \/\/ 2) + 1))\n\n\n\nparse_n_solve()","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"import math\n\nfor _ in range(int(input())):\n    n, s = map(int, input().split())\n\n    print(s \/\/ (n\/\/2 + 1))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"import sys\ninput = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\n\nT = int(input())\nfor _ in range(T):\n    N, S = map(int, input().split())\n    c = N \/\/ 2 + 1\n    print(S \/\/ c)","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,s=map(int,input().split())\n    print(s\/\/(int(n\/2)+1))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,s = map(int,input().split())\n    t = (n+2)\/\/2\n    print(s\/\/t)\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"t = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split())\n    m = s \/\/ (n \/\/ 2 + 1)\n    print(m)\n","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"import math\n\nfor i in range(int(input())):\n    n, s = map(int, input().split())\n    k = math.floor((n+2) \/ 2)\n    print(math.floor(s\/k))","Incorrect Solution":null},{"Name":"1566_A. Median Maximization","Difficulty":"A","Description":"You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the \u2308 {m\/2} \u2309-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the \u2308 m\/2 \u2309-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 \u2264 n, s \u2264 10^9) \u2014 the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer \u2014 the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ","Solution Language":"PYTHON3","Correct Solution":"for _ in range(int(input())):\n    n,s=map(int,input().split())\n    a=0\n    b=n\/\/2\n    b+=1 \n    a=s\/\/b\n    print(a)\n        ","Incorrect Solution":null}]